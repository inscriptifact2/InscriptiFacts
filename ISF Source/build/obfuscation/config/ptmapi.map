isf.ptm.controls.EnvironmentMapPanel -> l11lIAAI.l11lIAAI.l11lIAAI.l1IlIlTI1T1T:
    isf.ptm.graphics.EnvironmentMap environmentMap -> TT1lIT1ll1ITIIl1
    int[] displayBuffer -> ITI1llTTI1lITl
    int[] savedBuffer -> l1IlTT1lITIl1IT1
    isf.ptm.controls.EnvironmentMapPanel$EnvironmentMapCanvas emc -> lI1I1T1ITTl1llIT
    java.awt.image.BufferedImage displayImage -> IlITlTTTl11Il1I
    int startX -> IT11TT1lIll1ITIl
    int startY -> TIITI1lTlTl1Il11
    double[] cos -> TTl1TITI1l1Il1lI
    double[] sin -> IITTlT11lII1T1ll
    isf.ptm.controls.PTMWindow ptmw -> l1IllT11TIIT1ITl
    isf.ptm.controls.EnvironmentMapPanel$EnvironmentMapCanvas getCanvas() -> TT1lIT1ll1ITIIl1
    void setPTMWindow(isf.ptm.controls.PTMWindow) -> TT1lIT1ll1ITIIl1
    void _initDraw() -> ITI1llTTI1lITl
    void _initEMP() -> l1IlTT1lITIl1IT1
    void unsetEnvironmentMap() -> lI1I1T1ITTl1llIT
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> IlITlTTTl11Il1I
    void redraw() -> IT11TT1lIll1ITIl
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> TT1lIT1ll1ITIIl1
    void _setEM(isf.ptm.graphics.EnvironmentMap) -> ITI1llTTI1lITl
    void init(isf.ptm.graphics.EnvironmentMap,isf.ptm.controls.PTMWindow) -> TT1lIT1ll1ITIIl1
    void _mDrag(java.awt.event.MouseEvent) -> TT1lIT1ll1ITIIl1
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void _rotateTheta(int) -> TT1lIT1ll1ITIIl1
    int xlateX(int) -> ITI1llTTI1lITl
    int xlateY(int) -> l1IlTT1lITIl1IT1
    void rotate(int) -> lI1I1T1ITTl1llIT
    int[] access$000(isf.ptm.controls.EnvironmentMapPanel) -> TT1lIT1ll1ITIIl1
    isf.ptm.graphics.EnvironmentMap access$100(isf.ptm.controls.EnvironmentMapPanel) -> ITI1llTTI1lITl
isf.ptm.controls.EnvironmentMapPanel$EnvironmentMapCanvas -> l11lIAAI.l11lIAAI.l11lIAAI.lI1lTIIlT1T1:
    isf.ptm.controls.EnvironmentMapPanel this$0 -> l1lT1IlI1IlT1TIT
    void paintComponent(java.awt.Graphics) -> paintComponent
    void _pc(java.awt.Graphics) -> TT1lIT1ll1ITIIl1
isf.ptm.controls.PTMCanvas -> l11lIAAI.l11lIAAI.l11lIAAI.Tl1l11IlIITT:
    int MEMORY_IMAGE_SOURCE -> IlIT1lT1TI1IlT1l
    int BUFFERED_IMAGE -> II11llTI1TlTITl1
    int desiredWidth -> T1TlITlIl11I1TIl
    int desiredHeight -> Il1II1TlT1llTI1T
    int displayWidth -> lITTlIlT1IlI1T
    int displayHeight -> ITl1I11TIlTlTlI1
    int offsetX -> T11I1Tll1IllIITT
    int offsetY -> lT1lITllTTII111I
    boolean hints -> IlTT11IT1ITI1lll
    boolean isFast -> TIl1T1IlT1IIl1lT
    boolean fixed -> fixed
    isf.ptm.controls.PTMCanvas _createCanvas(int,int,int) -> TT1lIT1ll1ITIIl1
    boolean isFast() -> TIITI1lTlTl1Il11
    isf.ptm.controls.PTMCanvas createPTMCanvas(int,int,int) -> ITI1llTTI1lITl
    void useHint(boolean) -> TT1lIT1ll1ITIIl1
    void speed() -> TTl1TITI1l1Il1lI
    void detail() -> IITTlT11lII1T1ll
    void fixedSize(boolean) -> ITI1llTTI1lITl
    void setDisplayWidth(int) -> IlITlTTTl11Il1I
    void setDisplayHeight(int) -> IT11TT1lIll1ITIl
    void setOffsetY(int) -> TIITI1lTlTl1Il11
    void setOffsetX(int) -> TTl1TITI1l1Il1lI
    int getDisplayWidth() -> l1IllT11TIIT1ITl
    int getDisplayHeight() -> l1lT1IlI1IlT1TIT
    void paint(java.awt.Graphics) -> paint
isf.ptm.controls.PTMCanvasBufferedImage -> l11lIAAI.l11lIAAI.l11lIAAI.Il1TI1lIT1lT:
    java.awt.image.BufferedImage image -> image
    float ratio -> I1TTT1IIlTIll1l
    int maxWidth -> maxWidth
    int maxHeight -> maxHeight
    int cachedWidth -> lllITTIlTTII1111
    int cachedHeight -> ITllTI1lTII11l1T
    int posX -> IITll1lI11TlTTI
    int posY -> lITT1Il1TIl1lTI
    java.awt.image.BufferedImage getImage() -> getImage
    void _initImage(int,int) -> TT1lIT1ll1ITIIl1
    void paintComponent(java.awt.Graphics) -> paintComponent
    void _initPC(java.awt.Graphics) -> ITI1llTTI1lITl
    void speed() -> TTl1TITI1l1Il1lI
    void detail() -> IITTlT11lII1T1ll
    void dumpAvgValues() -> IlIT1lT1TI1IlT1l
    void resize() -> resize
    void _reSize() -> II11llTI1TlTITl1
    void setDesiredViewSize(java.awt.Dimension,java.awt.Dimension,int,int) -> TT1lIT1ll1ITIIl1
    java.awt.Dimension getCurrentSize() -> T1TlITlIl11I1TIl
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
isf.ptm.controls.PTMWindow -> l11lIAAI.l11lIAAI.l11lIAAI.l11lIlTTI1TI:
    void fireTransform() -> Il1II1TlT1llTI1T
    float getKSpec() -> lITTlIlT1IlI1T
    float getKDiff() -> ITl1I11TIlTlTlI1
    int getExp() -> T11I1Tll1IllIITT
    int getPTMWidth() -> lT1lITllTTII111I
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getPTMHeight() -> IlTT11IT1ITI1lll
    void setKSpec(float) -> TT1lIT1ll1ITIIl1
    void setKDiff(float) -> ITI1llTTI1lITl
    void setExp(int) -> IITTlT11lII1T1ll
    float getLuminance(int) -> l1IllT11TIIT1ITl
    void setLuminance(float,int) -> TT1lIT1ll1ITIIl1
    void setMapSampleSize(int) -> l1lT1IlI1IlT1TIT
    void setMapBlurType(int) -> IlIT1lT1TI1IlT1l
    void setMapKernelSize(int) -> II11llTI1TlTITl1
    void setMapGuassianBlurSigma(float) -> l1IlTT1lITIl1IT1
    void refreshMap() -> TIl1T1IlT1IIl1lT
    isf.ptm.formats.PTM getPTM() -> I1TTT1IIlTIll1l
    void forceUpdate() -> lllITTIlTTII1111
    void setBrowser(java.awt.Container) -> TT1lIT1ll1ITIIl1
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> TT1lIT1ll1ITIIl1
    void setPixelTransformOp(isf.ptm.operations.Operation) -> TT1lIT1ll1ITIIl1
    javax.swing.JLayeredPane getLayeredPane() -> getLayeredPane
    void setExtrapolation(boolean) -> l1IlTT1lITIl1IT1
    boolean isExtrapolation() -> ITllTI1lTII11l1T
    boolean isFrameActive() -> IITll1lI11TlTTI
    void setFrameActive(boolean) -> lI1I1T1ITTl1llIT
isf.ptm.fileio.HSHReader -> l11lIAAI.l11lIAAI.I11lIlAA.l1IlIlTI1T1T:
    isf.ptm.formats.HSH ptm -> I1TT1IIll1ll1TTI
    java.lang.String version -> version
    java.io.InputStream __in -> Tll11l1T1TITIlII
    boolean DEBUG -> DEBUG
    boolean reset -> reset
    int type -> type
    int[] details -> I1lITT1lTT11lIIl
    boolean fromRTI -> TTITl1lIllI1TI11
    void reset(boolean) -> reset
    void setVersion(java.lang.String) -> setVersion
    void setDebug(boolean) -> setDebug
    isf.ptm.formats.PTM _read() -> lITT1Il1TIl1lTI
    isf.ptm.formats.PTM readPTM() -> I1TT1IIll1ll1TTI
isf.ptm.fileio.HSHWriter -> l11lIAAI.l11lIAAI.I11lIlAA.lI1lTIIlT1T1:
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> TT1lIT1ll1ITIIl1
isf.ptm.fileio.JPEGLRGBReader -> l11lIAAI.l11lIAAI.I11lIlAA.Tl1l11IlIITT:
    java.io.InputStream __in -> Tll11l1T1TITIlII
    int type -> type
    int basis -> ITlT1IITl11l1lTI
    boolean reset -> reset
    java.lang.String version -> version
    org.apache.log4j.Logger log -> log
    isf.ptm.formats.PTM _initRead() -> Tll11l1T1TITIlII
    void reset(boolean) -> reset
    void setVersion(java.lang.String) -> setVersion
    isf.ptm.formats.PTM readPTM() -> I1TT1IIll1ll1TTI
    java.awt.image.BufferedImage invert(java.awt.image.BufferedImage) -> TT1lIT1ll1ITIIl1
    int[] invert(int[]) -> TT1lIT1ll1ITIIl1
    int[] convert(byte[]) -> TT1lIT1ll1ITIIl1
    int[] combine(int[],byte[]) -> TT1lIT1ll1ITIIl1
    int indexOf(int,int[]) -> TT1lIT1ll1ITIIl1
    void correctCoeff(int[],java.io.ByteArrayInputStream,int,int) -> TT1lIT1ll1ITIIl1
    int[] flip(int[],int,int) -> TT1lIT1ll1ITIIl1
isf.ptm.fileio.LRGBReader -> l11lIAAI.l11lIAAI.I11lIlAA.Il1TI1lIT1lT:
    isf.ptm.formats.BLRGBPTM ptm -> l1TlT1T1IlIII1Tl
    java.lang.String version -> version
    java.io.InputStream __in -> Tll11l1T1TITIlII
    boolean DEBUG -> DEBUG
    boolean reset -> reset
    boolean fromRTI -> TTITl1lIllI1TI11
    int type -> type
    int basis -> ITlT1IITl11l1lTI
    void reset(boolean) -> reset
    void setVersion(java.lang.String) -> setVersion
    void setDebug(boolean) -> setDebug
    isf.ptm.formats.PTM _initRead() -> Tll11l1T1TITIlII
    isf.ptm.formats.PTM readPTM() -> I1TT1IIll1ll1TTI
isf.ptm.fileio.LRGBWriter -> l11lIAAI.l11lIAAI.I11lIlAA.l11lIlTTI1TI:
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> TT1lIT1ll1ITIIl1
    void _initWrite(isf.ptm.formats.PTM,java.io.OutputStream) -> ITI1llTTI1lITl
isf.ptm.fileio.PTMIO -> l11lIAAI.l11lIAAI.I11lIlAA.T11ITIIllTl:
    int BUFSIZ -> TTT11I1lI1llTIIl
    org.apache.log4j.Logger log -> log
    float cFinal(int,int,float) -> TT1lIT1ll1ITIIl1
    int cFinalInt(int,int,float) -> ITI1llTTI1lITl
    isf.ptm.fileio.PTMReader getPTMParser(java.io.InputStream,boolean) -> TT1lIT1ll1ITIIl1
    isf.ptm.fileio.PTMReader _getParser(java.io.InputStream,boolean) -> ITI1llTTI1lITl
    isf.ptm.formats.MVRTI getMView(java.io.InputStream) -> TT1lIT1ll1ITIIl1
    isf.ptm.formats.MVRTI _initMulti(java.io.InputStream) -> ITI1llTTI1lITl
    isf.ptm.fileio.PTMReader _initParser(java.io.InputStream) -> l1IlTT1lITIl1IT1
    java.lang.String getLine(java.io.InputStream) -> lI1I1T1ITTl1llIT
    int[] getLineAsInts(java.io.InputStream) -> IlITlTTTl11Il1I
    int[] getLineAsInts(java.lang.String) -> TT1lIT1ll1ITIIl1
isf.ptm.fileio.PTMReader -> l11lIAAI.l11lIAAI.I11lIlAA.lIlIITlTT111:
    isf.ptm.formats.PTM readPTM() -> I1TT1IIll1ll1TTI
    void reset(boolean) -> reset
isf.ptm.fileio.PTMWriter -> l11lIAAI.l11lIAAI.I11lIlAA.Il1TlIT1lTI1:
    isf.ptm.fileio.PTMWriter _initWriter(isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> TT1lIT1ll1ITIIl1
    byte[] getLine(int) -> T1TlITlIl11I1TIl
    byte[] getLine(float[]) -> TT1lIT1ll1ITIIl1
    byte[] getLine(int[]) -> ITI1llTTI1lITl
    byte[] getLine(java.lang.String) -> ITI1llTTI1lITl
    isf.ptm.fileio.PTMWriter getPTMWriter(isf.ptm.formats.PTM) -> ITI1llTTI1lITl
isf.ptm.fileio.RGBReader -> l11lIAAI.l11lIAAI.I11lIlAA.l1lIl1TTTI1I:
    isf.ptm.formats.RGBPTM ptm -> ITlT1lll1IITI1T1
    java.lang.String version -> version
    java.io.InputStream __in -> Tll11l1T1TITIlII
    boolean DEBUG -> DEBUG
    boolean reset -> reset
    int type -> type
    int basis -> ITlT1IITl11l1lTI
    boolean fromRTI -> TTITl1lIllI1TI11
    void reset(boolean) -> reset
    void setVersion(java.lang.String) -> setVersion
    void setDebug(boolean) -> setDebug
    isf.ptm.formats.PTM _initReader() -> I1lITT1lTT11lIIl
    isf.ptm.formats.PTM readPTM() -> I1TT1IIll1ll1TTI
isf.ptm.fileio.RGBWriter -> l11lIAAI.l11lIAAI.I11lIlAA.TTl11llIITI:
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> TT1lIT1ll1ITIIl1
    void _initWriter(isf.ptm.formats.PTM,java.io.OutputStream) -> l1IlTT1lITIl1IT1
isf.ptm.formats.BLRGBPTM -> l11lIAAI.l11lIAAI.l1IA1lAI.l1IlIlTI1T1T:
    isf.ptm.graphics.EnvironmentMap em -> Il11lTlITT1IlIT
    java.util.ArrayList normals -> TIl1TTIIT11I1lll
    byte[][] coefficients -> llITlIlTI11T11IT
    int[] environmentMapCache -> IT11TTIllIIl1T1l
    int[] environmentMapMap -> TIlTl1I1Il11TIlT
    int width -> width
    int height -> height
    java.lang.String name -> name
    int type -> type
    int basis -> ITlT1IITl11l1lTI
    isf.ptm.utils.LightSource[] lights -> llT1lIITlIT11IT1
    boolean extrapolate -> T11TlTlTIlIlI1I
    float extrapolate_scale -> lIIT1TI11Tl1lITl
    int colors -> ITTTT11lIIIlll11
    boolean useEnv -> TTIlIIlTI1l11lT
    float DGAIN -> lITTT1lIlI1lTI
    float KSPEC -> T1TllIll1T1II1IT
    float KDIFF -> ITlTTIlII11T1ll1
    int EXP -> EXP
    float LUM -> TITlT1lIlTI1l1I
    int Z -> IT1lTll1IT1lII1T
    java.lang.String version -> version
    float[] scale -> TlTI11TIT1lIIll
    float[] bias -> IllTT1IITl11lT1I
    void release() -> release
    void _drawSP1(int,int,int,int,byte[][]) -> TT1lIT1ll1ITIIl1
    void _drawSP2(isf.ptm.formats.PTM,int,int) -> TT1lIT1ll1ITIIl1
    byte[][] _getRC(int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    void _initBC(int,int,int,int,int,byte[]) -> TT1lIT1ll1ITIIl1
    void _initCoeff(byte[][]) -> TT1lIT1ll1ITIIl1
    void _reSize(int,int) -> ITI1llTTI1lITl
    void createEnvironmentMapCache() -> TTITl1lIllI1TI11
    void createEnvironmentMapMap() -> ITlT1IITl11l1lTI
    void drawSubPtm(int,int,int,int,byte[][]) -> ITI1llTTI1lITl
    void drawSubPtm(int,int,isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    int[] getEnvironmentMapCache() -> l1TlT1T1IlIII1Tl
    int[] getEnvironmentMapMap() -> TTT11I1lI1llTIIl
    void recache() -> ITlT1lll1IITI1T1
    byte[][] getBCoefficients() -> Il11lTlITT1IlIT
    void setCoefficients(byte[][]) -> ITI1llTTI1lITl
    void setWidth(int) -> setWidth
    void setHeight(int) -> setHeight
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int x(int) -> Il1II1TlT1llTI1T
    int y(int) -> lITTlIlT1IlI1T
    void computeNormals() -> TIl1TTIIT11I1lll
    isf.ptm.graphics.VRGB normal(int) -> ITl1I11TIlTlTlI1
    isf.ptm.graphics.VRGB normal(int,int) -> l1IlTT1lITIl1IT1
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> TT1lIT1ll1ITIIl1
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> IlITlTTTl11Il1I
    int getFileType() -> llITlIlTI11T11IT
    java.util.ArrayList getNormals() -> IT11TTIllIIl1T1l
    void setKSpec(float) -> TT1lIT1ll1ITIIl1
    void setKDiff(float) -> ITI1llTTI1lITl
    void setExp(int) -> IITTlT11lII1T1ll
    int getExp() -> T11I1Tll1IllIITT
    float getKDiff() -> ITl1I11TIlTlTlI1
    float getKSpec() -> lITTlIlT1IlI1T
    float getDGain() -> TIlTl1I1Il11TIlT
    void setDGain(float) -> lI1I1T1ITTl1llIT
    boolean useEnv() -> llT1lIITlIT11IT1
    void useEnv(boolean) -> IlITlTTTl11Il1I
    int getZ() -> getZ
    void setZ(int) -> setZ
    void resize(int,int) -> resize
    void setVersion(java.lang.String) -> setVersion
    void setBias(float[]) -> setBias
    java.lang.String getVersion() -> getVersion
    void setScale(float) -> setScale
    void setScaleArray(float[]) -> ITI1llTTI1lITl
    float[] getBias() -> getBias
    float getScale() -> getScale
    float[] getScaleArray() -> T11TlTlTIlIlI1I
    boolean isExtrapolation() -> ITllTI1lTII11l1T
    void setExtrapolation(boolean) -> l1IlTT1lITIl1IT1
    byte[][] getResizedCoeff(int,int) -> lI1I1T1ITTl1llIT
    byte[][] getResizedCoeff(int,int,int,int,int,int) -> ITI1llTTI1lITl
    int[][] getCoefficients() -> lIIT1TI11Tl1lITl
    int red(int) -> T11I1Tll1IllIITT
    int green(int) -> lT1lITllTTII111I
    int blue(int) -> IlTT11IT1ITI1lll
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setBCoeffs(int,int,int,int,int,byte[]) -> ITI1llTTI1lITl
    int getColors() -> getColors
    void setColors(int) -> setColors
    int getBasisType() -> ITTTT11lIIIlll11
    void setBasisType(int) -> TIl1T1IlT1IIl1lT
    void setFileType(int) -> I1TTT1IIlTIll1l
isf.ptm.formats.HSH -> l11lIAAI.l11lIAAI.l1IA1lAI.lI1lTIIlT1T1:
    int colors -> ITTTT11lIIIlll11
    boolean extrapolate -> T11TlTlTIlIlI1I
    int EXP -> EXP
    float KDIFF -> ITlTTIlII11T1ll1
    float KSPEC -> T1TllIll1T1II1IT
    float LUM -> TITlT1lIlTI1l1I
    float m_dGain -> I111IITI1TlllTTl
    int Z -> IT1lTll1IT1lII1T
    float extrapolate_scale -> lIIT1TI11Tl1lITl
    int type -> type
    int width -> width
    int height -> height
    int basisType -> llTTI111lI1IITlT
    int basisTerms -> I1TTlI1IT1l1lIlT
    int elementSize -> TlIlTTlIIIlT111
    java.lang.String name -> name
    java.lang.String version -> version
    float[] bias -> IllTT1IITl11lT1I
    float[] scale -> TlTI11TIT1lIIll
    java.util.ArrayList normals -> TIl1TTIIT11I1lll
    byte[][] coefficients -> llITlIlTI11T11IT
    java.lang.String[][] functions -> T11IITlllTT1IlI1
    int getWidth() -> getWidth
    void setWidth(int) -> setWidth
    int getHeight() -> getHeight
    void setHeight(int) -> setHeight
    int getBasisTerms() -> TTIlIIlTI1l11lT
    void setBasisTerms(int) -> lllITTIlTTII1111
    int getBasisType() -> ITTTT11lIIIlll11
    void setBasisType(int) -> TIl1T1IlT1IIl1lT
    int getElementSize() -> lITTT1lIlI1lTI
    void setElementSize(int) -> ITllTI1lTII11l1T
    void setFileType(int) -> I1TTT1IIlTIll1l
    int getFileType() -> llITlIlTI11T11IT
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setVersion(java.lang.String) -> setVersion
    java.lang.String getVersion() -> getVersion
    byte[][] getBCoefficients() -> Il11lTlITT1IlIT
    void setBCoefficients(byte[][]) -> l1IlTT1lITIl1IT1
    void _initBC(byte[][]) -> lI1I1T1ITTl1llIT
    java.lang.String[][] getFunctions() -> T1TllIll1T1II1IT
    void setFunctions(java.lang.String[][]) -> TT1lIT1ll1ITIIl1
    java.lang.String[] getLineFunctions(int) -> IITll1lI11TlTTI
    float[] getScaleArray() -> T11TlTlTIlIlI1I
    void setScaleArray(float[]) -> ITI1llTTI1lITl
    void computeNormals() -> TIl1TTIIT11I1lll
    void _initNormals() -> ITlTTIlII11T1ll1
    isf.ptm.graphics.VRGB normal(int) -> ITl1I11TIlTlTlI1
    java.util.ArrayList getNormals() -> IT11TTIllIIl1T1l
    isf.ptm.graphics.VRGB normal(int,int) -> l1IlTT1lITIl1IT1
    void resize(int,int) -> resize
    void setKDiff(float) -> ITI1llTTI1lITl
    void setKSpec(float) -> TT1lIT1ll1ITIIl1
    void setExp(int) -> IITTlT11lII1T1ll
    void setScale(float) -> setScale
    void setBias(float[]) -> setBias
    float getScale() -> getScale
    float[] getBias() -> getBias
    float getKSpec() -> lITTlIlT1IlI1T
    float getKDiff() -> ITl1I11TIlTlTlI1
    float getDGain() -> TIlTl1I1Il11TIlT
    void setDGain(float) -> lI1I1T1ITTl1llIT
    int getExp() -> T11I1Tll1IllIITT
    int getZ() -> getZ
    void setZ(int) -> setZ
    void recache() -> ITlT1lll1IITI1T1
    void release() -> release
    int[][] getCoefficients() -> lIIT1TI11Tl1lITl
    void setBCoeffs(int,int,int,int,int,byte[]) -> ITI1llTTI1lITl
    void _setBC(int,int,int,int,int,byte[]) -> l1IlTT1lITIl1IT1
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> TT1lIT1ll1ITIIl1
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> IlITlTTTl11Il1I
    int[] getEnvironmentMapCache() -> l1TlT1T1IlIII1Tl
    int[] getEnvironmentMapMap() -> TTT11I1lI1llTIIl
    boolean useEnv() -> llT1lIITlIT11IT1
    void useEnv(boolean) -> IlITlTTTl11Il1I
    boolean isExtrapolation() -> ITllTI1lTII11l1T
    void setExtrapolation(boolean) -> l1IlTT1lITIl1IT1
    int getColors() -> getColors
    void setColors(int) -> setColors
isf.ptm.formats.LRGBPTM -> l11lIAAI.l11lIAAI.l1IA1lAI.Tl1l11IlIITT:
    isf.ptm.graphics.EnvironmentMap em -> Il11lTlITT1IlIT
    java.util.ArrayList normals -> TIl1TTIIT11I1lll
    int[][] coefficients -> l11TTIl11lITIlIT
    int[] environmentMapCache -> IT11TTIllIIl1T1l
    int[] environmentMapMap -> TIlTl1I1Il11TIlT
    int width -> width
    int height -> height
    int type -> type
    int basis -> ITlT1IITl11l1lTI
    boolean extrapolate -> T11TlTlTIlIlI1I
    float extrapolate_scale -> lIIT1TI11Tl1lITl
    int colors -> ITTTT11lIIIlll11
    boolean useEnv -> TTIlIIlTI1l11lT
    float DGAIN -> lITTT1lIlI1lTI
    float KSPEC -> T1TllIll1T1II1IT
    float KDIFF -> ITlTTIlII11T1ll1
    int EXP -> EXP
    int Z -> IT1lTll1IT1lII1T
    java.lang.String version -> version
    float[] scale -> TlTI11TIT1lIIll
    float[] bias -> IllTT1IITl11lT1I
    java.lang.String name -> name
    void release() -> release
    void _drawSP1(isf.ptm.formats.PTM,int,int) -> ITI1llTTI1lITl
    void _drawSP2(isf.ptm.formats.PTM,int,int,int,int) -> TT1lIT1ll1ITIIl1
    int[] _gA0(int,int,int,int) -> TT1lIT1ll1ITIIl1
    int[] _gA1(int,int,int,int) -> ITI1llTTI1lITl
    int[] _gA2(int,int,int,int) -> l1IlTT1lITIl1IT1
    int[] _gA3(int,int,int,int) -> lI1I1T1ITTl1llIT
    int[] _gA4(int,int,int,int) -> IlITlTTTl11Il1I
    int[] _gA5(int,int,int,int) -> IT11TT1lIll1ITIl
    int[] _gRGB(int,int,int,int) -> TIITI1lTlTl1Il11
    int[][] _getRC(int,int,int,int,int,int) -> l1IlTT1lITIl1IT1
    void _initA0(int[]) -> l1IlTT1lITIl1IT1
    void _initA1(int[]) -> lI1I1T1ITTl1llIT
    void _initA2(int[]) -> IlITlTTTl11Il1I
    void _initA3(int[]) -> IT11TT1lIll1ITIl
    void _initA4(int[]) -> TIITI1lTlTl1Il11
    void _initA5(int[]) -> TTl1TITI1l1Il1lI
    void _initRGB(int[]) -> IITTlT11lII1T1ll
    void _intCoeffs(int[][]) -> TT1lIT1ll1ITIIl1
    void _reSize(int,int) -> ITI1llTTI1lITl
    void createEnvironmentMapCache() -> TTITl1lIllI1TI11
    void createEnvironmentMapMap() -> ITlT1IITl11l1lTI
    void drawSubPtm(int,int,isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    void drawSubPtm(int,int,int,int,isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    int[] getEnvironmentMapCache() -> l1TlT1T1IlIII1Tl
    int[] getEnvironmentMapMap() -> TTT11I1lI1llTIIl
    void recache() -> ITlT1lll1IITI1T1
    int[][] getCoefficients() -> lIIT1TI11Tl1lITl
    void setCoefficients(int[][]) -> ITI1llTTI1lITl
    void setA0(int[]) -> l1IllT11TIIT1ITl
    void setA1(int[]) -> l1lT1IlI1IlT1TIT
    void setA2(int[]) -> IlIT1lT1TI1IlT1l
    void setA3(int[]) -> II11llTI1TlTITl1
    void setA4(int[]) -> T1TlITlIl11I1TIl
    void setA5(int[]) -> Il1II1TlT1llTI1T
    void setRGB(int[]) -> lITTlIlT1IlI1T
    int[] getA0() -> TITlT1lIlTI1l1I
    int[] getA0(int,int,int,int) -> TTl1TITI1l1Il1lI
    int[] getA1() -> IT1lTll1IT1lII1T
    int[] getA1(int,int,int,int) -> IITTlT11lII1T1ll
    int[] getA2() -> TlTI11TIT1lIIll
    int[] getA2(int,int,int,int) -> l1IllT11TIIT1ITl
    int[] getA3() -> IllTT1IITl11lT1I
    int[] getA3(int,int,int,int) -> l1lT1IlI1IlT1TIT
    int[] getA4() -> I111IITI1TlllTTl
    int[] getA4(int,int,int,int) -> IlIT1lT1TI1IlT1l
    int[] getA5() -> llTTI111lI1IITlT
    int[] getA5(int,int,int,int) -> II11llTI1TlTITl1
    int[] getRGB() -> I1TTlI1IT1l1lIlT
    int[] getRGB(int,int,int,int) -> T1TlITlIl11I1TIl
    void setWidth(int) -> setWidth
    void setHeight(int) -> setHeight
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int red(int) -> T11I1Tll1IllIITT
    int green(int) -> lT1lITllTTII111I
    int blue(int) -> IlTT11IT1ITI1lll
    int x(int) -> Il1II1TlT1llTI1T
    int y(int) -> lITTlIlT1IlI1T
    void computeNormals() -> TIl1TTIIT11I1lll
    isf.ptm.graphics.VRGB normal(int) -> ITl1I11TIlTlTlI1
    isf.ptm.graphics.VRGB normal(int,int) -> l1IlTT1lITIl1IT1
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> TT1lIT1ll1ITIIl1
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> IlITlTTTl11Il1I
    int getFileType() -> llITlIlTI11T11IT
    java.util.ArrayList getNormals() -> IT11TTIllIIl1T1l
    void setKSpec(float) -> TT1lIT1ll1ITIIl1
    void setKDiff(float) -> ITI1llTTI1lITl
    void setExp(int) -> IITTlT11lII1T1ll
    int getExp() -> T11I1Tll1IllIITT
    float getKDiff() -> ITl1I11TIlTlTlI1
    float getKSpec() -> lITTlIlT1IlI1T
    float getDGain() -> TIlTl1I1Il11TIlT
    void setDGain(float) -> lI1I1T1ITTl1llIT
    boolean useEnv() -> llT1lIITlIT11IT1
    void useEnv(boolean) -> IlITlTTTl11Il1I
    int getZ() -> getZ
    void setZ(int) -> setZ
    void resize(int,int) -> resize
    void setVersion(java.lang.String) -> setVersion
    void setBias(float[]) -> setBias
    java.lang.String getVersion() -> getVersion
    void setScale(float) -> setScale
    void setScaleArray(float[]) -> ITI1llTTI1lITl
    float[] getBias() -> getBias
    float getScale() -> getScale
    float[] getScaleArray() -> T11TlTlTIlIlI1I
    boolean isExtrapolation() -> ITllTI1lTII11l1T
    void setExtrapolation(boolean) -> l1IlTT1lITIl1IT1
    int[][] getResizedCoeff(int,int) -> IlITlTTTl11Il1I
    int[][] getResizedCoeff(int,int,int,int,int,int) -> lI1I1T1ITTl1llIT
    byte[][] getBCoefficients() -> Il11lTlITT1IlIT
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setBCoeffs(int,int,int,int,int,byte[]) -> ITI1llTTI1lITl
    int getColors() -> getColors
    void setColors(int) -> setColors
    int getBasisType() -> ITTTT11lIIIlll11
    void setBasisType(int) -> TIl1T1IlT1IIl1lT
    void setFileType(int) -> I1TTT1IIlTIll1l
isf.ptm.formats.MVRTI -> l11lIAAI.l11lIAAI.l1IA1lAI.Il1TI1lIT1lT:
    org.apache.log4j.Logger log -> log
    java.util.Hashtable files -> Il1I1llTTlI1TIT
    int orientation -> orientation
    int maxX -> maxX
    int maxY -> IIllII1TlTTT11l1
    int views -> l1lTlT11ITlI1IIT
    int useFlow -> ll1TIIIT1lT1TIl1
    isf.ptm.formats.HSH ptm -> I1TT1IIll1ll1TTI
    java.lang.String dir -> dir
    int currentView -> TIT1ITlI1lIl1lT1
    java.util.Hashtable getFiles() -> TlIlTTlIIIlT111
    void setFiles(java.util.Hashtable) -> TT1lIT1ll1ITIIl1
    int getOrientation() -> getOrientation
    void setOrientation(int) -> setOrientation
    int getMaxX() -> T11IITlllTT1IlI1
    void setMaxX(int) -> lITT1Il1TIl1lTI
    int getMaxY() -> l11TTIl11lITIlIT
    void setMaxY(int) -> I1TT1IIll1ll1TTI
    int getViews() -> Il1I1llTTlI1TIT
    void setViews(int) -> Tll11l1T1TITIlII
    int getUseFlow() -> IIllII1TlTTT11l1
    void setUseFlow(int) -> I1lITT1lTT11lIIl
    void setDirectory(java.lang.String) -> setDirectory
    java.lang.String getFileName(int) -> TTITl1lIllI1TI11
    isf.ptm.formats.PTM getPTM(int) -> ITlT1IITl11l1lTI
    isf.ptm.formats.PTM _getPTM(int) -> l1TlT1T1IlIII1Tl
    int getCurrentView() -> l1lTlT11ITlI1IIT
isf.ptm.formats.Normals -> l11lIAAI.l11lIAAI.l1IA1lAI.l11lIlTTI1TI:
    float zerotol -> TlII1ITllTlIT
    float eps -> TIIlT111IITTll1l
    java.util.ArrayList _gN2(int[][],boolean,int[],float[]) -> TT1lIT1ll1ITIIl1
    java.util.ArrayList _getN1(byte[][],boolean,float[],float[]) -> TT1lIT1ll1ITIIl1
    isf.ptm.graphics.VRGB _getUN(float[]) -> l1IlTT1lITIl1IT1
    double evalPoly(float[],double) -> TT1lIT1ll1ITIIl1
    int computeMaximumOnCircle(float[],float[]) -> TT1lIT1ll1ITIIl1
    java.util.ArrayList getNormals(isf.ptm.formats.LRGBPTM) -> TT1lIT1ll1ITIIl1
    java.util.ArrayList getNormals(int[][],boolean,int[],float[]) -> ITI1llTTI1lITl
    java.util.ArrayList getNormals(byte[][],boolean,float[],float[]) -> ITI1llTTI1lITl
    isf.ptm.graphics.VRGB getUnitNormals(float[]) -> lI1I1T1ITTl1llIT
isf.ptm.formats.PTM -> l11lIAAI.l11lIAAI.l1IA1lAI.T11ITIIllTl:
    int TYPE_RTI_PTM -> III1Tl1lTllTIT11
    int TYPE_RTI_SH -> lIT1T1lIlT1ITIl
    int TYPE_RTI_HSH -> ITlIIl1TT1Tl1lI
    int TYPE_RTI_APTM -> Il1TTlI1lIIlT1T
    int TYPE_RAW_PTM -> I11lT1lTlIIl1TIT
    int BASIS_LRGB -> IITlTllI1TTI11l
    int BASIS_RGB -> TIlll1TI1lITT1I
    int BASIS_PRIMITIVE -> l1Il1TTIITIl1Tl
    java.lang.String PTM_RGB -> I1ll11TlTIITlT1I
    java.lang.String PTM_LRGB -> IlI1Il1T1TlTITl1
    java.lang.String PTM_JPEG_LRGB -> TI1T1llllTII1IT1
    int MAX_LIGHTS -> Il1Tl1IT1T1IlTIl
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setKSpec(float) -> TT1lIT1ll1ITIIl1
    void setKDiff(float) -> ITI1llTTI1lITl
    void setExp(int) -> IITTlT11lII1T1ll
    void setVersion(java.lang.String) -> setVersion
    void setScaleArray(float[]) -> ITI1llTTI1lITl
    void setScale(float) -> setScale
    void setBias(float[]) -> setBias
    java.lang.String getVersion() -> getVersion
    float getScale() -> getScale
    float[] getBias() -> getBias
    float getKSpec() -> lITTlIlT1IlI1T
    float getKDiff() -> ITl1I11TIlTlTlI1
    float getDGain() -> TIlTl1I1Il11TIlT
    void setDGain(float) -> lI1I1T1ITTl1llIT
    int getExp() -> T11I1Tll1IllIITT
    int getZ() -> getZ
    void setZ(int) -> setZ
    void recache() -> ITlT1lll1IITI1T1
    void release() -> release
    int getFileType() -> llITlIlTI11T11IT
    int getBasisType() -> ITTTT11lIIIlll11
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void setWidth(int) -> setWidth
    void setHeight(int) -> setHeight
    int[][] getCoefficients() -> lIIT1TI11Tl1lITl
    byte[][] getBCoefficients() -> Il11lTlITT1IlIT
    void setBCoeffs(int,int,int,int,int,byte[]) -> ITI1llTTI1lITl
    int getColors() -> getColors
    void setColors(int) -> setColors
    void computeNormals() -> TIl1TTIIT11I1lll
    isf.ptm.graphics.VRGB normal(int) -> ITl1I11TIlTlTlI1
    java.util.ArrayList getNormals() -> IT11TTIllIIl1T1l
    isf.ptm.graphics.VRGB normal(int,int) -> l1IlTT1lITIl1IT1
    void resize(int,int) -> resize
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> TT1lIT1ll1ITIIl1
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> IlITlTTTl11Il1I
    int[] getEnvironmentMapCache() -> l1TlT1T1IlIII1Tl
    int[] getEnvironmentMapMap() -> TTT11I1lI1llTIIl
    boolean useEnv() -> llT1lIITlIT11IT1
    void useEnv(boolean) -> IlITlTTTl11Il1I
    float[] getScaleArray() -> T11TlTlTIlIlI1I
    boolean isExtrapolation() -> ITllTI1lTII11l1T
    void setExtrapolation(boolean) -> l1IlTT1lITIl1IT1
    void setBasisType(int) -> TIl1T1IlT1IIl1lT
    void setFileType(int) -> I1TTT1IIlTIll1l
isf.ptm.formats.RGBPTM -> l11lIAAI.l11lIAAI.l1IA1lAI.lIlIITlTT111:
    int type -> type
    int basis -> ITlT1IITl11l1lTI
    byte[][] bcoeff -> llTIT11ITl1I1TlI
    int size -> size
    boolean extrapolate -> T11TlTlTIlIlI1I
    int width -> width
    int height -> height
    int EXP -> EXP
    float KDIFF -> ITlTTIlII11T1ll1
    float KSPEC -> T1TllIll1T1II1IT
    float LUM -> TITlT1lIlTI1l1I
    float m_dGain -> I111IITI1TlllTTl
    int Z -> IT1lTll1IT1lII1T
    java.util.ArrayList normals -> TIl1TTIIT11I1lll
    java.lang.String name -> name
    int colors -> ITTTT11lIIIlll11
    java.lang.String version -> version
    float[] scale -> TlTI11TIT1lIIll
    float[] bias -> IllTT1IITl11lT1I
    float extrapolate_scale -> lIIT1TI11Tl1lITl
    void computeNormals() -> TIl1TTIIT11I1lll
    void setBCoefficients(byte[][]) -> l1IlTT1lITIl1IT1
    void _setCoeff(byte[][]) -> IlITlTTTl11Il1I
    float getDGain() -> TIlTl1I1Il11TIlT
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> IlITlTTTl11Il1I
    int[] getEnvironmentMapCache() -> l1TlT1T1IlIII1Tl
    int[] getEnvironmentMapMap() -> TTT11I1lI1llTIIl
    int getExp() -> T11I1Tll1IllIITT
    int getHeight() -> getHeight
    float getKDiff() -> ITl1I11TIlTlTlI1
    float getKSpec() -> lITTlIlT1IlI1T
    java.util.ArrayList getNormals() -> IT11TTIllIIl1T1l
    int getFileType() -> llITlIlTI11T11IT
    int getWidth() -> getWidth
    int getZ() -> getZ
    int red(int) -> T11I1Tll1IllIITT
    int green(int) -> lT1lITllTTII111I
    int blue(int) -> IlTT11IT1ITI1lll
    isf.ptm.graphics.VRGB normal(int) -> ITl1I11TIlTlTlI1
    isf.ptm.graphics.VRGB normal(int,int) -> l1IlTT1lITIl1IT1
    void resize(int,int) -> resize
    void _reSize(int,int) -> ITI1llTTI1lITl
    void recache() -> ITlT1lll1IITI1T1
    void release() -> release
    void setCoeff(byte[][]) -> IT11TT1lIll1ITIl
    void setDGain(float) -> lI1I1T1ITTl1llIT
    void setExp(int) -> IITTlT11lII1T1ll
    void setHeight(int) -> setHeight
    void setKDiff(float) -> ITI1llTTI1lITl
    void setKSpec(float) -> TT1lIT1ll1ITIIl1
    void setWidth(int) -> setWidth
    void drawSubPtm(int,int,int,int,byte[][]) -> ITI1llTTI1lITl
    void _drawSP1(int,int,int,int,byte[][]) -> TT1lIT1ll1ITIIl1
    void drawSubPtm(int,int,isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    void _drawSP2(isf.ptm.formats.PTM,int,int) -> TT1lIT1ll1ITIIl1
    void drawSubPtm(int,int,isf.ptm.formats.PTM,int) -> TT1lIT1ll1ITIIl1
    void _drawSP3(isf.ptm.formats.PTM,int,int) -> l1IlTT1lITIl1IT1
    void setZ(int) -> setZ
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> TT1lIT1ll1ITIIl1
    boolean useEnv() -> llT1lIITlIT11IT1
    void useEnv(boolean) -> IlITlTTTl11Il1I
    void setVersion(java.lang.String) -> setVersion
    void setScale(float) -> setScale
    void setScaleArray(float[]) -> ITI1llTTI1lITl
    void setBias(float[]) -> setBias
    java.lang.String getVersion() -> getVersion
    float[] getScaleArray() -> T11TlTlTIlIlI1I
    float getScale() -> getScale
    float[] getBias() -> getBias
    boolean isExtrapolation() -> ITllTI1lTII11l1T
    void setExtrapolation(boolean) -> l1IlTT1lITIl1IT1
    byte[][] getBCoefficients() -> Il11lTlITT1IlIT
    int[][] getCoefficients() -> lIIT1TI11Tl1lITl
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setBCoeffs(int,int,int,int,int,byte[]) -> ITI1llTTI1lITl
    void _setBC(int,int,int,int,int,byte[]) -> l1IlTT1lITIl1IT1
    int getColors() -> getColors
    void setColors(int) -> setColors
    byte[][] getResizedCoeffs(int,int) -> IT11TT1lIll1ITIl
    byte[][] _getRC(int,int) -> TIITI1lTlTl1Il11
    int getBasisType() -> ITTTT11lIIIlll11
    void setBasisType(int) -> TIl1T1IlT1IIl1lT
    void setFileType(int) -> I1TTT1IIlTIll1l
isf.ptm.graphics.EnvironmentMap -> l11lIAAI.l11lIAAI.llIA1AI.l1IlIlTI1T1T:
    java.awt.image.BufferedImage original -> llll1IITTT1IT1I1
    int[] __pixels -> I1TTlTl11llT1III
    int[] buf -> buf
    int[] lookedup -> IT11l1lTIlII1TTl
    int width -> width
    int height -> height
    isf.ptm.graphics.VRGB eye -> IT11l1lTTI1lTIlI
    int downSample -> ITIlTITl111TlIl
    int BLUR_TYPE_NONE -> TIl1TT1lTI1I1Ill
    int BLUR_TYPE_SIMPLE -> I1Tlll1TTTI1Il1I
    int BLUR_TYPE_GAUSSIAN -> lT1TlTIlIlT1I1I1
    int DEFAULT_KERNEL_SIZE -> l1ll1TTIIl1IITT
    int DEFAULT_DOWNSAMPLE -> IT11TT1TI1IllllI
    float DEFAULT_GAUSSIAN_SIGMA -> IT1TlTl1I1TIlIl
    int MAX_DOWNSAMPLE_SZ -> IT1IllT1II11llTT
    int kernelSize -> llI1T1IT1T1TIllI
    float gaussianSigma -> TTIlTI1lI1T1l1lI
    int blurType -> lI11l1lIlT1TTTII
    isf.ptm.graphics.EnvironmentMap$Monitor m -> IT1lTTI11llTIl1I
    double[] cos -> TTl1TITI1l1Il1lI
    double[] sin -> IITTlT11lII1T1ll
    int theta -> TTII1lllT1T1IlI
    int getDownSample() -> ll1TIIIT1lT1TIl1
    void release() -> release
    void setImage(java.awt.image.BufferedImage) -> ITI1llTTI1lITl
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getMaxDownsample() -> TIT1ITlI1lIl1lT1
    java.awt.image.BufferedImage getImage() -> getImage
    int getPixel(isf.ptm.graphics.VRGB) -> TT1lIT1ll1ITIIl1
    float sqr(float) -> IlITlTTTl11Il1I
    java.awt.Point getPosition(isf.ptm.graphics.VRGB) -> ITI1llTTI1lITl
    int getMapIndex(isf.ptm.graphics.VRGB) -> l1IlTT1lITIl1IT1
    void setSampleSize(int) -> TTT11I1lI1llTIIl
    void setBlurKernelSize(int) -> ITlT1lll1IITI1T1
    void setGaussianSigma(float) -> IT11TT1lIll1ITIl
    void setGaussianBlur() -> TlII1ITllTlIT
    void setSimpleBlur() -> TIIlT111IITTll1l
    void setNoBlur() -> III1Tl1lTllTIT11
    int[] rotatedMap() -> lIT1T1lIlT1ITIl
    void refresh() -> refresh
    void updateMonitor(isf.ptm.graphics.VRGB[]) -> TT1lIT1ll1ITIIl1
    void setAngle(int) -> setAngle
    int[] access$000(isf.ptm.graphics.EnvironmentMap) -> l1IlTT1lITIl1IT1
    int access$100(isf.ptm.graphics.EnvironmentMap) -> lI1I1T1ITTl1llIT
    int access$200(isf.ptm.graphics.EnvironmentMap) -> IlITlTTTl11Il1I
isf.ptm.graphics.EnvironmentMap$Monitor -> l11lIAAI.l11lIAAI.llIA1AI.lI1lTIIlT1T1:
    java.awt.Point[] hits -> IlTI11IlT1lTl1IT
    isf.ptm.graphics.EnvironmentMap this$0 -> TIll1l1ITIIlT11T
    void setHits(java.awt.Point[]) -> TT1lIT1ll1ITIIl1
    void paintComponent(java.awt.Graphics) -> paintComponent
isf.ptm.graphics.GaussianKernel -> l11lIAAI.l11lIAAI.llIA1AI.Tl1l11IlIITT:
    int radius -> llI1TTI1Il11lITT
    float sigma -> Tl1Tl11ITl1IlTII
    float[] kernel -> I1TlTIl1ITTl1lI
    float[] makeKernel() -> ITlIIl1TT1Tl1lI
    void dump() -> dump
    float[] getKernel() -> Il1TTlI1lIIlT1T
isf.ptm.graphics.GraphicsGems -> l11lIAAI.l11lIAAI.llIA1AI.Il1TI1lIT1lT:
    float EQN_EPS -> I1TTl1TlIlT1l1II
    boolean IsZero(double) -> TT1lIT1ll1ITIIl1
    float cbrt(double) -> ITI1llTTI1lITl
    int SolveQuadric(double[],double[]) -> TT1lIT1ll1ITIIl1
    int SolveQuadric(double[],double[],int) -> TT1lIT1ll1ITIIl1
    int SolveCubic(double[],double[]) -> ITI1llTTI1lITl
    int SolveQuartic(double[],double[]) -> l1IlTT1lITIl1IT1
isf.ptm.graphics.VRGB -> l11lIAAI.l11lIAAI.llIA1AI.l11lIlTTI1TI:
    float red -> l11TlIlTITI1IT1l
    float green -> T1TlI11TITIlIll1
    float blue -> lIlI1T1T1llT1ITI
    java.lang.String toString() -> toString
    boolean equals(isf.ptm.graphics.VRGB) -> lI1I1T1ITTl1llIT
    isf.ptm.graphics.VRGB convertPixel(int) -> Il11lTlITT1IlIT
    float[] toFloat() -> I11lT1lTlIIl1TIT
    float len() -> IITlTllI1TTI11l
    isf.ptm.graphics.VRGB normalize() -> TIlll1TI1lITT1I
    float dot(isf.ptm.graphics.VRGB) -> IlITlTTTl11Il1I
    float dot(float,float,float) -> TT1lIT1ll1ITIIl1
    float customMinMaxDot(float,float,float,float,float) -> TT1lIT1ll1ITIIl1
    float dot(float[]) -> IlITlTTTl11Il1I
    isf.ptm.graphics.VRGB cross(isf.ptm.graphics.VRGB) -> IT11TT1lIll1ITIl
    isf.ptm.graphics.VRGB scale(float) -> TIITI1lTlTl1Il11
    isf.ptm.graphics.VRGB sum(isf.ptm.graphics.VRGB) -> TIITI1lTlTl1Il11
    isf.ptm.graphics.VRGB sum(float[]) -> IT11TT1lIll1ITIl
    isf.ptm.graphics.VRGB diff(isf.ptm.graphics.VRGB) -> TTl1TITI1l1Il1lI
    isf.ptm.graphics.VRGB diff(float,float,float) -> ITI1llTTI1lITl
    isf.ptm.graphics.VRGB reflect(isf.ptm.graphics.VRGB,isf.ptm.graphics.VRGB) -> TT1lIT1ll1ITIIl1
    int toPixel() -> l1Il1TTIITIl1Tl
    void perturb() -> I1ll11TlTIITlT1I
isf.ptm.operations.ColorOperation -> l11lIAAI.l11lIAAI.lA1lIIA1.l1IlIlTI1T1T:
    void performOperation(int[],isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    void performOperation(int[],isf.ptm.formats.PTM,int,int) -> TT1lIT1ll1ITIIl1
    void release() -> release
    void forceUpdate() -> lllITTIlTTII1111
    void clearCache() -> clearCache
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    java.lang.String getName() -> getName
isf.ptm.operations.DiffuseGainOperation -> l11lIAAI.l11lIAAI.lA1lIIA1.lI1lTIIlT1T1:
    float DGAIN -> lITTT1lIlI1lTI
    int width -> width
    int height -> height
    int dW -> lTTTl11lI1IlII1T
    int basis -> ITlT1IITl11l1lTI
    int size -> size
    int type -> type
    isf.ptm.utils.LightSource[] sources -> TTlTIIllT11IlI1
    java.awt.Rectangle target -> IlT1TTI1I1TlIll1
    java.awt.Rectangle ptmRect -> TllIITlI1l1TI1T1
    float[] bias -> IllTT1IITl11lT1I
    float[] scale -> TlTI11TIT1lIIll
    java.util.ArrayList normals -> TIl1TTIIT11I1lll
    void release() -> release
    void forceUpdate() -> lllITTIlTTII1111
    void clearCache() -> clearCache
    void PTMXform(isf.ptm.formats.PTM,int[],int,int) -> TT1lIT1ll1ITIIl1
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    void _operate(isf.ptm.formats.PTM,isf.ptm.utils.LightSource[],int,int,int,int,int,int,int[],int,int) -> TT1lIT1ll1ITIIl1
    int[] processCoeff(byte[],int) -> TT1lIT1ll1ITIIl1
    java.lang.String getName() -> getName
isf.ptm.operations.DirectionalLightOperation -> l11lIAAI.l11lIAAI.lA1lIIA1.Tl1l11IlIITT:
    int width -> width
    int height -> height
    int dW -> lTTTl11lI1IlII1T
    int type -> type
    int basis -> ITlT1IITl11l1lTI
    isf.ptm.utils.LightSource[] sources -> TTlTIIllT11IlI1
    boolean extrapolate -> T11TlTlTIlIlI1I
    float factor -> T1l1I1IITlT1ITll
    float[] bias -> IllTT1IITl11lT1I
    float[] scale -> TlTI11TIT1lIIll
    int[] map -> map
    int[] rotatedEnv -> TTT1IIlITI1ll11l
    java.awt.Rectangle target -> IlT1TTI1I1TlIll1
    java.awt.Rectangle ptmRect -> TllIITlI1l1TI1T1
    void LRGBXformEnv(int[],byte[][],int,int,float[],float[]) -> TT1lIT1ll1ITIIl1
    void LRGBXform(int[],byte[][],int,int,float[],float[]) -> ITI1llTTI1lITl
    void release() -> release
    void forceUpdate() -> lllITTIlTTII1111
    void clearCache() -> clearCache
    void RGBXform(int[],byte[][],int,int,float[],float[]) -> l1IlTT1lITIl1IT1
    void HSHform(int[],byte[][],float[],float[],int) -> TT1lIT1ll1ITIIl1
    void performOperation(int[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    java.lang.String getName() -> getName
isf.ptm.operations.EnvironmentalOperation -> l11lIAAI.l11lIAAI.lA1lIIA1.Il1TI1lIT1lT:
    void performOperation(int[],isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    void _operate(int[],isf.ptm.formats.PTM) -> ITI1llTTI1lITl
    void performOperation(int[],isf.ptm.formats.PTM,int,int) -> TT1lIT1ll1ITIIl1
    void release() -> release
    void forceUpdate() -> lllITTIlTTII1111
    void clearCache() -> clearCache
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    java.lang.String getName() -> getName
isf.ptm.operations.NormalMapOperation -> l11lIAAI.l11lIAAI.lA1lIIA1.l11lIlTTI1TI:
    void release() -> release
    void forceUpdate() -> lllITTIlTTII1111
    void clearCache() -> clearCache
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    void _operate(isf.ptm.formats.PTM,int,int,int,int,int,int,int[]) -> TT1lIT1ll1ITIIl1
    java.lang.String getName() -> getName
isf.ptm.operations.Operation -> l11lIAAI.l11lIAAI.lA1lIIA1.T11ITIIllTl:
    double M_PI -> I1lI1lTIl1IlTT1T
    double[] _initHSH(double,double) -> TT1lIT1ll1ITIIl1
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    void forceUpdate() -> lllITTIlTTII1111
    void release() -> release
    void clearCache() -> clearCache
    double[] getHSH(double,double) -> ITI1llTTI1lITl
    java.lang.String getName() -> getName
isf.ptm.operations.ReflectionMapOperation -> l11lIAAI.l11lIAAI.lA1lIIA1.lIlIITlTT111:
    void performOperation(int[],isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    void _operate(int[],isf.ptm.formats.PTM) -> ITI1llTTI1lITl
    void performOperation(int[],isf.ptm.formats.PTM,int,int) -> TT1lIT1ll1ITIIl1
    void release() -> release
    void forceUpdate() -> lllITTIlTTII1111
    void clearCache() -> clearCache
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    java.lang.String getName() -> getName
isf.ptm.operations.SpecularOperation -> l11lIAAI.l11lIAAI.lA1lIIA1.Il1TlIT1lTI1:
    int width -> width
    int height -> height
    int dW -> lTTTl11lI1IlII1T
    int type -> type
    int basis -> ITlT1IITl11l1lTI
    isf.ptm.utils.LightSource[] sources -> TTlTIIllT11IlI1
    java.awt.Rectangle target -> IlT1TTI1I1TlIll1
    java.awt.Rectangle ptmRect -> TllIITlI1l1TI1T1
    boolean forceUpdate -> lI1T1Il1l1ITlTTI
    int cachedExp -> lI1lIT1lI1T1ITlT
    float[] phong -> Il1IIl1IT1TlTTl
    void forceUpdate() -> lllITTIlTTII1111
    void clearCache() -> clearCache
    void release() -> release
    void RGBXform(int[],isf.ptm.formats.PTM,int,int) -> ITI1llTTI1lITl
    void HSHform(int[],isf.ptm.formats.PTM,int,int) -> l1IlTT1lITIl1IT1
    void LRGBXform(int[],isf.ptm.formats.PTM,int,int) -> lI1I1T1ITTl1llIT
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    java.lang.String getName() -> getName
isf.ptm.operations.SpotLightOperation -> l11lIAAI.l11lIAAI.lA1lIIA1.l1lIl1TTTI1I:
    org.apache.log4j.Logger log -> log
    int width -> width
    int height -> height
    boolean isFlashLight -> TIlIT1l111IlTTIl
    int Z -> IT1lTll1IT1lII1T
    int dW -> lTTTl11lI1IlII1T
    int type -> type
    int basis -> ITlT1IITl11l1lTI
    isf.ptm.utils.LightSource[] sources -> TTlTIIllT11IlI1
    int[] map -> map
    int[] rotatedEnv -> TTT1IIlITI1ll11l
    java.awt.Rectangle target -> IlT1TTI1I1TlIll1
    java.awt.Rectangle ptmRect -> TllIITlI1l1TI1T1
    void setFlashlight(boolean) -> IT11TT1lIll1ITIl
    void LRGBXformEnv(int[],byte[][],int,int,float[],float[]) -> TT1lIT1ll1ITIIl1
    void LRGBXform(int[],byte[][],int,int,float[],float[]) -> ITI1llTTI1lITl
    void RGBXform(int[],byte[][],int,int,float[],float[]) -> l1IlTT1lITIl1IT1
    void _operate(isf.ptm.formats.PTM,isf.ptm.utils.LightSource[],int,int,int,int,int,int,int[],int,int) -> TT1lIT1ll1ITIIl1
    void processRGBLight(int,int,int,int,int,int,int[],byte[][],float[],float[]) -> TT1lIT1ll1ITIIl1
    void processLRGBLight(int,int,int,int,int,int,int[],byte[][],float[],float[]) -> ITI1llTTI1lITl
    void processLRGBEnvLight(int,int,int,int,int,int,int[],byte[][],float[],float[]) -> l1IlTT1lITIl1IT1
    void release() -> release
    void forceUpdate() -> lllITTIlTTII1111
    void clearCache() -> clearCache
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    java.lang.String getName() -> getName
isf.ptm.utils.LightSource -> l11lIAAI.l11lIAAI.lIAAl11I.l1IlIlTI1T1T:
    boolean enabled -> enabled
    javax.vecmath.Point3f light -> llTl1l1TT1I1IIIT
    float luminance -> IlT111IlTTTlIIl1
    boolean active -> active
    int xpos -> l1TIlTIlIIlT1T1
    int ypos -> lTITl11TI1lTIIl
    boolean isEnabled() -> isEnabled
    javax.vecmath.Point3f getLight() -> IlI1Il1T1TlTITl1
    void setLight(javax.vecmath.Point3f) -> TT1lIT1ll1ITIIl1
    void setEnabled(boolean) -> setEnabled
    int getX() -> getX
    void setX(int) -> setX
    int getY() -> getY
    void setY(int) -> setY
    float getLuminance() -> TI1T1llllTII1IT1
    void setLuminance(float) -> TTl1TITI1l1Il1lI
    boolean isActive() -> isActive
    void setActive(boolean) -> setActive
    java.lang.String getDisplay() -> getDisplay
isf.ptm.utils.SwingWorker -> l11lIAAI.l11lIAAI.lIAAl11I.lI1lTIIlT1T1:
    java.lang.Object value -> value
    isf.ptm.utils.SwingWorker$ThreadVar threadVar -> lTTI111I1ITlTIll
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    java.lang.Object construct() -> Il1Tl1IT1T1IlTIl
    void finished() -> finished
    void interrupt() -> interrupt
    java.lang.Object get() -> get
    void start() -> start
    void access$000(isf.ptm.utils.SwingWorker,java.lang.Object) -> TT1lIT1ll1ITIIl1
    isf.ptm.utils.SwingWorker$ThreadVar access$100(isf.ptm.utils.SwingWorker) -> TT1lIT1ll1ITIIl1
isf.ptm.utils.SwingWorker$1 -> l11lIAAI.l11lIAAI.lIAAl11I.Tl1l11IlIITT:
    isf.ptm.utils.SwingWorker this$0 -> TIlTlT1IIll11I1T
    void run() -> run
isf.ptm.utils.SwingWorker$2 -> l11lIAAI.l11lIAAI.lIAAl11I.Il1TI1lIT1lT:
    java.lang.Runnable val$doFinished -> IITIlllI1Tl11T1T
    isf.ptm.utils.SwingWorker this$0 -> TIlTlT1IIll11I1T
    void run() -> run
isf.ptm.utils.SwingWorker$ThreadVar -> l11lIAAI.l11lIAAI.lIAAl11I.l11lIlTTI1TI:
    java.lang.Thread thread -> thread
    java.lang.Thread get() -> llTIT11ITl1I1TlI
    void clear() -> clear
isf.ptm.utils.Utils -> l11lIAAI.l11lIAAI.lIAAl11I.T11ITIIllTl:
    int MASK -> MASK
    int indexOfMax(double[]) -> TT1lIT1ll1ITIIl1
    int indexOfMax(float[]) -> TIITI1lTlTl1Il11
    int clamp(int) -> TIl1TTIIT11I1lll
    float[] normalize3(float[]) -> TTl1TITI1l1Il1lI
    double[] normalize3(double[]) -> ITI1llTTI1lITl
    float[] normalize(float,float,float) -> l1IlTT1lITIl1IT1
    java.lang.String asString(double[]) -> l1IlTT1lITIl1IT1
    java.lang.String asString(float[]) -> IITTlT11lII1T1ll
    java.lang.String asString(int[]) -> ITl1I11TIlTlTlI1
    float translate(int,int) -> TTl1TITI1l1Il1lI
    int unsignedByteToInt(byte) -> TT1lIT1ll1ITIIl1
    float[] reflect(float[],float[]) -> ITI1llTTI1lITl
    double[] reflect(double[],double[]) -> lI1I1T1ITTl1llIT
    float[] vecSum3(float[],float[]) -> l1IlTT1lITIl1IT1
    double[] vecSum3(double[],double[]) -> IlITlTTTl11Il1I
    float[] scalarMult3(float[],float) -> TT1lIT1ll1ITIIl1
    double[] scalarMult3(double[],double) -> TT1lIT1ll1ITIIl1
    float dot3(float[],float[]) -> lI1I1T1ITTl1llIT
    double dot3(double[],double[]) -> IT11TT1lIll1ITIl
    int[] grabPixels(java.awt.image.BufferedImage) -> l1IlTT1lITIl1IT1
    java.awt.image.BufferedImage gaussianBlur(java.awt.image.BufferedImage,int,float) -> TT1lIT1ll1ITIIl1
    java.awt.image.BufferedImage blurImageSimple(java.awt.image.BufferedImage,int) -> TT1lIT1ll1ITIIl1
    java.awt.image.BufferedImage createBufferedImage(int[],int) -> TT1lIT1ll1ITIIl1
    java.awt.image.BufferedImage createBufferedImage(isf.ptm.graphics.VRGB[],int) -> TT1lIT1ll1ITIIl1
    isf.ptm.graphics.VRGB[] intToVec(int[]) -> T11I1Tll1IllIITT
    void checkAlgorithm(int,int,int,int) -> Il1II1TlT1llTI1T
    java.lang.String[] split(java.lang.String,java.lang.String) -> TT1lIT1ll1ITIIl1
    void toPolar(float,float,float,javax.vecmath.Point3f) -> TT1lIT1ll1ITIIl1
    float getFloatFromArray(byte[],int,int) -> TT1lIT1ll1ITIIl1
    float getFloatFromArray(byte[]) -> ITI1llTTI1lITl
    float byteArrayToFloat(byte[]) -> l1IlTT1lITIl1IT1
    byte[] floatToByteArray(float) -> IITTlT11lII1T1ll
    byte[] floatToBytes(float) -> l1IllT11TIIT1ITl
    byte[] intToByteArray(int) -> llITlIlTI11T11IT
    float cross(javax.vecmath.Point3f,isf.ptm.graphics.VRGB) -> TT1lIT1ll1ITIIl1
    javax.vecmath.Point3f normalize(javax.vecmath.Point3f) -> ITI1llTTI1lITl
    float norm(javax.vecmath.Point3f) -> l1IlTT1lITIl1IT1
    float[] convertToPolar(javax.vecmath.Point3f) -> lI1I1T1ITTl1llIT
