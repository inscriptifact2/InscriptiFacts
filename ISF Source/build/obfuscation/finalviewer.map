isf.cache.CacheItem -> isf.cache.a:
    java.lang.String name -> a
    long lastAccessedTime -> b
    double size -> c
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    java.lang.String getName() -> a
    void setName(java.lang.String) -> a
    long getLastAccessedTime() -> b
    void setLastAccessedTime(long) -> a
    void setSize(double) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getSize() -> c
    void writeObject(java.io.ObjectOutputStream) -> a
    void readObject(java.io.ObjectInputStream) -> a
isf.cache.CacheItemComparator -> isf.cache.b:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
isf.cache.CacheMap -> isf.cache.c:
    java.util.Comparator comparer -> a
    void <init>() -> <init>
    void <init>(java.util.Comparator) -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
isf.cache.CacheSet -> isf.cache.d:
    void <init>() -> <init>
    void <init>(java.util.Comparator) -> <init>
    boolean contains(java.lang.Object) -> contains
    void <init>(java.util.Collection) -> <init>
    java.lang.Object get(java.lang.Object) -> a
    boolean add(java.lang.Object) -> add
isf.cache.LRUCache -> isf.cache.e:
    org.apache.log4j.Logger log -> b
    long serialVersionUID -> c
    double fileSize -> d
    java.util.SortedSet cache -> e
    boolean isMonitoring -> f
    double cacheSize -> a
    void <init>() -> <init>
    void createSynchronizedMap(isf.cache.CacheSet) -> a
    void setLimit(java.lang.String) -> d
    void updateEntry(java.lang.String,double) -> a
    void deleteEntry(java.lang.String) -> a
    void updateEntry(java.lang.String) -> b
    void trimDirectory(java.lang.String) -> e
    void addItem(isf.cache.CacheItem) -> a
    void startMonitor() -> a
    void stopMonitoring() -> b
    boolean isCached(java.lang.String) -> c
    void writeObject(java.io.ObjectOutputStream) -> a
    void readObject(java.io.ObjectInputStream) -> a
    java.lang.String dumpValues() -> c
    double access$000(isf.cache.LRUCache) -> a
    java.util.SortedSet access$100(isf.cache.LRUCache) -> b
    double access$002(isf.cache.LRUCache,double) -> a
    void access$200(isf.cache.LRUCache,java.lang.String) -> a
    boolean access$302(isf.cache.LRUCache,boolean) -> a
isf.cache.LRUCache$1 -> isf.cache.f:
    isf.cache.LRUCache this$0 -> a
    void <init>(isf.cache.LRUCache) -> <init>
    void run() -> run
isf.cache.utils.CacheHandler -> isf.cache.utils.CacheHandler:
    isf.cache.utils.CacheHandler ourInstance -> a
    isf.cache.LRUCache cache -> b
    isf.cache.utils.CacheHandler getInstance() -> a
    void <init>() -> <init>
    void setCache(isf.cache.LRUCache) -> a
    isf.cache.LRUCache getCache() -> b
    void main(java.lang.String[]) -> main
    void <clinit>() -> <clinit>
isf.cache.utils.ImageUtils -> isf.cache.utils.a:
    isf.cache.LRUCache cache -> a
    java.lang.String path -> b
    org.apache.log4j.Logger log -> c
    void <init>() -> <init>
    java.awt.image.BufferedImage readUnbuffered(java.io.InputStream) -> a
    boolean isCached(java.lang.String) -> a
    java.lang.String getCachedPath() -> a
    void cleanCache() -> b
    void saveCache(java.lang.String,isf.ptm.formats.PTM,isf.common.utils.PTMConfig) -> a
    void saveThumbnail(java.lang.String,java.awt.image.BufferedImage) -> a
    java.awt.image.BufferedImage getThumbnail(java.lang.String) -> b
    void <clinit>() -> <clinit>
isf.common.Debug -> isf.common.a:
    boolean shallDisplay -> a
    void <init>() -> <init>
    void debug() -> a
    void debug(java.lang.Object) -> a
    void debug(char[]) -> a
    void debug(double) -> a
    void debug(float) -> a
    void debug(int) -> a
    void debug(long) -> a
    void debug(boolean) -> a
    void debug(char) -> a
    void <clinit>() -> <clinit>
isf.common.FilmTypeComparator -> isf.common.b:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean check(java.lang.Object,java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
isf.common.ISFBase64 -> isf.common.c:
    org.apache.log4j.Logger log -> a
    int NO_OPTIONS -> b
    int ENCODE -> c
    int DECODE -> d
    int GZIP -> e
    int DONT_BREAK_LINES -> f
    int MAX_LINE_LENGTH -> g
    byte EQUALS_SIGN -> h
    byte NEW_LINE -> i
    java.lang.String PREFERRED_ENCODING -> j
    byte[] ALPHABET -> k
    byte[] _NATIVE_ALPHABET -> l
    byte[] DECODABET -> m
    byte BAD_ENCODING -> n
    byte WHITE_SPACE_ENC -> o
    byte EQUALS_SIGN_ENC -> p
    void <init>() -> <init>
    byte[] encode3to4(byte[]) -> a
    byte[] encode3to4(byte[],int) -> a
    byte[] encode3to4(byte[],byte[],int) -> b
    byte[] encode3to4(byte[],int,int,byte[],int) -> b
    java.lang.String encodeObject(java.io.Serializable) -> a
    java.lang.String encodeObject(java.io.Serializable,int) -> a
    java.lang.String encodeBytes(byte[]) -> b
    java.lang.String encodeBytes(byte[],int) -> b
    java.lang.String encodeBytes(byte[],int,int) -> a
    java.lang.String encodeBytes(byte[],int,int,int) -> a
    byte[] decode4to3(byte[]) -> c
    int decode4to3(byte[],int,byte[],int) -> b
    byte[] decode(byte[],int,int) -> b
    byte[] decode(java.lang.String) -> a
    java.lang.Object decodeToObject(java.lang.String) -> b
    java.lang.String getVal(java.lang.String) -> c
    java.lang.String getQueryVal(java.lang.String) -> d
    byte[] access$000(byte[],byte[],int) -> a
    byte[] access$100() -> a
    int access$200(byte[],int,byte[],int) -> a
    byte[] access$300(byte[],int,int,byte[],int) -> a
    void <clinit>() -> <clinit>
isf.common.ISFBase64$InputStream -> isf.common.d:
    int options -> a
    boolean encode -> b
    int position -> c
    byte[] buffer -> d
    int bufferLength -> e
    int numSigBytes -> f
    int lineLength -> g
    boolean breakLines -> h
    int read() -> read
    int read(byte[],int,int) -> read
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,int) -> <init>
isf.common.ISFBase64$OutputStream -> isf.common.e:
    int options -> a
    boolean encode -> b
    int position -> c
    byte[] buffer -> d
    int bufferLength -> e
    int lineLength -> f
    boolean breakLines -> g
    byte[] b4 -> h
    boolean suspendEncoding -> i
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flushBase64() -> a
    void close() -> close
    void suspendEncoding() -> b
    void resumeEncoding() -> c
    void <init>(java.io.OutputStream) -> <init>
    void <init>(java.io.OutputStream,int) -> <init>
isf.common.ISFRequestDocHandler -> isf.common.f:
    boolean boolQuery -> a
    boolean boolClause -> b
    boolean boolQC -> c
    java.lang.String typeValue -> d
    java.lang.String modeValue -> e
    java.lang.String sessionValue -> f
    java.lang.String connectorValue -> g
    java.lang.String keyValue -> h
    java.lang.String valueValue -> i
    java.lang.String operatorValue -> j
    java.lang.String connectorQCValue -> k
    java.lang.String sqlQuery -> l
    java.lang.String temp -> m
    isf.common.xml.Query query -> n
    java.util.Vector clausesVector -> o
    java.util.Vector clausesFinalVector -> p
    java.util.Vector qcVector -> q
    java.util.Vector qcFinalVector -> r
    isf.common.jro.JavaRequestObject jreq -> s
    isf.common.xml.Clause clause -> t
    isf.common.xml.QueryCondition qc -> u
    org.apache.log4j.Logger log -> v
    void <init>() -> <init>
    void setDocumentLocator(org.xml.sax.Locator) -> setDocumentLocator
    void startDocument() -> startDocument
    void endDocument() -> endDocument
    void startElement(java.lang.String,org.xml.sax.AttributeList) -> a
    void endElement(java.lang.String) -> a
    void characters(char[],int,int) -> characters
    void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    void processingInstruction(java.lang.String,java.lang.String) -> processingInstruction
    void error(org.xml.sax.SAXParseException) -> a
    void warning(org.xml.sax.SAXParseException) -> b
    isf.common.jro.JavaRequestObject returnRequestObject() -> a
    void startPrefixMapping(java.lang.String,java.lang.String) -> startPrefixMapping
    void endPrefixMapping(java.lang.String) -> endPrefixMapping
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void skippedEntity(java.lang.String) -> skippedEntity
isf.common.MagnificationComparator -> isf.common.g:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean check(java.lang.Object,java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
isf.common.PhotoDateComparator -> isf.common.h:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean check(java.lang.Object,java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
isf.common.TextPublicationComparator -> isf.common.i:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
isf.common.XMLProcessorObject -> isf.common.j:
    org.apache.log4j.Logger log -> a
    void <init>() -> <init>
    isf.common.jro.JavaRequestObject getJavaRequest(java.lang.String) -> a
isf.common.jro.JavaRequestObject -> isf.common.a.a:
    isf.common.xml.Query query -> a
    void <init>() -> <init>
    void setQuery(isf.common.xml.Query) -> a
    isf.common.xml.Query getQuery() -> a
    java.lang.String getXML() -> b
isf.common.request.ImageRequestProxy -> isf.common.b.a:
    void <init>() -> <init>
    javax.swing.ImageIcon fetchImage$521c5f5a() -> a
    java.lang.Object getImageProperties$9543ced() -> b
    java.lang.String saveFile$7157d249() -> c
isf.common.request.PTMRequestProxy -> isf.common.b.b:
    void <init>() -> <init>
    byte[] getImageCoeff$ba25119() -> a
isf.common.request.RequestDispatcherProxy -> isf.common.b.c:
    java.lang.String sessionid -> a
    java.lang.Object handleQueryEvent$9543ced() -> a
    javax.swing.ImageIcon fetchImage$521c5f5a() -> b
    java.lang.Object getImageProperties$9543ced() -> c
    java.lang.String saveFile$7157d249() -> d
    int checkConnection() -> e
    isf.common.utils.PTMConfig getPTMConfig$6808fdb6() -> f
    void <init>() -> <init>
isf.common.request.RequestProxy -> isf.common.b.d:
    isf.common.request.RequestDispatcherProxy rdp -> a
    isf.common.request.ImageRequestProxy irp -> b
    isf.common.request.PTMRequestProxy prp -> c
    void <init>() -> <init>
    isf.common.request.RequestDispatcherProxy getRequestDispatcher() -> a
    isf.common.request.ImageRequestProxy getImageRequestProxy() -> c
    isf.common.request.PTMRequestProxy getPTMRequestProxy() -> b
isf.common.utils.CacheManagerConstants -> isf.common.utils.a:
    java.lang.String folderName -> a
    java.lang.String cacheFolderName -> b
    java.lang.String logFolderName -> c
    java.lang.String downloadFolderName -> d
    int folderSize -> e
    java.lang.String cacheEntriesFile -> f
    void <clinit>() -> <clinit>
isf.common.utils.CacheManagerConstants$Initial -> isf.common.utils.b:
    void <init>() -> <init>
    java.lang.String getFolderName() -> a
    java.lang.String getCacheFolderName() -> b
    java.lang.String getLogFolderName() -> c
    java.lang.String getDownloadFolderName() -> d
isf.common.utils.InscriptConfigLoader -> isf.common.utils.InscriptConfigLoader:
    java.util.Properties p -> a
    java.lang.String appName -> b
    isf.common.utils.InscriptConfigLoader icl -> c
    org.apache.log4j.Logger log -> d
    java.lang.String getAppName() -> getAppName
    void setAppName(java.lang.String) -> setAppName
    void <init>(java.lang.String) -> <init>
    isf.common.utils.InscriptConfigLoader initialize(java.lang.String) -> initialize
    isf.common.utils.InscriptConfigLoader getInstance() -> getInstance
    void load(java.lang.String) -> load
    java.lang.String getProperty(java.lang.String) -> getProperty
    void setProperty(java.lang.String,java.lang.String) -> setProperty
    void <clinit>() -> <clinit>
isf.common.utils.LogManager -> isf.common.utils.LogManager:
    void <init>() -> <init>
    org.apache.log4j.Logger getLogger(java.lang.String) -> getLogger
    org.apache.log4j.Logger getLogger(java.lang.Class) -> getLogger
    void <clinit>() -> <clinit>
isf.common.utils.LogoutListener -> isf.common.utils.c:
    void loggedout$552c4e01() -> a
    void disconnected() -> b
    void raiseError$552c4e01() -> c
    void sort$552c4e01() -> d
    void resetSort() -> e
isf.common.utils.PTMConfig -> isf.common.utils.d:
    java.lang.String name -> a
    int type -> b
    int basistype -> c
    java.lang.String version -> d
    java.lang.String cached -> e
    int rows -> f
    int columns -> g
    int segmentSize -> h
    int width -> i
    int height -> j
    int[] bias -> k
    float[] scale -> l
    long size -> m
    int colors -> n
    int terms -> o
    int elements -> p
    java.lang.String extension -> q
    void <init>() -> <init>
    void writeObject(java.io.ObjectOutputStream) -> a
    void readObject(java.io.ObjectInputStream) -> a
    java.lang.String getName() -> a
    void setName(java.lang.String) -> a
    int getType() -> b
    void setType(int) -> a
    java.lang.String getVersion() -> c
    void setVersion(java.lang.String) -> b
    java.lang.String getExtension() -> d
    void setExtension(java.lang.String) -> d
    java.lang.String getCached() -> e
    void setCached(java.lang.String) -> c
    int getWidth() -> f
    void setWidth(int) -> b
    int getHeight() -> g
    void setHeight(int) -> c
    int[] getBias() -> h
    void setBias(int[]) -> a
    float[] getScale() -> i
    void setScale(float[]) -> b
    long getSize() -> j
    void setSize(long) -> a
    int getRows() -> k
    void setRows(int) -> d
    int getColumns() -> l
    void setColumns(int) -> e
    int getSegmentSize() -> m
    void setSegmentSize(int) -> f
    java.lang.String getExt() -> n
    int getBasistype() -> o
    void setBasistype(int) -> g
    int getColors() -> p
    void setColors(int) -> h
    int getTerms() -> q
    void setTerms(int) -> i
    int getElements() -> r
    void setElements(int) -> j
isf.common.utils.PriorityThreadFactory -> isf.common.utils.e:
    int priority -> a
    void <init>(int) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
isf.common.utils.SegmentUtils -> isf.common.utils.f:
    int row -> a
    int col -> b
    int band -> c
    int bandTile -> d
    int size -> e
    java.lang.String name -> f
    void <init>() -> <init>
    int getRow() -> a
    void setRow(int) -> a
    int getCol() -> b
    void setCol(int) -> b
    int getBand() -> c
    void setBand(int) -> c
    int getBandTile() -> d
    void setBandTile(int) -> d
    int getSize() -> e
    void setSize(int) -> e
    java.lang.String getName() -> f
    void setName(java.lang.String) -> a
isf.common.utils.ThreadExecutor -> isf.common.utils.g:
    isf.common.utils.ThreadExecutor executor -> a
    java.util.concurrent.ExecutorService threadPool -> b
    java.util.concurrent.ExecutorService priorityPool -> c
    int count -> d
    void <init>() -> <init>
    isf.common.utils.ThreadExecutor getInstance() -> a
    void execute(java.lang.Runnable,boolean) -> a
    void shutdown() -> b
isf.common.view.gui.SpatialListImage -> isf.common.c.a.a:
    java.lang.String getTextView() -> a
    java.lang.String getTitle() -> b
    javax.swing.ImageIcon getTextViewImage() -> c
    java.lang.String getIndexMapName() -> d
    void setTextView$552c4e01() -> e
    void setTitle$552c4e01() -> f
    void setTextViewImage$427f8aa2() -> g
    void setIndexMapName$552c4e01() -> h
isf.common.view.gui.TextDivision -> isf.common.c.a.b:
    java.lang.String isfAssignedTextNo -> a
    java.lang.String maintextpubno -> b
    java.lang.String indexmapfilename -> c
    java.lang.String sscode -> d
    java.lang.String textdesctitle -> e
    java.lang.String textdivname -> f
    java.lang.String textdivdesc -> g
    java.lang.String textdivmuseumno -> h
    java.lang.String textview -> i
    java.util.Vector textdivsubdivs -> j
    void <init>() -> <init>
    void setIsfAssignedTextNo(java.lang.String) -> a
    java.lang.String getIsfAssignedTextNo() -> a
    void setMainTextPubNo(java.lang.String) -> b
    java.lang.String getMainTextPubNo() -> b
    void setIndexMapFileName(java.lang.String) -> c
    java.lang.String getIndexMapFileName() -> c
    void setSpatialSearchCode(java.lang.String) -> d
    java.lang.String getSpatialSearchCode() -> d
    void setTextDescTitle(java.lang.String) -> e
    java.lang.String getTextDescTitle() -> e
    void setTextDivisionName(java.lang.String) -> f
    java.lang.String getTextDivisionName() -> f
    void setTextDivisionDesc(java.lang.String) -> g
    java.lang.String getTextDivisionDesc() -> g
    void setTextDivisionMuseumNo(java.lang.String) -> h
    java.lang.String getTextDivisionMuseumNo() -> h
    void setTextView(java.lang.String) -> i
    java.lang.String getTextView() -> i
    void setTextDivisionSubDivisions(java.util.Vector) -> a
    java.util.Vector getTextDivisionSubDivisions() -> j
    java.lang.String toString() -> toString
isf.common.view.gui.TextDivisionSubDivision -> isf.common.c.a.c:
    java.lang.String isfAssignedTextNo -> a
    java.lang.String maintextpubno -> b
    java.lang.String sscode -> c
    java.lang.String textdivname -> d
    java.lang.String textdivsubdivname -> e
    java.lang.String textdesctitle -> f
    void <init>() -> <init>
    void setIsfAssignedTextNo(java.lang.String) -> a
    java.lang.String getIsfAssignedTextNo() -> a
    void setMainTextPubNo(java.lang.String) -> b
    java.lang.String getMainTextPubNo() -> b
    void setSpatialSearchCode(java.lang.String) -> c
    java.lang.String getSpatialSearchCode() -> c
    void setTextDivisionName(java.lang.String) -> d
    java.lang.String getTextDivisionName() -> d
    void setTextDescTitle(java.lang.String) -> e
    java.lang.String getTextDescTitle() -> e
    void setTextDivisionSubDivisionName(java.lang.String) -> f
    java.lang.String getTextDivisionSubDivisionName() -> f
    java.lang.String toString() -> toString
isf.common.xml.Clause -> isf.common.d.a:
    java.util.Vector clausesVector -> c
    void <init>(java.lang.String) -> <init>
    void addClause(isf.common.xml.Clause) -> a
    java.util.Vector getClauses() -> b
    void addQueryCondition(isf.common.xml.QueryCondition) -> a
    java.lang.String getXML() -> a
isf.common.xml.Query -> isf.common.d.b:
    java.util.Vector q -> a
    java.lang.String type -> b
    java.lang.String mode -> c
    java.lang.String sessionid -> d
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void add(isf.common.xml.QueryCondition) -> a
    void setQueryConditions(java.util.Vector) -> a
    java.util.Vector getQueryConditions() -> b
    void setType(java.lang.String) -> a
    java.lang.String getType() -> c
    void setMode(java.lang.String) -> b
    java.lang.String getMode() -> d
    void setSessionid(java.lang.String) -> c
    java.lang.String getSessionid() -> e
    java.lang.String getXML() -> a
isf.common.xml.QueryCondition -> isf.common.d.c:
    java.util.Vector queryConditions -> a
    java.lang.String key -> c
    java.lang.String value -> d
    java.lang.String operator -> e
    java.lang.String connector -> b
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void addQueryCondition(isf.common.xml.QueryCondition) -> a
    java.lang.String getKey() -> b
    java.lang.String getValue() -> c
    java.lang.String getOperator() -> d
    java.lang.String getConnector() -> e
    java.util.Vector getQueryConditions() -> f
    java.lang.String getXML() -> a
isf.controls.controllers.ActiveXListenerManager -> isf.controls.a.a:
    isf.controls.view.listeners.ActiveXListener al -> a
    void <init>() -> <init>
    void registerActivationListener(isf.controls.view.listeners.ActiveXListener) -> a
    void minimized(java.lang.String) -> a
    void activated(java.lang.String) -> b
    void deleted(java.lang.String) -> c
    void setNotification(java.lang.String) -> d
isf.controls.controllers.ISFGarbageCollector -> isf.controls.a.b:
    int interval -> a
    org.apache.log4j.Logger logger -> b
    void <init>() -> <init>
    void run() -> run
isf.controls.controllers.ImageLoaderManager -> isf.controls.a.c:
    isf.controls.view.listeners.ImageLoaderListener iLL -> a
    isf.controls.controllers.ImageLoaderManager img -> b
    isf.common.utils.LogoutListener sl$42818349 -> c
    java.lang.String[] cache -> d
    void <init>() -> <init>
    isf.controls.controllers.ImageLoaderManager getInstance() -> a
    void registerListener(isf.controls.view.listeners.ImageLoaderListener) -> a
    isf.controls.view.listeners.ImageLoaderListener getLoader() -> b
    void cacheQuery(java.lang.String,java.lang.String) -> a
    void resetcache() -> c
    java.lang.String[] getCacheQuery() -> d
    void registerSorter$2eb3c182(isf.common.utils.LogoutListener) -> a
    isf.common.utils.LogoutListener getSorter$6eecb70a() -> e
isf.controls.controllers.IsfSplitManager -> isf.controls.a.d:
    isf.controls.controllers.IsfSplitManager ourInstance -> a
    isf.controls.view.containers.ISFSplitPane verticalSplit -> b
    isf.controls.view.containers.ISFSplitPane horizontalSplit -> c
    isf.controls.controllers.IsfSplitManager getInstance() -> a
    void <init>() -> <init>
    void setSplitPane(isf.controls.view.containers.ISFSplitPane,int) -> a
    void updateState(int) -> a
isf.controls.controllers.KeyProcessManager -> isf.controls.a.e:
    isf.controls.controllers.KeyProcessManager ourInstance -> a
    isf.controls.view.listeners.KeyHandler activeKH -> b
    java.util.ArrayList handlers -> c
    isf.controls.controllers.KeyProcessManager getInstance() -> a
    void <init>() -> <init>
    boolean isKeyStrokeRequired() -> b
    void fireKeyEvent(java.awt.event.KeyEvent) -> a
    void addKeyHandler(isf.controls.view.listeners.KeyHandler) -> a
    void setActive(isf.controls.view.listeners.KeyHandler) -> b
isf.controls.controllers.LoadManager -> isf.controls.a.f:
    isf.controls.controllers.LoadManager manager -> a
    int current -> b
    int total -> c
    long maximum -> d
    long actual -> e
    long loaded -> f
    long lastLoaded -> g
    int count -> h
    long startTime -> i
    javax.swing.Timer timer -> j
    boolean loading -> k
    boolean fromStandalone -> l
    java.lang.String notLoaded -> m
    javax.swing.JProgressBar bar1 -> n
    void <init>() -> <init>
    isf.controls.controllers.LoadManager getInstance() -> a
    void updateCount() -> b
    void registerMonitor(javax.swing.JProgressBar) -> a
    void setMaximum(long) -> b
    long getMaximum() -> d
    void setActual(long) -> c
    long getActual() -> e
    void setTotal(int) -> a
    void update(long) -> a
    void start() -> f
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void stopAnimation() -> g
    void startLoading(java.lang.String) -> a
    void stopLoading() -> c
    boolean isLoading() -> h
    java.lang.String getNotLoaded() -> i
    void setNotLoaded(java.lang.String) -> b
isf.controls.controllers.PTMFrameManager -> isf.controls.a.g:
    org.apache.log4j.Logger log -> a
    isf.ptm.controls.PTMWindow panel -> b
    isf.controls.view.controls.ISFButton btn -> c
    isf.controls.controllers.PTMFrameManager manager -> d
    java.util.HashMap pfcl -> e
    double version -> f
    int mode -> g
    boolean autoClick -> h
    java.util.HashMap copies -> i
    boolean diffuse -> j
    boolean canChange -> k
    boolean light -> l
    boolean isAutoClick() -> a
    void setAutoClick(boolean) -> b
    void registerChangeListener(isf.controls.view.listeners.PTMFrameChangeListener,isf.ptm.controls.PTMWindow) -> a
    void releaseChangeListeners() -> b
    void releaseChangeListener(isf.controls.view.listeners.PTMFrameChangeListener) -> a
    void releaseChangeListener(isf.ptm.controls.PTMWindow) -> a
    void releaseChangeListener(isf.controls.view.listeners.PTMFrameChangeListener,isf.ptm.controls.PTMWindow) -> b
    void refreshControls() -> c
    void setPTMWindow(isf.ptm.controls.PTMWindow) -> b
    void showControls() -> d
    void registerButton(isf.controls.view.controls.ISFButton) -> a
    void addCopies(java.lang.String,javax.swing.JInternalFrame) -> a
    java.util.Vector getCopies(java.lang.String) -> a
    void removeCopies(java.lang.String) -> b
    isf.ptm.controls.PTMWindow getPTMWindow() -> e
    void <init>() -> <init>
    isf.controls.controllers.PTMFrameManager getInstance() -> f
    isf.controls.view.containers.PTMPanel getNewPTMPanel() -> g
    double getVersion() -> l
    void setDiffuseOperation(boolean,boolean) -> a
    boolean getDiffuseOperation() -> h
    void setLightOperation(boolean) -> a
    boolean getLightOperation() -> i
    isf.controls.view.controls.ISFButton[] getPTMButtons() -> j
    int getMode() -> k
    void setMode(int) -> a
    void <clinit>() -> <clinit>
isf.controls.controllers.ToolbarManager -> isf.controls.a.h:
    isf.controls.controllers.ToolbarManager manager -> a
    isf.controls.view.controls.SidToolbar bar -> b
    void <init>() -> <init>
    isf.controls.controllers.ToolbarManager getInstance() -> a
    void registerToolbar(isf.controls.view.controls.SidToolbar) -> a
    void updateToolbar() -> b
    void <clinit>() -> <clinit>
isf.controls.models.DesktopDataObject -> isf.controls.b.a:
    java.lang.String header -> a
    java.lang.String displayName -> b
    java.lang.String fileName -> c
    boolean added -> d
    java.lang.String photoIdenNo -> e
    isf.common.utils.PTMConfig config -> f
    boolean copy -> g
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,isf.common.utils.PTMConfig) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getHeader() -> a
    java.lang.String getDisplayName() -> b
    java.lang.String getFileName() -> c
    boolean isAdded() -> d
    void setAdded(boolean) -> a
    void setPhotoIdentificationNo(java.lang.String) -> a
    java.lang.String getPhotoIdentificationNo() -> e
    java.lang.String toString() -> toString
    isf.common.utils.PTMConfig getConfig() -> f
    void setConfig(isf.common.utils.PTMConfig) -> a
    boolean isCopy() -> g
    void setCopy(boolean) -> b
isf.controls.plaf.DesktopTheme -> isf.controls.plaf.a:
    java.awt.Color titleColor -> a
    void <init>(java.awt.Color) -> <init>
    javax.swing.plaf.ColorUIResource getWindowTitleForeground() -> getWindowTitleForeground
    javax.swing.plaf.ColorUIResource getWindowTitleInactiveForeground() -> getWindowTitleInactiveForeground
    javax.swing.plaf.ColorUIResource getWindowTitleBackground() -> getWindowTitleBackground
    javax.swing.plaf.ColorUIResource getWindowTitleInactiveBackground() -> getWindowTitleInactiveBackground
    javax.swing.plaf.ColorUIResource getPrimaryControl() -> getPrimaryControl
isf.controls.plaf.GeneralMenuItemUI -> isf.controls.plaf.GeneralMenuItemUI:
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void <init>() -> <init>
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
isf.controls.plaf.GeneralMenuUI -> isf.controls.plaf.GeneralMenuUI:
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void <init>() -> <init>
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
isf.controls.plaf.IPArrowButton -> isf.controls.plaf.b:
    isf.controls.plaf.IPArrowIcon arrowIcon -> a
    java.awt.Color disabledBorderColor -> b
    java.awt.Color rolloverBorderColor -> c
    int SIDE_LENGTH -> d
    void <init>() -> <init>
    void <init>(int) -> <init>
    boolean isFocusable() -> isFocusable
    void paint(java.awt.Graphics) -> paint
    void setBorderColor$f9912bf() -> a
    void setDisabledBorderColor(java.awt.Color) -> a
    void setRolloverBorderColor(java.awt.Color) -> b
isf.controls.plaf.IPArrowIcon -> isf.controls.plaf.c:
    int ARROW_HEIGHT -> a
    int ARROW_WIDTH -> b
    java.awt.Polygon arrowPolygon -> c
    java.awt.Color borderColor -> d
    java.awt.Polygon downArrowPolygon -> e
    java.awt.Color glyphColor -> f
    java.awt.Color interiorColor -> g
    java.awt.Polygon leftArrowPolygon -> h
    int orientation -> i
    boolean paintGlyph -> j
    java.awt.Polygon rightArrowPolygon -> k
    java.awt.Polygon upArrowPolygon -> l
    void <init>() -> <init>
    void <init>(int) -> <init>
    java.awt.Color getBorderColor() -> a
    int getIconHeight() -> getIconHeight
    int getIconWidth() -> getIconWidth
    int getOrientation() -> b
    void paintIcon(java.awt.Component,java.awt.Graphics,int,int) -> paintIcon
    void setBorderColor(java.awt.Color) -> a
    void setGlyphColor(java.awt.Color) -> b
    void setInteriorColor(java.awt.Color) -> c
    void setOrientation(int) -> a
    void setPaintGlyph(boolean) -> a
isf.controls.plaf.IPButtonIcon -> isf.controls.plaf.d:
    void setBorderColor(java.awt.Color) -> a
    void setGlyphColor(java.awt.Color) -> b
    void setInteriorColor(java.awt.Color) -> c
    void setPaintGlyph(boolean) -> a
isf.controls.plaf.IPButtonUI -> isf.controls.plaf.IPButtonUI:
    isf.controls.plaf.IPButtonUI buttonUI -> a
    int TOP -> b
    int BOTTOM -> c
    int radiant -> d
    java.awt.Color backgroundColor -> e
    java.awt.Color borderColor -> f
    javax.swing.plaf.FontUIResource defaultFont -> g
    java.awt.Color disabledBackgroundColor -> h
    java.awt.Color disabledBorderColor -> i
    java.awt.Color disabledForegroundColor -> j
    java.awt.Color foregroundColor -> k
    java.awt.Color rolloverBackgroundColor -> l
    javax.swing.plaf.FontUIResource rolloverFont -> m
    java.awt.Color rolloverForegroundColor -> n
    java.awt.Color selectedBackgroundColor -> o
    java.awt.Color selectedForegroundColor -> p
    java.awt.Color flushableBackgroundColor -> q
    java.awt.Color flushableForgroundColor -> r
    java.awt.Color flushableBorderColor -> s
    javax.swing.plaf.FontUIResource flushableFont -> t
    java.awt.Rectangle iconRectangle -> u
    java.awt.Rectangle textRectangle -> v
    java.awt.Rectangle viewRectangle -> w
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void <init>() -> <init>
    void <init>(int) -> <init>
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
    void writeText$2bf4aaa3(java.awt.Graphics,javax.swing.JComponent) -> a
    void paintExternalButtonImages(java.awt.Graphics,javax.swing.JComponent) -> b
    void installDefaults(javax.swing.AbstractButton) -> installDefaults
    void setBackgroundColor(java.awt.Color) -> a
    void <clinit>() -> <clinit>
isf.controls.plaf.IPComboBoxUI -> isf.controls.plaf.IPComboBoxUI:
    void <init>() -> <init>
    javax.swing.plaf.basic.ComboPopup createPopup() -> createPopup
isf.controls.plaf.IPComboBoxUI$1 -> isf.controls.plaf.e:
    isf.controls.plaf.IPComboBoxUI this$0 -> a
    void <init>(isf.controls.plaf.IPComboBoxUI,javax.swing.JComboBox) -> <init>
    void show() -> show
isf.controls.plaf.IPScrollBar -> isf.controls.plaf.f:
    void <init>(int) -> <init>
    void setUI(isf.controls.plaf.IPScrollBarUI) -> a
isf.controls.plaf.IPScrollBarUI -> isf.controls.plaf.IPScrollBarUI:
    java.awt.Color backgroundColor -> a
    java.awt.Color borderColor -> b
    javax.swing.border.Border buttonBorder -> c
    java.awt.Color disabledBackgroundColor -> d
    java.awt.Color disabledBorderColor -> e
    boolean isArmed -> f
    boolean isRollover -> g
    java.awt.event.MouseListener mouseListener -> h
    java.awt.Color rolloverBackgroundColor -> i
    java.awt.Color selectedForegroundColor -> j
    java.awt.Color thumbBackgroundColor -> k
    java.awt.Color thumbRolloverBackgroundColor -> l
    java.awt.Color trackBackgroundColor -> m
    void <init>() -> <init>
    void configureArrowButton(javax.swing.JButton) -> a
    javax.swing.JButton createDecreaseButton(int) -> createDecreaseButton
    javax.swing.JButton createIncreaseButton(int) -> createIncreaseButton
    java.awt.event.MouseListener createMouseListener() -> a
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    java.awt.Dimension getPreferredSize(javax.swing.JComponent) -> getPreferredSize
    void installDefaults() -> installDefaults
    void installListeners() -> installListeners
    void paintThumb(java.awt.Graphics,javax.swing.JComponent,java.awt.Rectangle) -> paintThumb
    void paintTrack(java.awt.Graphics,javax.swing.JComponent,java.awt.Rectangle) -> paintTrack
    void setArmed(boolean) -> a
    void setRollover(boolean) -> b
    void uninstallDefaults() -> uninstallDefaults
    void uninstallListeners() -> uninstallListeners
    javax.swing.border.Border access$000(isf.controls.plaf.IPScrollBarUI) -> a
isf.controls.plaf.IPScrollBarUI$IPScrollBarArrowButton -> isf.controls.plaf.g:
    isf.controls.plaf.IPScrollBarUI this$0 -> a
    void setBorder(javax.swing.border.Border) -> setBorder
    void paint(java.awt.Graphics) -> paint
    void <init>(isf.controls.plaf.IPScrollBarUI,int) -> <init>
isf.controls.plaf.IPScrollBarUI$IPScrollBarMouseListener -> isf.controls.plaf.h:
    isf.controls.plaf.IPScrollBarUI this$0 -> a
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void <init>(isf.controls.plaf.IPScrollBarUI) -> <init>
isf.controls.plaf.IPScrollButton -> isf.controls.plaf.i:
    java.awt.Color shadowColor -> a
    java.awt.Color highlightColor -> b
    boolean isFreeStanding -> c
    int buttonWidth -> d
    java.awt.Color scrollButton -> e
    java.awt.Color scrollButtonBorder3D -> f
    java.awt.Color scrollBackGround -> g
    void <init>(int,int,boolean) -> <init>
    void paint(java.awt.Graphics) -> paint
    void drawDisabledBorder$2f958723(java.awt.Graphics,int,int) -> a
    void setFreeStanding(boolean) -> a
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    int getButtonWidth() -> a
isf.controls.plaf.IPScrollButtonUI -> isf.controls.plaf.j:
    java.awt.Color col1 -> a
    void <init>(int,int,boolean) -> <init>
    void paint(java.awt.Graphics) -> paint
isf.controls.plaf.IPScrollPaneUI -> isf.controls.plaf.IPScrollPaneUI:
    void <init>() -> <init>
    void installDefaults(javax.swing.JScrollPane) -> installDefaults
    void uninstallDefaults(javax.swing.JScrollPane) -> uninstallDefaults
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
isf.controls.plaf.IPSplitPaneDivider -> isf.controls.plaf.k:
    int defaultDividerSize -> a
    int thumbSize -> b
    java.awt.Color lightShadow -> c
    java.awt.Color mediumShadow -> d
    java.awt.Color darkShadow -> e
    java.awt.Color control -> f
    java.awt.Color focus -> g
    javax.swing.ImageIcon icon1 -> h
    javax.swing.ImageIcon icon2 -> i
    javax.swing.ImageIcon current -> j
    java.awt.Cursor crosshairCursor -> k
    java.awt.Cursor defaultCursor -> l
    void <init>(isf.controls.plaf.IPSplitPaneUI) -> <init>
    void setIPSplitPaneUI$1a6ae8fb() -> a
    java.awt.Rectangle getThumbBounds() -> c
    void setDividerSize(int) -> setDividerSize
    int getDividerSize() -> getDividerSize
    void paint(java.awt.Graphics) -> paint
    void paintTop$6d156780(java.awt.Graphics) -> a
    void paintBottom$3597fb83(java.awt.Graphics) -> b
    void paintLeft$6d156780(java.awt.Graphics) -> c
    void paintRight$3597fb83(java.awt.Graphics) -> d
    void drawBorder$3b435f3() -> d
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void changeImage() -> b
    void <clinit>() -> <clinit>
isf.controls.plaf.IPSplitPaneUI -> isf.controls.plaf.IPSplitPaneUI:
    void <init>() -> <init>
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void installDefaults() -> installDefaults
    javax.swing.plaf.basic.BasicSplitPaneDivider createDefaultDivider() -> createDefaultDivider
    isf.controls.plaf.IPSplitPaneDivider getIsfDivider() -> a
    int getDividerBorderSize() -> getDividerBorderSize
    void finishedPaintingChildren(javax.swing.JSplitPane,java.awt.Graphics) -> finishedPaintingChildren
    void finishDraggingTo(int) -> finishDraggingTo
    void dragDividerTo(int) -> dragDividerTo
    void startDragging() -> startDragging
isf.controls.plaf.IPVerticalLabelUI -> isf.controls.plaf.IPVerticalLabelUI:
    boolean clockwise -> a
    java.awt.Rectangle paintIconR -> b
    java.awt.Rectangle paintTextR -> c
    java.awt.Rectangle paintViewR -> d
    java.awt.Insets paintViewInsets -> e
    void <init>(boolean) -> <init>
    java.awt.Dimension getPreferredSize(javax.swing.JComponent) -> getPreferredSize
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
    void <clinit>() -> <clinit>
isf.controls.plaf.ISFComboBoxButton -> isf.controls.plaf.l:
    javax.swing.JComboBox comboBox -> a
    javax.swing.JList listBox -> b
    javax.swing.CellRendererPane rendererPane -> c
    javax.swing.Icon comboIcon -> d
    boolean iconOnly -> e
    javax.swing.JComboBox getComboBox() -> b
    void setComboBox(javax.swing.JComboBox) -> a
    javax.swing.Icon getComboIcon() -> a
    void setComboIcon(javax.swing.Icon) -> a
    boolean isIconOnly() -> c
    void setIconOnly(boolean) -> a
    void <init>() -> <init>
    void <init>(javax.swing.JComboBox,javax.swing.Icon,javax.swing.CellRendererPane,javax.swing.JList) -> <init>
    void <init>(javax.swing.JComboBox,javax.swing.Icon,boolean,javax.swing.CellRendererPane,javax.swing.JList) -> <init>
    boolean isFocusTraversable() -> isFocusTraversable
    boolean isLeftToRight(java.awt.Component) -> a
    void paintComponent(java.awt.Graphics) -> paintComponent
isf.controls.plaf.ISFComboBoxButton$1 -> isf.controls.plaf.m:
    isf.controls.plaf.ISFComboBoxButton this$0 -> a
    void <init>(isf.controls.plaf.ISFComboBoxButton) -> <init>
    void setArmed(boolean) -> setArmed
isf.controls.plaf.ISFComboBoxEditor -> isf.controls.plaf.n:
    java.awt.Insets editorBorderInsets -> a
    void <init>() -> <init>
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void <clinit>() -> <clinit>
isf.controls.plaf.ISFComboBoxEditor$EditorBorder -> isf.controls.plaf.o:
    isf.controls.plaf.ISFComboBoxEditor this$0 -> a
    void <init>(isf.controls.plaf.ISFComboBoxEditor) -> <init>
    void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int) -> paintBorder
    java.awt.Insets getBorderInsets(java.awt.Component) -> getBorderInsets
isf.controls.plaf.ISFComboBoxEditor$UIResource -> isf.controls.plaf.p:
    void <init>() -> <init>
isf.controls.plaf.ISFComboBoxIcon -> isf.controls.plaf.q:
    void <init>() -> <init>
    void paintIcon(java.awt.Component,java.awt.Graphics,int,int) -> paintIcon
    int getIconWidth() -> getIconWidth
    int getIconHeight() -> getIconHeight
isf.controls.plaf.ISFComboBoxUI -> isf.controls.plaf.ISFComboBoxUI:
    void <init>() -> <init>
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
    javax.swing.ComboBoxEditor createEditor() -> createEditor
    javax.swing.plaf.basic.ComboPopup createPopup() -> createPopup
    javax.swing.JButton createArrowButton() -> createArrowButton
    java.beans.PropertyChangeListener createPropertyChangeListener() -> createPropertyChangeListener
    void editablePropertyChanged$7c572ff8() -> a
    java.awt.LayoutManager createLayoutManager() -> createLayoutManager
    void layoutComboBox(java.awt.Container,isf.controls.plaf.ISFComboBoxUI$MetalComboBoxLayoutManager) -> a
    void removeListeners() -> b
    void configureEditor() -> configureEditor
    void unconfigureEditor() -> unconfigureEditor
    java.awt.Dimension getMinimumSize(javax.swing.JComponent) -> getMinimumSize
    javax.swing.JButton access$000(isf.controls.plaf.ISFComboBoxUI) -> a
    javax.swing.JComboBox access$100(isf.controls.plaf.ISFComboBoxUI) -> b
    javax.swing.JComboBox access$200(isf.controls.plaf.ISFComboBoxUI) -> c
    javax.swing.JButton access$300(isf.controls.plaf.ISFComboBoxUI) -> d
    javax.swing.JButton access$400(isf.controls.plaf.ISFComboBoxUI) -> e
isf.controls.plaf.ISFComboBoxUI$MetalComboBoxLayoutManager -> isf.controls.plaf.r:
    isf.controls.plaf.ISFComboBoxUI this$0 -> a
    void <init>(isf.controls.plaf.ISFComboBoxUI) -> <init>
    void layoutContainer(java.awt.Container) -> layoutContainer
    void superLayout(java.awt.Container) -> a
isf.controls.plaf.ISFComboBoxUI$MetalComboPopup -> isf.controls.plaf.s:
    java.awt.Dimension dim -> a
    int visible -> b
    isf.controls.plaf.ISFComboBoxUI this$0 -> c
    void <init>(isf.controls.plaf.ISFComboBoxUI,javax.swing.JComboBox) -> <init>
    void delegateFocus(java.awt.event.MouseEvent) -> delegateFocus
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void configurePopup() -> configurePopup
isf.controls.plaf.ISFComboBoxUI$MetalPropertyChangeListener -> isf.controls.plaf.t:
    isf.controls.plaf.ISFComboBoxUI this$0 -> a
    void <init>(isf.controls.plaf.ISFComboBoxUI) -> <init>
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
isf.controls.plaf.ISFSplitPaneDivider -> isf.controls.plaf.u:
    int ONE_TOUCH_SIZE -> a
    int ONE_TOUCH_OFFSET -> b
    javax.swing.border.Border border -> c
    isf.controls.plaf.ISFSplitPaneUI splitPaneUI -> d
    int inset -> e
    int dividerSize -> f
    int orientation -> g
    javax.swing.JSplitPane splitPane -> h
    java.awt.Color controlColor -> i
    java.awt.Color primaryControlColor -> j
    javax.swing.JButton divBut -> k
    void <init>(isf.controls.plaf.ISFSplitPaneUI) -> <init>
    void paint(java.awt.Graphics) -> paint
    javax.swing.JButton createLeftOneTouchButton() -> g
    javax.swing.JButton createRightOneTouchButton() -> h
    int getOneTouchSizeFromSuper() -> a
    int getOneTouchOffsetFromSuper() -> b
    int getOrientationFromSuper() -> c
    javax.swing.JSplitPane getSplitPaneFromSuper() -> d
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void setDividerSize(int) -> a
    int getDividerSize() -> e
    void setBorder(javax.swing.border.Border) -> a
    java.awt.Insets getInsets() -> getInsets
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    javax.swing.border.Border getBorder() -> f
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
    javax.swing.JButton access$000(isf.controls.plaf.ISFSplitPaneDivider) -> a
isf.controls.plaf.ISFSplitPaneDivider$1 -> isf.controls.plaf.v:
    int[][] Lbuffer -> a
    isf.controls.plaf.ISFSplitPaneDivider this$0 -> b
    void <init>(isf.controls.plaf.ISFSplitPaneDivider) -> <init>
    void setBorder(javax.swing.border.Border) -> setBorder
    void paint(java.awt.Graphics) -> paint
    boolean isFocusTraversable() -> isFocusTraversable
isf.controls.plaf.ISFSplitPaneDivider$2 -> isf.controls.plaf.w:
    int[][] buffer -> a
    isf.controls.plaf.ISFSplitPaneDivider this$0 -> b
    void <init>(isf.controls.plaf.ISFSplitPaneDivider) -> <init>
    void setBorder(javax.swing.border.Border) -> setBorder
    void paint(java.awt.Graphics) -> paint
    boolean isFocusTraversable() -> isFocusTraversable
isf.controls.plaf.ISFSplitPaneDivider$ISFDividerLayout -> isf.controls.plaf.x:
    isf.controls.plaf.ISFSplitPaneDivider this$0 -> a
    void <init>(isf.controls.plaf.ISFSplitPaneDivider) -> <init>
    void layoutContainer(java.awt.Container) -> layoutContainer
    java.awt.Dimension minimumLayoutSize(java.awt.Container) -> minimumLayoutSize
    java.awt.Dimension preferredLayoutSize(java.awt.Container) -> preferredLayoutSize
    void removeLayoutComponent(java.awt.Component) -> removeLayoutComponent
    void addLayoutComponent(java.lang.String,java.awt.Component) -> addLayoutComponent
isf.controls.plaf.ISFSplitPaneUI -> isf.controls.plaf.ISFSplitPaneUI:
    javax.swing.JSplitPane splitPane -> a
    isf.controls.plaf.ISFSplitPaneDivider divider -> f
    int orientation -> g
    int lastDragLocation -> h
    boolean continuousLayout -> i
    boolean dividerKeyboardResize -> j
    boolean dividerLocationIsSet -> k
    int dividerSize -> b
    java.awt.Component nonContinuousLayoutDivider -> c
    boolean draggingHW -> l
    java.lang.String NON_CONTINUOUS_DIVIDER -> m
    boolean painted -> d
    boolean ignoreDividerLocationChange -> e
    isf.controls.plaf.ISFSplitPaneUI$ISFHorizontalLayoutManager layoutManager -> n
    void <init>() -> <init>
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void installUI(javax.swing.JComponent) -> installUI
    void installDefaults() -> installDefaults
    void resetLayoutManager() -> resetLayoutManager
    int getOrientation() -> getOrientation
    void setOrientation(int) -> setOrientation
    boolean isContinuousLayout() -> isContinuousLayout
    void setContinuousLayout(boolean) -> setContinuousLayout
    javax.swing.JSplitPane getSplitPane() -> getSplitPane
    int getDividerLocation(javax.swing.JSplitPane) -> getDividerLocation
    int getMinimumDividerLocation(javax.swing.JSplitPane) -> getMinimumDividerLocation
    int getMaximumDividerLocation(javax.swing.JSplitPane) -> getMaximumDividerLocation
    void finishedPaintingChildren(javax.swing.JSplitPane,java.awt.Graphics) -> finishedPaintingChildren
    void resetToPreferredSizes(javax.swing.JSplitPane) -> resetToPreferredSizes
    void setDividerLocation(javax.swing.JSplitPane,int) -> setDividerLocation
    int getLastDragLocation() -> getLastDragLocation
    void setNonContinuousLayoutDivider(java.awt.Component) -> setNonContinuousLayoutDivider
    void setNonContinuousLayoutDivider(java.awt.Component,boolean) -> setNonContinuousLayoutDivider
    java.awt.Component createDefaultNonContinuousLayoutDivider() -> createDefaultNonContinuousLayoutDivider
    boolean access$000(isf.controls.plaf.ISFSplitPaneUI) -> a
    boolean access$002(isf.controls.plaf.ISFSplitPaneUI,boolean) -> a
    int access$100(isf.controls.plaf.ISFSplitPaneUI) -> b
isf.controls.plaf.ISFSplitPaneUI$1 -> isf.controls.plaf.y:
    isf.controls.plaf.ISFSplitPaneUI this$0 -> a
    void <init>(isf.controls.plaf.ISFSplitPaneUI) -> <init>
    void paint(java.awt.Graphics) -> paint
isf.controls.plaf.ISFSplitPaneUI$ISFHorizontalLayoutManager -> isf.controls.plaf.z:
    int[] sizes -> a
    java.awt.Component[] components -> b
    int lastSplitPaneSize -> c
    boolean doReset -> d
    int axis -> e
    isf.controls.plaf.ISFSplitPaneUI this$0 -> f
    void <init>(isf.controls.plaf.ISFSplitPaneUI) -> <init>
    void <init>(isf.controls.plaf.ISFSplitPaneUI,int) -> <init>
    void layoutContainer(java.awt.Container) -> layoutContainer
    void addLayoutComponent(java.lang.String,java.awt.Component) -> addLayoutComponent
    java.awt.Dimension minimumLayoutSize(java.awt.Container) -> minimumLayoutSize
    java.awt.Dimension preferredLayoutSize(java.awt.Container) -> preferredLayoutSize
    void removeLayoutComponent(java.awt.Component) -> removeLayoutComponent
    void addLayoutComponent(java.awt.Component,java.lang.Object) -> addLayoutComponent
    float getLayoutAlignmentX(java.awt.Container) -> getLayoutAlignmentX
    float getLayoutAlignmentY(java.awt.Container) -> getLayoutAlignmentY
    void invalidateLayout(java.awt.Container) -> invalidateLayout
    java.awt.Dimension maximumLayoutSize(java.awt.Container) -> maximumLayoutSize
    void resetToPreferredSizes() -> a
    void resetSizeAt(int) -> a
    void setSizes(int[]) -> a
    int[] getSizes() -> c
    int getPreferredSizeOfComponent(java.awt.Component) -> a
    int getMinimumSizeOfComponent(java.awt.Component) -> b
    int getSizeOfComponent(java.awt.Component) -> c
    int getAvailableSize(java.awt.Dimension,java.awt.Insets) -> a
    int getInitialLocation(java.awt.Insets) -> a
    void setComponentToSize(java.awt.Component,int,int,java.awt.Insets,java.awt.Dimension) -> a
    int getSizeForPrimaryAxis(java.awt.Dimension) -> a
    int getSizeForSecondaryAxis(java.awt.Dimension) -> b
    int getSizeForPrimaryAxis(java.awt.Insets,boolean) -> a
    int getSizeForSecondaryAxis(java.awt.Insets,boolean) -> b
    void updateComponents() -> b
    void setDividerLocation(int,int) -> a
    int[] getPreferredSizes() -> d
    int[] getMinimumSizes() -> e
    void resetToPreferredSizes(int) -> b
    void distributeSpace(int) -> c
isf.controls.plaf.ISFSplitPaneUI$ISFVerticalLayoutManager -> isf.controls.plaf.A:
    isf.controls.plaf.ISFSplitPaneUI this$0 -> a
    void <init>(isf.controls.plaf.ISFSplitPaneUI) -> <init>
isf.controls.plaf.InscriptComboUI -> isf.controls.plaf.InscriptComboUI:
    void <init>() -> <init>
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void setPopSize(java.awt.Dimension,javax.swing.JComboBox) -> a
isf.controls.plaf.InscriptMenuItemUI -> isf.controls.plaf.InscriptMenuItemUI:
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void <init>() -> <init>
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
isf.controls.plaf.InscriptScrollBarUI -> isf.controls.plaf.InscriptScrollBarUI:
    void <init>() -> <init>
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void paintThumb(java.awt.Graphics,javax.swing.JComponent,java.awt.Rectangle) -> paintThumb
isf.controls.utils.CatalogueConstants -> isf.controls.c.a:
    java.lang.String pStr -> c
    java.lang.String iStr -> d
    java.lang.String oStr -> e
    java.lang.String[][] photoCatalogueNames -> a
    java.lang.String[][] photoDublinNames -> b
    java.lang.String[][] textCatalogueNames -> f
    java.lang.String[][] textDublinNames -> g
    void <init>() -> <init>
    java.lang.String getString(java.lang.Object,java.lang.String,java.lang.String,int,int) -> a
    boolean isValid(java.lang.String) -> a
    java.lang.String[][] getCatDetails(int) -> a
    java.lang.String buildCatalougeData(java.lang.String,java.util.Hashtable,int,int) -> a
    java.lang.String buildDubinData(java.lang.String,java.util.Hashtable,int,int) -> b
    void <clinit>() -> <clinit>
isf.controls.utils.CursorManager -> isf.controls.c.b:
    isf.controls.utils.CursorManager ourInstance -> b
    boolean wait -> a
    isf.controls.view.listeners.CursorListener cl -> c
    isf.controls.utils.CursorManager getInstance() -> a
    void <init>() -> <init>
    void addCursorListener(isf.controls.view.listeners.CursorListener) -> a
    void changeCursor(int) -> a
    void changeCursor(java.awt.Cursor) -> a
    java.awt.Cursor getCursor() -> b
    java.awt.Rectangle getFrameBounds() -> c
isf.controls.utils.GlassPaneManager -> isf.controls.c.c:
    isf.controls.view.containers.ISFGlassPane jpanel -> a
    javax.swing.JRootPane jrp -> b
    javax.swing.JFrame mainApp -> c
    isf.controls.utils.GlassPaneManager gpm -> d
    java.awt.Rectangle bounds -> e
    void <init>() -> <init>
    isf.controls.utils.GlassPaneManager getInstance() -> a
    void showComponent(javax.swing.JComponent,java.awt.Rectangle) -> a
    void updateControlBounds(java.awt.Rectangle) -> a
    void showComponent(javax.swing.JComponent) -> a
    void hideAll() -> b
    void setUpGlasssPane(javax.swing.JFrame) -> a
    void repaintRoot() -> f
    boolean isShowing() -> c
    java.awt.Graphics getGraphics() -> d
    java.awt.Component getComponent() -> e
isf.controls.utils.PTMUtils -> isf.controls.c.d:
    void <init>() -> <init>
    isf.ptm.formats.PTM createCopy(isf.ptm.formats.PTM) -> a
    isf.common.utils.PTMConfig createCopy(isf.common.utils.PTMConfig) -> a
    void copyPTM(java.io.File,java.io.File) -> a
isf.controls.utils.ProgressManager -> isf.controls.c.e:
    javax.swing.JComboBox box -> a
    isf.common.utils.PTMConfig ptm -> b
    void <init>() -> <init>
    void registerCombo(javax.swing.JComboBox) -> a
    void setConfig(isf.common.utils.PTMConfig) -> a
    isf.common.utils.PTMConfig getConfig() -> a
isf.controls.utils.ResolutionManager -> isf.controls.c.f:
    isf.controls.utils.ResolutionManager resolutionManager -> a
    java.awt.Dimension base -> b
    java.awt.Dimension current -> c
    isf.controls.view.listeners.ImageLoader imageLoader -> d
    java.lang.ClassLoader cl -> e
    void <init>() -> <init>
    isf.controls.utils.ResolutionManager getInstance() -> a
    void setDefaultResolution(java.awt.Dimension) -> a
    void setImageLoader(isf.controls.view.listeners.ImageLoader) -> a
    javax.swing.ImageIcon loadImage(java.lang.String) -> a
    javax.swing.ImageIcon getImageIcon(java.lang.String) -> b
    javax.swing.ImageIcon getImageIcon(javax.swing.ImageIcon) -> a
    javax.swing.ImageIcon getScaledWidthIcon(java.lang.String) -> c
    double[] getRatio() -> b
    int getFontSize(int) -> a
    int getTextColumns(int) -> b
    boolean isCurrentResolutionLower() -> c
    java.awt.Dimension getScreen() -> d
isf.controls.view.containers.CatalougeWindow -> isf.controls.d.a.a:
    isf.controls.view.controls.InscriptButton catButton -> d
    isf.controls.view.controls.InscriptButton dubButton -> e
    javax.swing.JLabel title -> f
    isf.controls.view.controls.InscriptButton close1 -> g
    isf.controls.view.controls.InscriptButton close2 -> h
    java.awt.Color bgColor -> i
    javax.swing.ImageIcon icon -> j
    javax.swing.ImageIcon titleIcon -> k
    javax.swing.ImageIcon closeRight -> l
    javax.swing.ImageIcon closeLeft -> m
    java.util.Hashtable ht -> a
    isf.controls.view.listeners.CWListener cwl -> b
    isf.controls.view.containers.InscriptTextPane cat -> c
    int width -> n
    javax.swing.JScrollPane jScrollPane1 -> o
    java.awt.event.MouseListener ml -> p
    java.awt.event.MouseMotionListener mml -> q
    int mouseX -> r
    int mouseY -> s
    int xposition -> t
    int yposition -> u
    org.apache.log4j.Logger log -> v
    void <init>() -> <init>
    void addMouseListener(java.awt.event.MouseListener) -> addMouseListener
    void addMouseMotionListener(java.awt.event.MouseMotionListener) -> addMouseMotionListener
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void showDublinData() -> a
    void showCatalougeData() -> b
    void setData(java.util.Hashtable) -> a
    java.lang.String buildCatalougeData() -> d
    java.lang.String buildDubinData() -> e
    java.lang.String getString(java.lang.Object,java.lang.String,java.lang.String) -> a
    boolean isValid(java.lang.String) -> a
    void addCWListener(isf.controls.view.listeners.CWListener) -> a
    javax.swing.ImageIcon access$000() -> c
    void <clinit>() -> <clinit>
isf.controls.view.containers.CatalougeWindow$1 -> isf.controls.d.a.b:
    isf.controls.view.containers.CatalougeWindow this$0 -> a
    void <init>(isf.controls.view.containers.CatalougeWindow) -> <init>
    java.awt.Dimension getPreferredSize() -> getPreferredSize
isf.controls.view.containers.ControlMenu -> isf.controls.d.a.c:
    void <init>() -> <init>
    void init() -> a
    void setEnabled(boolean) -> setEnabled
    void releaseControlMenu() -> b
    void resetControls() -> c
isf.controls.view.containers.ISFGlassPane -> isf.controls.d.a.d:
    javax.swing.JFrame frame -> a
    java.awt.Point point -> b
    boolean processEvent -> c
    void <init>(javax.swing.JFrame) -> <init>
    void setPoint(java.awt.Point) -> a
    void eventDispatched(java.awt.AWTEvent) -> eventDispatched
    boolean contains(int,int) -> contains
isf.controls.view.containers.ISFSplitPane -> isf.controls.d.a.e:
    int topHeight -> a
    int lastPosition -> b
    int curloc -> c
    void <init>() -> <init>
    void <init>(int,boolean,java.awt.Component,java.awt.Component,int,int) -> <init>
    void paintChildren(java.awt.Graphics) -> paintChildren
    int getMaximumDividerLocation() -> getMaximumDividerLocation
    int getMinimumDividerLocation() -> getMinimumDividerLocation
    int getOneSize() -> d
    void setOneSize(int) -> a
    void updateUI() -> updateUI
    void updateLocation() -> a
    void setDivider(int) -> b
    int getCurrentPos() -> b
    void changeImage() -> c
isf.controls.view.containers.ImagePanel -> isf.controls.d.a.f:
    java.awt.Graphics offScreen -> a
    java.awt.image.BufferedImage offImg -> b
    java.awt.Point sp -> c
    java.awt.Point ep -> d
    int ax -> e
    int ay -> f
    int aw -> g
    int ah -> h
    boolean active -> i
    boolean working -> j
    org.apache.log4j.Logger log -> l
    isf.controls.view.listeners.SizeChangeListener notifier -> k
    void <init>() -> <init>
    void addImage(javax.swing.ImageIcon) -> a
    void addImage$552c4e01() -> a
    boolean isLoading() -> b
    boolean isPTMPanel() -> c
    boolean isHSHPanel() -> d
    boolean mustCurbResize() -> e
    boolean isAtMaxLevel() -> f
    void setMessageShown(boolean) -> a
    boolean getMessageShown() -> g
    void setStart(java.awt.Point) -> a
    void setEnd(java.awt.Point) -> b
    void drawRect(java.awt.Graphics) -> a
    java.lang.String getDetails() -> h
    java.lang.String saveImage(java.lang.String,java.lang.String) -> a
    boolean isActive() -> i
    void setActive(boolean) -> b
    void setSizeNotifier(isf.controls.view.listeners.SizeChangeListener) -> a
isf.controls.view.containers.InscriptTextPane -> isf.controls.d.a.g:
    org.apache.log4j.Logger log -> a
    java.awt.Dimension dim -> b
    boolean scale -> c
    java.awt.event.MouseListener ml -> d
    java.awt.event.MouseMotionListener mml -> e
    void <init>(java.awt.Dimension) -> <init>
    void <init>(java.awt.Dimension,boolean) -> <init>
    void paint(java.awt.Graphics) -> paint
    void addMouseListener(java.awt.event.MouseListener) -> addMouseListener
    void addMouseMotionListener(java.awt.event.MouseMotionListener) -> addMouseMotionListener
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void hyperlinkUpdate(javax.swing.event.HyperlinkEvent) -> hyperlinkUpdate
isf.controls.view.containers.JIFrame -> isf.controls.d.a.h:
    java.lang.String header -> a
    java.lang.String imgName -> b
    java.lang.String size -> c
    int orgLev -> d
    int maxLev -> e
    int curLev -> f
    int wid -> g
    int hei -> h
    int w -> i
    int h -> j
    java.lang.String cpx -> k
    java.lang.String cpy -> l
    java.awt.Point temp -> m
    java.awt.Point p -> n
    java.awt.Point start -> o
    java.awt.Point end -> p
    java.awt.Rectangle oldrect -> q
    int px -> r
    int py -> s
    isf.controls.view.containers.ViewerPanel jip -> t
    boolean active -> u
    java.awt.Cursor zin -> v
    java.awt.Cursor zout -> w
    java.awt.Cursor drsel -> x
    java.awt.Cursor hando -> y
    java.awt.Cursor handc -> z
    java.awt.Cursor light -> A
    java.awt.Cursor old -> B
    int index -> C
    java.lang.String currentUrl -> D
    boolean updated -> E
    org.apache.log4j.Logger logger -> F
    javax.swing.JComponent comp -> G
    java.awt.Rectangle rect -> H
    boolean glassPaneShowing -> I
    boolean copy -> J
    void <init>() -> <init>
    void <init>(isf.controls.models.DesktopDataObject) -> <init>
    void <init>(isf.controls.models.DesktopDataObject,isf.ptm.formats.PTM) -> <init>
    void getDefVal() -> k
    void update() -> a
    void reset() -> b
    void setLevel(int,int) -> a
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void updateImg() -> l
    float levelCvt(int,int) -> b
    void calculateDiff() -> m
    void zoomOut() -> n
    void setBounds(int,int,int,int) -> setBounds
    void isActive(boolean) -> a
    java.lang.String getRet() -> c
    void setIndex(int) -> a
    int getIndex() -> d
    java.lang.String getProperties() -> e
    void resetAll() -> f
    void saveAs(java.lang.String) -> a
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    java.lang.String getImgName() -> g
    void setMode(int) -> b
    isf.controls.view.containers.ImagePanel getImagePanel() -> h
    boolean isCopy() -> i
    void setCopy(boolean) -> b
    isf.controls.view.containers.ViewerPanel access$000(isf.controls.view.containers.JIFrame) -> a
    java.awt.Cursor access$100() -> j
    void <clinit>() -> <clinit>
isf.controls.view.containers.JIFrame$1 -> isf.controls.d.a.i:
    isf.common.utils.PTMConfig val$config -> a
    isf.controls.models.DesktopDataObject val$dsk -> b
    isf.controls.view.containers.JIFrame this$0 -> c
    void <init>(isf.controls.view.containers.JIFrame,isf.common.utils.PTMConfig,isf.controls.models.DesktopDataObject) -> <init>
    void run() -> run
isf.controls.view.containers.JIFrame$2 -> isf.controls.d.a.j:
    isf.controls.view.containers.JIFrame this$0 -> a
    void <init>(isf.controls.view.containers.JIFrame) -> <init>
    void run() -> run
isf.controls.view.containers.PTMImpl -> isf.controls.d.a.k:
    void <init>() -> <init>
    void fitToSize() -> i
    void addImage(javax.swing.ImageIcon) -> a
    void addImage$552c4e01() -> a
    void addImage(isf.common.utils.PTMConfig) -> a
    void addImage(isf.common.utils.PTMConfig,isf.ptm.formats.PTM) -> a
    void addImage(isf.controls.models.DesktopDataObject) -> a
    void setDrawRect$1385ff() -> j
    java.lang.String getCurrentLevel() -> k
    void reset() -> l
    boolean isAdditionalLight() -> m
    isf.ptm.operations.Operation getPixelTransformOp() -> n
    int getActiveLight() -> o
    void setActiveLight(int) -> a
    boolean isAnimated() -> p
    void setScale(float) -> a
    float getScale() -> q
    void setAnimated(boolean) -> c
    boolean isLoading() -> b
    java.lang.String getDetails() -> h
    void fireTransform() -> r
    float getKSpec() -> s
    float getKDiff() -> t
    int getExp() -> u
    int getPTMWidth() -> v
    int getPTMHeight() -> w
    void setKSpec(float) -> b
    void setKDiff(float) -> c
    void setExp(int) -> b
    float getLuminance(int) -> c
    void setLuminance(float,int) -> a
    void setMapSampleSize(int) -> d
    void setMapBlurType(int) -> e
    void setMapKernelSize(int) -> f
    void setMapGuassianBlurSigma(float) -> d
    void refreshMap() -> x
    isf.ptm.formats.PTM getPTM() -> y
    void forceUpdate() -> z
    void setBrowser$7ca2341f() -> A
    void setEnvironmentMap$338a5bc8() -> B
    void setPixelTransformOp(isf.ptm.operations.Operation) -> a
    javax.swing.JLayeredPane getLayeredPane() -> C
    void toggleLight(boolean) -> d
    void setExtrapolation(boolean) -> e
    boolean isExtrapolation() -> D
    void detail() -> E
    void speed() -> F
    void useHint(boolean) -> f
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void setMessageShown(boolean) -> a
    boolean getMessageShown() -> g
    boolean mustCurbResize() -> e
    boolean isFrameActive() -> G
    void setFrameActive(boolean) -> g
    java.awt.Rectangle getDisplayRect() -> H
    java.awt.Dimension getCurrentSize() -> I
    void updateLightPosition(int,int) -> a
isf.controls.view.containers.PTMPanel -> isf.controls.d.a.l:
    isf.ptm.utils.LightSource[] lights -> l
    boolean lockLights -> m
    void <init>() -> <init>
    void addImage(javax.swing.ImageIcon) -> a
    void fitToSize() -> i
    void addImage$552c4e01() -> a
    void addImage(isf.common.utils.PTMConfig) -> a
    void addImage(isf.common.utils.PTMConfig,isf.ptm.formats.PTM) -> a
    void addImage(isf.controls.models.DesktopDataObject) -> a
    void setDrawRect$1385ff() -> j
    java.lang.String getCurrentLevel() -> k
    void reset() -> l
    boolean isAdditionalLight() -> m
    isf.ptm.operations.Operation getPixelTransformOp() -> n
    int getActiveLight() -> o
    void toggleLight(boolean) -> d
    boolean isAnimated() -> p
    void setScale(float) -> a
    float getScale() -> q
    void setAnimated(boolean) -> c
    boolean isLoading() -> b
    java.lang.String getDetails() -> h
    void fireTransform() -> r
    float getKSpec() -> s
    float getKDiff() -> t
    int getExp() -> u
    int getPTMWidth() -> v
    int getPTMHeight() -> w
    void setKSpec(float) -> b
    void setKDiff(float) -> c
    void setExp(int) -> b
    float getLuminance(int) -> c
    void setLuminance(float,int) -> a
    isf.ptm.formats.PTM getPTM() -> y
    void setExtrapolation(boolean) -> e
    boolean isExtrapolation() -> D
    void setSizeNotifier(isf.controls.view.listeners.SizeChangeListener) -> a
    void detail() -> E
    void speed() -> F
    void useHint(boolean) -> f
    void setActiveLight(int) -> a
    boolean isPTMPanel() -> c
    void lockLights() -> K
    boolean isLocked() -> L
    isf.ptm.utils.LightSource[] getLights() -> J
    java.awt.Rectangle getDisplayRect() -> H
    java.awt.Dimension getCurrentSize() -> I
    void updateLightPosition(int,int) -> a
isf.controls.view.containers.PTMPanelImpl -> isf.controls.d.a.m:
    org.apache.log4j.Logger log -> L
    boolean animated -> M
    boolean frameActive -> N
    boolean loading -> O
    boolean paintPosition -> P
    java.lang.Thread animator -> Q
    int mouseX -> R
    int mouseY -> S
    short[] mutex -> T
    isf.ptm.operations.Operation pixelTransformOp -> U
    isf.common.utils.SegmentUtils[] segments -> V
    int activeLight -> W
    isf.ptm.formats.PTM ptm -> X
    int curWid -> m
    int curHei -> n
    boolean dragging -> Y
    java.lang.String fName -> Z
    java.lang.String thumbname -> aa
    long size -> ab
    double zoom -> ac
    java.awt.image.BufferedImage actImg -> ad
    int divx -> ae
    int divy -> af
    float ratio -> o
    int[] pixels -> p
    int[] tiles -> ag
    int peices -> ah
    int displayWidth -> ai
    int displayHeight -> aj
    int rows -> q
    int cols -> r
    int segSize -> s
    boolean hints -> ak
    boolean isFast -> al
    boolean fixed -> am
    int width -> t
    int height -> u
    int posx -> v
    int posy -> w
    boolean contained -> an
    boolean atMaxLevel -> ao
    boolean shown -> ap
    boolean drawRect -> aq
    int obtained -> x
    boolean calculated -> ar
    boolean copied -> as
    isf.controls.view.containers.StatusPanel status -> y
    int newPX -> z
    int newPY -> A
    int newMX -> B
    int newMY -> C
    int newDW -> D
    int newDH -> E
    float factor -> F
    int MAXPIXELS -> at
    boolean thumbnailCached -> au
    float dxLight -> av
    float dyLight -> aw
    int clickXImageCoordinate -> ax
    int clickYImageCoordinate -> ay
    isf.common.utils.PTMConfig config -> G
    int times -> H
    boolean isRTI -> I
    boolean firstView -> J
    boolean multiView -> K
    void <init>() -> <init>
    void fireTransform() -> r
    java.lang.String getCurrentLevel() -> k
    void forceUpdate() -> z
    int getExp() -> u
    float getKDiff() -> t
    float getKSpec() -> s
    void setScale(float) -> a
    float getScale() -> q
    float getLuminance(int) -> c
    float getLuminance() -> K
    int getActiveLight() -> o
    void setActiveLight(int) -> a
    boolean isAdditionalLight() -> m
    isf.ptm.formats.PTM getPTM() -> y
    int getPTMHeight() -> w
    int getPTMWidth() -> v
    void loadLocalFile(java.lang.String) -> a
    void loadMViewFile(int) -> g
    void loadFile(isf.controls.models.DesktopDataObject) -> b
    void loadFile(isf.common.utils.PTMConfig) -> b
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void paint(java.awt.Graphics) -> paint
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void notImplemented() -> L
    void refreshMap() -> x
    void run() -> run
    void setBrowser$7ca2341f() -> A
    void setEnvironmentMap$338a5bc8() -> B
    void setExp(int) -> b
    void setKDiff(float) -> c
    void setKSpec(float) -> b
    void setLuminance(float,int) -> a
    void setLuminance(float) -> e
    void setMapBlurType(int) -> e
    void setMapGuassianBlurSigma(float) -> d
    void setMapKernelSize(int) -> f
    void setMapSampleSize(int) -> d
    void setPixelTransformOp(isf.ptm.operations.Operation) -> a
    isf.ptm.operations.Operation getPixelTransformOp() -> n
    void setAnimated(boolean) -> c
    boolean isAnimated() -> p
    void saveThumbnail() -> M
    void start() -> N
    javax.swing.JLayeredPane getLayeredPane() -> C
    void addImage(javax.swing.ImageIcon) -> a
    void addImage$552c4e01() -> a
    void addImage(isf.common.utils.PTMConfig) -> a
    void addImage(isf.controls.models.DesktopDataObject) -> a
    boolean isLoading() -> b
    boolean isPTMPanel() -> c
    boolean isHSHPanel() -> d
    void zoomToFitDisplay() -> O
    java.awt.Dimension getCurrentSize() -> I
    java.awt.Dimension getDisplaySize() -> P
    java.lang.String getDetails() -> h
    void speed() -> F
    void detail() -> E
    void useHint(boolean) -> f
    java.lang.String arrayToString(int[]) -> a
    java.lang.String arrayToString(float[]) -> a
    void toggleLight(boolean) -> d
    void setExtrapolation(boolean) -> e
    boolean isExtrapolation() -> D
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
    void componentShown(java.awt.event.ComponentEvent) -> componentShown
    void componentHidden(java.awt.event.ComponentEvent) -> componentHidden
    void fitToSize() -> i
    void reset() -> l
    void setSingleLight() -> Q
    void calculateValuesAtFullSize() -> R
    void performResizeOnPTM() -> S
    boolean isAtMaxLevel() -> f
    void setDrawRect$1385ff() -> j
    void setMessageShown(boolean) -> a
    boolean getMessageShown() -> g
    void addImage(isf.common.utils.PTMConfig,isf.ptm.formats.PTM) -> a
    boolean mustCurbResize() -> e
    void updateLight() -> T
    void calcLightVector() -> U
    void calcLightVector(int) -> h
    void setFrameActive(boolean) -> g
    boolean isFrameActive() -> G
    java.awt.Rectangle getDisplayRect() -> H
    float getFactor() -> V
    void updateLightPosition(int,int) -> a
    void setDefaultLight() -> W
    void setStart$3548002f(java.awt.Point) -> c
    void setEnd(java.awt.Point) -> b
    java.lang.String saveImage(java.lang.String,java.lang.String) -> a
    java.lang.String getDisplayText() -> X
    java.lang.String access$002(isf.controls.view.containers.PTMPanelImpl,java.lang.String) -> a
    java.lang.String access$000(isf.controls.view.containers.PTMPanelImpl) -> a
    java.lang.String access$102(isf.controls.view.containers.PTMPanelImpl,java.lang.String) -> b
    long access$202(isf.controls.view.containers.PTMPanelImpl,long) -> a
    isf.ptm.formats.PTM access$302(isf.controls.view.containers.PTMPanelImpl,isf.ptm.formats.PTM) -> a
    isf.ptm.formats.PTM access$300(isf.controls.view.containers.PTMPanelImpl) -> b
    void access$400(isf.controls.view.containers.PTMPanelImpl) -> c
    org.apache.log4j.Logger access$500(isf.controls.view.containers.PTMPanelImpl) -> d
    void access$600(isf.controls.view.containers.PTMPanelImpl) -> e
    boolean access$702(isf.controls.view.containers.PTMPanelImpl,boolean) -> a
    long access$200(isf.controls.view.containers.PTMPanelImpl) -> f
    void access$800(isf.controls.view.containers.PTMPanelImpl) -> g
    short[] access$900(isf.controls.view.containers.PTMPanelImpl) -> h
    boolean access$1002(isf.controls.view.containers.PTMPanelImpl,boolean) -> b
    isf.common.utils.SegmentUtils[] access$1100(isf.controls.view.containers.PTMPanelImpl) -> i
    int access$1200(isf.controls.view.containers.PTMPanelImpl) -> j
    int access$1300(isf.controls.view.containers.PTMPanelImpl) -> k
    int access$1400(isf.controls.view.containers.PTMPanelImpl) -> l
    boolean access$1500(isf.controls.view.containers.PTMPanelImpl) -> m
    int access$1302(isf.controls.view.containers.PTMPanelImpl,int) -> a
    int access$1402(isf.controls.view.containers.PTMPanelImpl,int) -> b
    int access$1600(isf.controls.view.containers.PTMPanelImpl) -> n
    isf.ptm.operations.Operation access$1700(isf.controls.view.containers.PTMPanelImpl) -> o
    int[] access$1800(isf.controls.view.containers.PTMPanelImpl) -> p
    void <clinit>() -> <clinit>
isf.controls.view.containers.PTMPanelImpl$1 -> isf.controls.d.a.n:
    long start -> b
    java.lang.String val$ptmFile -> c
    isf.controls.view.containers.PTMPanelImpl this$0 -> a
    void <init>(isf.controls.view.containers.PTMPanelImpl,java.lang.String) -> <init>
    java.lang.Object construct() -> a
    void finished() -> b
isf.controls.view.containers.PTMPanelImpl$1$1 -> isf.controls.d.a.o:
    isf.controls.view.containers.PTMPanelImpl$1 this$1 -> a
    void <init>(isf.controls.view.containers.PTMPanelImpl$1) -> <init>
    void run() -> run
isf.controls.view.containers.PTMPanelImpl$2 -> isf.controls.d.a.p:
    long start -> b
    int val$index -> c
    isf.controls.view.containers.PTMPanelImpl this$0 -> a
    void <init>(isf.controls.view.containers.PTMPanelImpl,int) -> <init>
    java.lang.Object construct() -> a
    void finished() -> b
isf.controls.view.containers.PTMPanelImpl$2$1 -> isf.controls.d.a.q:
    isf.controls.view.containers.PTMPanelImpl$2 this$1 -> a
    void <init>(isf.controls.view.containers.PTMPanelImpl$2) -> <init>
    void run() -> run
isf.controls.view.containers.PTMPanelImpl$3 -> isf.controls.d.a.r:
    java.lang.String val$ptmFile -> a
    isf.controls.view.containers.PTMPanelImpl this$0 -> b
    void <init>(isf.controls.view.containers.PTMPanelImpl,java.lang.String) -> <init>
    java.lang.Object construct() -> a
    void finished() -> b
isf.controls.view.containers.PTMPanelImpl$4 -> isf.controls.d.a.s:
    isf.controls.view.containers.PTMPanelImpl this$0 -> a
    void <init>(isf.controls.view.containers.PTMPanelImpl) -> <init>
    java.lang.Object construct() -> a
    void finished() -> b
isf.controls.view.containers.PTMPanelImpl$FetchImage -> isf.controls.d.a.t:
    java.lang.String file -> a
    int index -> b
    isf.ptm.formats.PTM ptm -> c
    int row -> d
    int col -> e
    int tilew -> f
    int tileh -> g
    int band -> h
    int top -> i
    int left -> j
    int tileIndex -> k
    isf.controls.view.containers.PTMPanelImpl this$0 -> l
    void <init>(isf.controls.view.containers.PTMPanelImpl,isf.common.utils.SegmentUtils,isf.ptm.formats.PTM) -> <init>
    void run() -> run
isf.controls.view.containers.PTMPanelImpl$UpdateProgress -> isf.controls.d.a.u:
    boolean changed -> d
    javax.swing.Timer timer -> a
    int count -> b
    isf.controls.view.containers.PTMPanelImpl this$0 -> c
    void startMonitor() -> a
    void <init>(isf.controls.view.containers.PTMPanelImpl) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void updateFinalize() -> b
isf.controls.view.containers.PTMPanelImpl$UpdateProgress$1 -> isf.controls.d.a.v:
    isf.controls.view.containers.PTMPanelImpl$UpdateProgress this$1 -> a
    void <init>(isf.controls.view.containers.PTMPanelImpl$UpdateProgress) -> <init>
    void run() -> run
isf.controls.view.containers.ProgressPane -> isf.controls.d.a.w:
    isf.common.utils.PTMConfig ptm -> a
    javax.swing.JPanel panel -> b
    javax.swing.JProgressBar progress -> c
    org.apache.log4j.Logger log -> d
    void <init>() -> <init>
    void registerBar() -> a
    java.lang.String fetchFileNames() -> b
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
isf.controls.view.containers.ProgressPane$1 -> isf.controls.d.a.x:
    isf.controls.view.containers.ProgressPane this$0 -> a
    void <init>(isf.controls.view.containers.ProgressPane) -> <init>
    java.awt.Dimension getPreferredSize() -> getPreferredSize
isf.controls.view.containers.SidPanel -> isf.controls.d.a.y:
    javax.swing.ImageIcon ic -> l
    int width -> m
    int height -> n
    int maxlevel -> o
    int curlevel -> p
    java.lang.String imgName -> q
    java.lang.String fileSize -> r
    boolean firstTime -> s
    boolean shown -> t
    void <init>() -> <init>
    void addImage$552c4e01() -> a
    void addImage(javax.swing.ImageIcon) -> a
    void paint(java.awt.Graphics) -> paint
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    boolean isAtMaxLevel() -> f
    boolean isLoading() -> b
    java.lang.String getDetails() -> h
    int getImgWidth() -> i
    void setImgWidth(int) -> a
    int getImgHeight() -> j
    void setImgHeight(int) -> b
    int getMaxLevel() -> k
    void setMaxLevel(int) -> c
    int getCurLevel() -> l
    void setCurLevel(int) -> d
    java.lang.String getFileSize() -> m
    void setFileSize(java.lang.String) -> a
    java.lang.String getImgName() -> n
    void setImgName(java.lang.String) -> b
    void updateSizeInformation() -> o
    void setMessageShown(boolean) -> a
    boolean getMessageShown() -> g
    boolean mustCurbResize() -> e
isf.controls.view.containers.StatusPanel -> isf.controls.d.a.z:
    isf.controls.view.controls.ISFProgressBar bar -> a
    void <init>() -> <init>
    void showStatus(java.lang.String) -> a
    void start() -> a
    void stop() -> b
isf.controls.view.containers.TrimmedPanel -> isf.controls.d.a.A:
    java.awt.Insets ins -> a
    void <init>() -> <init>
    void <init>(java.awt.Insets) -> <init>
    java.awt.Insets getInsets() -> getInsets
isf.controls.view.containers.ViewDesktop -> isf.controls.d.a.B:
    isf.controls.view.listeners.ViewDesktopListener vdListener -> a
    isf.controls.view.containers.ViewDesktopPanels vdtPanels -> b
    java.awt.Container contentPane -> c
    java.util.Vector v -> d
    java.awt.Frame parent -> e
    isf.controls.view.containers.CatalougeWindow cp -> f
    java.awt.Rectangle old -> g
    java.awt.Point p -> h
    java.awt.Point temp -> i
    int mouseX -> j
    int mouseY -> k
    int xposition -> l
    int yposition -> m
    void <init>() -> <init>
    void setFrame(java.awt.Frame) -> a
    void <init>(java.awt.Frame) -> <init>
    void init() -> d
    void addDataObject(isf.controls.models.DesktopDataObject) -> a
    void addDummy(java.lang.String) -> a
    void addViewDesktopListener(isf.controls.view.listeners.ViewDesktopListener) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    java.awt.Insets getInsets() -> getInsets
    isf.controls.view.listeners.ViewDesktopListener getVDL() -> a
    java.awt.Dimension getCatButtonSize() -> e
    boolean getNotification() -> f
    void setSelectedData(java.util.Vector) -> a
    void activationChanged() -> b
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void reset() -> c
isf.controls.view.containers.ViewDesktopPanels -> isf.controls.d.a.C:
    java.awt.event.ActionListener al -> e
    isf.controls.view.controls.ViewDesktopButton emptyButton -> f
    isf.controls.view.controls.InscriptButton catButton -> a
    isf.controls.view.controls.InscriptButton dublincatButton -> b
    isf.controls.view.controls.ViewDesktopButton button -> g
    javax.swing.JPanel emptyPanel -> h
    javax.swing.JPanel dataPanel -> i
    javax.swing.JPanel catalogPanel -> c
    java.util.Vector imageList -> j
    int activeIndex -> k
    isf.controls.view.listeners.ActivationListener acl -> l
    boolean notified -> m
    int index -> n
    boolean border1 -> o
    boolean border2 -> p
    java.util.Vector selectedData -> q
    java.lang.String mode -> d
    java.lang.String appName -> r
    org.apache.log4j.Logger logger -> s
    void <init>() -> <init>
    void init() -> e
    void addDataObject(isf.controls.models.DesktopDataObject) -> a
    void addDummy(java.lang.String) -> a
    java.util.Vector getDataList() -> a
    void addActionListener(java.awt.event.ActionListener) -> a
    void addActivationListener(isf.controls.view.listeners.ActivationListener) -> a
    java.awt.Insets getInsets() -> getInsets
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void minimized(java.lang.String) -> b
    void activated(java.lang.String) -> c
    void setSelectedData(java.util.Vector) -> a
    java.util.Hashtable getActiveImageData() -> b
    void deleted(java.lang.String) -> d
    void setNotification(java.lang.String) -> e
    boolean getNotification() -> c
    void buttonSelected(java.lang.String) -> f
    void reset() -> d
isf.controls.view.containers.ViewerPanel -> isf.controls.d.a.D:
    isf.controls.view.containers.ImagePanel panel -> a
    isf.controls.view.containers.StatusPanel status -> b
    java.lang.String type -> c
    javax.swing.JLabel label -> d
    void <init>(java.lang.String) -> <init>
    isf.controls.view.containers.ImagePanel getPanel() -> a
    isf.controls.view.containers.StatusPanel getStatus() -> b
    void updateSize(java.lang.String) -> a
isf.controls.view.controls.ISFButton -> isf.controls.d.b.a:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void setSelected(boolean) -> setSelected
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Insets getInsets() -> getInsets
isf.controls.view.controls.ISFProgressBar -> isf.controls.d.b.b:
    int SLOW -> a
    int speed -> b
    javax.swing.Timer timer -> c
    boolean running -> d
    java.awt.Color bgColor -> e
    java.awt.Color forecolor -> f
    java.awt.Color barBgColor -> g
    java.util.ArrayList bars -> h
    boolean rectsInitialized -> i
    java.awt.Dimension size -> j
    int LEFT -> k
    int RIGHT -> l
    int HIGH -> m
    int MED -> n
    int LOW -> o
    int OFF -> p
    int pos -> q
    int direction -> r
    java.lang.String message -> s
    java.awt.image.BufferedImage backBuffer -> t
    java.util.HashMap colorMap -> u
    void <init>(java.awt.Color) -> <init>
    java.awt.Color getBackgroundColor() -> c
    boolean isRunning() -> d
    void setText(java.lang.String) -> a
    void setBackgroundColor(java.awt.Color) -> a
    void setForegroundColor(java.awt.Color) -> b
    java.awt.Color getBarBackgroundColor() -> e
    void setBarBackgroundColor(java.awt.Color) -> c
    void setBarColor(java.awt.Color) -> d
    java.awt.Color getLighterColor(java.awt.Color) -> e
    void paint(java.awt.Graphics) -> paint
    java.awt.Color getStateColor(int) -> a
    void drawBar(java.awt.Graphics2D,java.awt.Color,java.awt.Rectangle) -> a
    void drawBar(java.awt.Graphics2D,java.awt.Color,int,int,int,int) -> a
    void updateAnimation() -> f
    void stopAnimation() -> a
    void initializeBars() -> g
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void traditional() -> h
    void startAnimation() -> b
    void setAnimationSpeed(int) -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void <clinit>() -> <clinit>
isf.controls.view.controls.ISFProgressBar$Bar -> isf.controls.d.b.c:
    int state -> a
    java.awt.Rectangle rect -> b
    boolean stateModified -> c
    boolean sizeModified -> d
    isf.controls.view.controls.ISFProgressBar this$0 -> e
    void <init>(isf.controls.view.controls.ISFProgressBar,int) -> <init>
    boolean isRectDefined() -> d
    void setRect(java.awt.Rectangle) -> a
    java.awt.Rectangle getRect() -> a
    boolean isStateModified() -> b
    void setStateModified(boolean) -> a
    int getState() -> c
    void setState(int) -> a
    void setSizeModified() -> e
    boolean isSizeModified() -> f
isf.controls.view.controls.ISFSlider -> isf.controls.d.b.d:
    void <init>(int,int) -> <init>
isf.controls.view.controls.InscriptBorder -> isf.controls.d.b.e:
    java.awt.Color col -> a
    void <init>(java.awt.Color) -> <init>
    java.awt.Insets getBorderInsets(java.awt.Component) -> getBorderInsets
    boolean isBorderOpaque() -> isBorderOpaque
    void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int) -> paintBorder
isf.controls.view.controls.InscriptButton -> isf.controls.d.b.f:
    java.lang.String imageUrl -> a
    void <init>(java.lang.String) -> <init>
    void setScaledStatus(boolean) -> a
    void <init>(javax.swing.ImageIcon) -> <init>
    java.awt.Dimension getPreferredSize() -> getPreferredSize
isf.controls.view.controls.IsfComboBox -> isf.controls.d.b.g:
    int popupWidth -> a
    void <init>(javax.swing.ComboBoxModel) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void <init>(java.util.Vector) -> <init>
    void setPopupWidth(int) -> a
    java.awt.Dimension getPopupSize() -> a
isf.controls.view.controls.SidDesktop -> isf.controls.d.b.h:
    org.apache.log4j.Logger log -> c
    int ZIN -> d
    int ZOUT -> e
    int SZ -> f
    int PAN -> g
    int PROP -> h
    int FIT -> i
    int ABT -> j
    int SAVE -> k
    int PTM -> l
    int SELECT -> m
    boolean masked -> a
    java.util.Vector avail -> n
    javax.swing.JDesktopPane jp -> o
    isf.controls.view.containers.JIFrame[] frames -> p
    int count -> q
    isf.controls.view.controls.SidToolbar sidtoolbar -> b
    java.awt.Cursor current -> r
    boolean loading -> s
    java.lang.String about -> t
    void <init>() -> <init>
    java.awt.Insets getInsets() -> getInsets
    javax.swing.border.Border getBorder() -> getBorder
    java.lang.String addImage(isf.controls.models.DesktopDataObject) -> a
    void performAction(int) -> a
    void internalFrameClosing(javax.swing.event.InternalFrameEvent) -> internalFrameClosing
    void internalFrameClosed(javax.swing.event.InternalFrameEvent) -> internalFrameClosed
    void internalFrameOpened(javax.swing.event.InternalFrameEvent) -> internalFrameOpened
    void internalFrameIconified(javax.swing.event.InternalFrameEvent) -> internalFrameIconified
    void internalFrameDeiconified(javax.swing.event.InternalFrameEvent) -> internalFrameDeiconified
    void internalFrameActivated(javax.swing.event.InternalFrameEvent) -> internalFrameActivated
    void internalFrameDeactivated(javax.swing.event.InternalFrameEvent) -> internalFrameDeactivated
    void resize(java.awt.Rectangle) -> a
    java.lang.String getActive() -> a
    void setActive(java.lang.String) -> a
    java.lang.String checkImage(isf.controls.models.DesktopDataObject) -> b
    void updateCount(int) -> b
    void reset() -> b
    void deleteControl() -> e
    java.lang.String addImage(isf.controls.models.DesktopDataObject,isf.ptm.formats.PTM) -> a
    boolean canLoad() -> c
    void stopLoad() -> d
    void <clinit>() -> <clinit>
isf.controls.view.controls.SidToolbar -> isf.controls.d.b.i:
    org.apache.log4j.Logger log -> b
    int index -> c
    isf.controls.view.listeners.ViewDesktopListener vdl -> a
    boolean spaceDown -> d
    boolean controlDown -> e
    java.lang.String curDir -> f
    java.lang.String appMode -> g
    java.lang.String appName -> h
    isf.controls.view.controls.ISFButton[] ptmTools -> i
    isf.controls.view.controls.ISFButton btnOpen -> j
    isf.controls.view.controls.ISFButton btnDnl -> k
    isf.controls.view.controls.ISFButton btnZin -> l
    isf.controls.view.controls.ISFButton btnZout -> m
    isf.controls.view.controls.ISFButton btnPan -> n
    isf.controls.view.controls.ISFButton btnSelZoom -> o
    isf.controls.view.controls.ISFButton btnFit -> p
    isf.controls.view.controls.ISFButton btnProp -> q
    isf.controls.view.controls.ISFButton btnAbt -> r
    isf.controls.view.controls.ISFButton btnSave -> s
    isf.controls.view.controls.ISFButton btnScreen -> t
    void <init>() -> <init>
    void addVDListener(isf.controls.view.listeners.ViewDesktopListener) -> a
    void setCommonButtons(boolean) -> a
    void setPTMButtons(boolean) -> b
    void initComponents() -> c
    void btnCopyActionPerformed$69169593() -> d
    void btnPanActionPerformed(java.awt.event.ActionEvent) -> a
    void btnZoutActionPerformed(java.awt.event.ActionEvent) -> b
    void btnZinActionPerformed(java.awt.event.ActionEvent) -> c
    void btnDnlActionPerformed$69169593() -> e
    void btnSelZoomActionPerformed(java.awt.event.ActionEvent) -> d
    void btnFitActionPerformed$413f16b() -> f
    void btnPropActionPerformed$69169593() -> g
    void btnAbtActionPerformed$69169593() -> h
    void btnSaveActionPerformed$69169593() -> i
    void btnLightActionPerformed$69169593() -> j
    void btnScreenActionPerformed(isf.controls.view.controls.ISFButton) -> a
    void btnOpenActionPerformed$69169593() -> k
    boolean isFloatable() -> isFloatable
    java.awt.Insets getMargin() -> getMargin
    void setEnabledButtons() -> l
    void updateComp(isf.controls.view.controls.ISFButton) -> b
    isf.controls.view.controls.ISFButton getSelected() -> m
    void updateDefault() -> a
    boolean trapKeys() -> b
    void fireKeyEvent(java.awt.event.KeyEvent) -> a
    void setupZoom(boolean) -> c
    void setupPan() -> n
    void setupSelZoom() -> o
    void access$000(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> a
    void access$100(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> b
    void access$200(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> c
    void access$300(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> d
    void access$400(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> e
    void access$500(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> f
    void access$600(isf.controls.view.controls.SidToolbar,isf.controls.view.controls.ISFButton) -> a
    void access$700(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> g
    void access$800(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> h
    void access$900(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> i
    void access$1000(isf.controls.view.controls.SidToolbar,isf.controls.view.controls.ISFButton) -> b
    void access$1100(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> j
    void access$1200(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> k
    void <clinit>() -> <clinit>
isf.controls.view.controls.SidToolbar$1 -> isf.controls.d.b.j:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$10 -> isf.controls.d.b.k:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$11 -> isf.controls.d.b.l:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$12 -> isf.controls.d.b.m:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$13 -> isf.controls.d.b.n:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$14 -> isf.controls.d.b.o:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    boolean accept(java.io.File) -> accept
    java.lang.String getDescription() -> getDescription
isf.controls.view.controls.SidToolbar$2 -> isf.controls.d.b.p:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$3 -> isf.controls.d.b.q:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$4 -> isf.controls.d.b.r:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$5 -> isf.controls.d.b.s:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$6 -> isf.controls.d.b.t:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$7 -> isf.controls.d.b.u:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$8 -> isf.controls.d.b.v:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$9 -> isf.controls.d.b.w:
    isf.controls.view.controls.SidToolbar this$0 -> a
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.ViewDesktopButton -> isf.controls.d.b.x:
    isf.controls.models.DesktopDataObject object -> a
    java.awt.Dimension dim -> b
    java.awt.Color fgColor -> c
    java.awt.Color pfg -> d
    java.awt.Color selectedColor -> e
    java.awt.Color sbgColor -> f
    java.awt.Color bgColor -> g
    void <init>(java.lang.String,javax.swing.ImageIcon,boolean) -> <init>
    void <init>(java.lang.String,java.lang.String,boolean) -> <init>
    void <init>(java.lang.String,java.lang.String,boolean,byte) -> <init>
    void <init>(isf.controls.models.DesktopDataObject,java.lang.String,boolean) -> <init>
    java.awt.Insets getInsets() -> getInsets
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void setSelected(boolean) -> setSelected
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    isf.controls.models.DesktopDataObject getObject() -> a
    void <clinit>() -> <clinit>
isf.controls.view.gui.ISFDesktopManager -> isf.controls.d.c.a:
    boolean isDragging -> a
    int frmWidth -> b
    int frmHeight -> c
    int FRMDIM -> d
    int noPTMS -> e
    org.apache.log4j.Logger log -> f
    void <init>() -> <init>
    void addPTMs() -> a
    void closePTMs() -> b
    void resetPTMs() -> c
    void beginDraggingFrame(javax.swing.JComponent) -> beginDraggingFrame
    void endDraggingFrame(javax.swing.JComponent) -> endDraggingFrame
    void iconifyFrame(javax.swing.JInternalFrame) -> iconifyFrame
    void maximizeFrame(javax.swing.JInternalFrame) -> maximizeFrame
    void resizeFrame(javax.swing.JComponent,int,int,int,int) -> resizeFrame
    void <clinit>() -> <clinit>
isf.controls.view.gui.InscriptListCellRenderer -> isf.controls.d.c.b:
    void <init>() -> <init>
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
isf.controls.view.gui.InscriptListCellRenderer$1 -> isf.controls.d.c.c:
    isf.controls.view.gui.InscriptListCellRenderer this$0 -> a
    void <init>(isf.controls.view.gui.InscriptListCellRenderer) -> <init>
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
isf.controls.view.gui.VerticalLayout -> isf.controls.d.c.d:
    int hy -> a
    int wx -> b
    void <init>() -> <init>
    void addLayoutComponent(java.lang.String,java.awt.Component) -> addLayoutComponent
    void removeLayoutComponent(java.awt.Component) -> removeLayoutComponent
    void layoutContainer(java.awt.Container) -> layoutContainer
    java.awt.Dimension preferredLayoutSize(java.awt.Container) -> preferredLayoutSize
    java.awt.Dimension minimumLayoutSize(java.awt.Container) -> minimumLayoutSize
isf.controls.view.listeners.ActivationListener -> isf.controls.d.d.a:
    void activationChanged() -> b
isf.controls.view.listeners.ActiveXListener -> isf.controls.d.d.b:
    void minimized(java.lang.String) -> b
    void activated(java.lang.String) -> c
    void deleted(java.lang.String) -> d
    void setNotification(java.lang.String) -> e
isf.controls.view.listeners.CWListener -> isf.controls.d.d.c:
    void buttonSelected(java.lang.String) -> f
isf.controls.view.listeners.CursorListener -> isf.controls.d.d.d:
    void changeCursor(int) -> a
    void changeCursor(java.awt.Cursor) -> a
    java.awt.Cursor getCursor() -> getCursor
    java.awt.Rectangle getFrameBounds() -> a
isf.controls.view.listeners.ImageLoader -> isf.controls.d.d.e:
    javax.swing.ImageIcon loadImage(java.lang.String) -> a
isf.controls.view.listeners.ImageLoaderListener -> isf.controls.d.d.f:
    void putImage(isf.controls.models.DesktopDataObject) -> a
    void addDesktopData(isf.controls.models.DesktopDataObject) -> b
    void putImage(isf.controls.models.DesktopDataObject,isf.ptm.formats.PTM) -> a
isf.controls.view.listeners.KeyHandler -> isf.controls.d.d.g:
    boolean trapKeys() -> b
    void fireKeyEvent(java.awt.event.KeyEvent) -> a
isf.controls.view.listeners.PTMFrameChangeListener -> isf.controls.d.d.h:
    void resetControls() -> c
isf.controls.view.listeners.SizeChangeListener -> isf.controls.d.d.i:
    void updateSize(java.lang.String) -> a
isf.controls.view.listeners.SortListener -> isf.controls.d.d.j:
    void sort$552c4e01() -> a
    void resetSort() -> b
isf.controls.view.listeners.ViewDesktopListener -> isf.controls.d.d.k:
    java.lang.String addImage(isf.controls.models.DesktopDataObject) -> a
    java.lang.String addImage(isf.controls.models.DesktopDataObject,isf.ptm.formats.PTM) -> a
    java.lang.String checkImage(isf.controls.models.DesktopDataObject) -> b
    void performAction(int) -> a
isf.ptm.controls.EnvironmentMapPanel -> isf.a.a.a:
    isf.ptm.graphics.EnvironmentMap environmentMap -> a
    int[] displayBuffer -> b
    int[] savedBuffer -> c
    isf.ptm.controls.EnvironmentMapPanel$EnvironmentMapCanvas emc -> d
    java.awt.image.BufferedImage displayImage -> e
    int startX -> f
    int startY -> g
    double[] cos -> h
    double[] sin -> i
    isf.ptm.controls.PTMWindow ptmw -> j
    isf.ptm.controls.EnvironmentMapPanel$EnvironmentMapCanvas getCanvas() -> c
    void setPTMWindow(isf.ptm.controls.PTMWindow) -> a
    void <init>() -> <init>
    void _initDraw() -> d
    void _initEMP() -> e
    void unsetEnvironmentMap() -> f
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> a
    void redraw() -> b
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> a
    void _setEM(isf.ptm.graphics.EnvironmentMap) -> b
    void <init>(isf.ptm.graphics.EnvironmentMap,isf.ptm.controls.PTMWindow) -> <init>
    void init(isf.ptm.graphics.EnvironmentMap,isf.ptm.controls.PTMWindow) -> a
    void _mDrag(java.awt.event.MouseEvent) -> a
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void _rotateTheta(int) -> a
    int xlateX(int) -> b
    int xlateY(int) -> c
    void rotate(int) -> d
    int[] access$000(isf.ptm.controls.EnvironmentMapPanel) -> a
    isf.ptm.graphics.EnvironmentMap access$100(isf.ptm.controls.EnvironmentMapPanel) -> b
isf.ptm.controls.EnvironmentMapPanel$EnvironmentMapCanvas -> isf.a.a.b:
    isf.ptm.controls.EnvironmentMapPanel this$0 -> a
    void <init>(isf.ptm.controls.EnvironmentMapPanel) -> <init>
    void paintComponent(java.awt.Graphics) -> paintComponent
    void _pc(java.awt.Graphics) -> a
isf.ptm.controls.PTMCanvas -> isf.a.a.c:
    int MEMORY_IMAGE_SOURCE -> g
    int BUFFERED_IMAGE -> h
    int desiredWidth -> a
    int desiredHeight -> b
    int displayWidth -> c
    int displayHeight -> d
    int offsetX -> i
    int offsetY -> j
    boolean hints -> e
    boolean isFast -> f
    boolean fixed -> k
    void <init>() -> <init>
    isf.ptm.controls.PTMCanvas _createCanvas(int,int,int) -> a
    boolean isFast() -> c
    isf.ptm.controls.PTMCanvas createPTMCanvas(int,int,int) -> b
    void useHint(boolean) -> a
    void speed() -> a
    void detail() -> b
    void fixedSize(boolean) -> b
    void setDisplayWidth(int) -> a
    void setDisplayHeight(int) -> b
    void setOffsetY(int) -> c
    void setOffsetX(int) -> d
    int getDisplayWidth() -> d
    int getDisplayHeight() -> e
    void paint(java.awt.Graphics) -> paint
isf.ptm.controls.PTMCanvasBufferedImage -> isf.a.a.d:
    java.awt.image.BufferedImage image -> g
    float ratio -> h
    int maxWidth -> i
    int maxHeight -> j
    int cachedWidth -> k
    int cachedHeight -> l
    int posX -> m
    int posY -> n
    java.awt.image.BufferedImage getImage() -> c
    void <init>(int,int) -> <init>
    void _initImage(int,int) -> a
    void paintComponent(java.awt.Graphics) -> paintComponent
    void _initPC(java.awt.Graphics) -> a
    void speed() -> a
    void detail() -> b
    void dumpAvgValues() -> d
    void resize() -> e
    void _reSize() -> f
    void setDesiredViewSize(java.awt.Dimension,java.awt.Dimension,int,int) -> a
    java.awt.Dimension getCurrentSize() -> g
    void mouseClicked$161a084() -> h
    void mousePressed$161a084() -> i
    void mouseReleased$161a084() -> j
    void mouseEntered$161a084() -> k
    void mouseExited$161a084() -> l
isf.ptm.controls.PTMWindow -> isf.a.a.e:
    void fireTransform() -> r
    float getKSpec() -> s
    float getKDiff() -> t
    int getExp() -> u
    int getPTMWidth() -> v
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getPTMHeight() -> w
    void setKSpec(float) -> b
    void setKDiff(float) -> c
    void setExp(int) -> b
    float getLuminance(int) -> c
    void setLuminance(float,int) -> a
    void setMapSampleSize(int) -> d
    void setMapBlurType(int) -> e
    void setMapKernelSize(int) -> f
    void setMapGuassianBlurSigma(float) -> d
    void refreshMap() -> x
    isf.ptm.formats.PTM getPTM() -> y
    void forceUpdate() -> z
    void setBrowser$7ca2341f() -> A
    void setEnvironmentMap$338a5bc8() -> B
    void setPixelTransformOp(isf.ptm.operations.Operation) -> a
    javax.swing.JLayeredPane getLayeredPane() -> C
    void setExtrapolation(boolean) -> e
    boolean isExtrapolation() -> D
    boolean isFrameActive() -> G
    void setFrameActive(boolean) -> g
isf.ptm.fileio.HSHReader -> isf.a.b.a:
    isf.ptm.formats.HSH ptm -> a
    java.lang.String version -> b
    java.io.InputStream __in -> c
    boolean DEBUG -> d
    boolean reset -> e
    int type -> f
    int[] details -> g
    boolean fromRTI -> h
    isf.common.request.RequestDispatcherProxy rdp -> i
    isf.common.request.ImageRequestProxy irp -> j
    isf.common.request.PTMRequestProxy prp -> k
    void reset(boolean) -> a
    void <init>(java.io.InputStream,boolean,int[],int) -> <init>
    void <init>(java.io.InputStream,boolean) -> <init>
    void setVersion(java.lang.String) -> a
    void setDebug(boolean) -> b
    isf.ptm.formats.PTM _read() -> d
    isf.ptm.formats.PTM readPTM() -> a
    void <init>() -> <init>
    isf.common.request.RequestDispatcherProxy getRequestDispatcher() -> b
    isf.common.request.ImageRequestProxy getImageRequestProxy() -> e
    isf.common.request.PTMRequestProxy getPTMRequestProxy() -> c
isf.ptm.fileio.HSHWriter -> isf.a.b.b:
    void <init>() -> <init>
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> a
isf.ptm.fileio.JPEGLRGBReader -> isf.a.b.c:
    java.io.InputStream __in -> a
    int type -> b
    int basis -> c
    boolean reset -> d
    java.lang.String version -> e
    org.apache.log4j.Logger log -> f
    isf.ptm.formats.PTM _initRead() -> b
    void reset(boolean) -> a
    void setVersion(java.lang.String) -> a
    void <init>(java.io.InputStream) -> <init>
    isf.ptm.formats.PTM readPTM() -> a
    java.awt.image.BufferedImage invert(java.awt.image.BufferedImage) -> a
    int[] invert(int[]) -> a
    int[] convert(byte[]) -> a
    int[] combine(int[],byte[]) -> a
    int indexOf(int,int[]) -> a
    void correctCoeff(int[],java.io.ByteArrayInputStream,int,int) -> a
    int[] flip(int[],int,int) -> a
isf.ptm.fileio.LRGBReader -> isf.a.b.d:
    isf.ptm.formats.BLRGBPTM ptm -> a
    java.lang.String version -> b
    java.io.InputStream __in -> c
    boolean DEBUG -> d
    boolean reset -> e
    boolean fromRTI -> f
    int type -> g
    int basis -> h
    isf.controls.view.listeners.ActiveXListener al -> i
    void reset(boolean) -> a
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,boolean) -> <init>
    void setVersion(java.lang.String) -> a
    void setDebug(boolean) -> b
    isf.ptm.formats.PTM _initRead() -> b
    isf.ptm.formats.PTM readPTM() -> a
    void <init>() -> <init>
    void registerActivationListener(isf.controls.view.listeners.ActiveXListener) -> a
    void minimized(java.lang.String) -> b
    void activated(java.lang.String) -> c
    void deleted(java.lang.String) -> d
    void setNotification(java.lang.String) -> e
isf.ptm.fileio.LRGBWriter -> isf.a.b.e:
    void <init>() -> <init>
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> a
    void _initWrite(isf.ptm.formats.PTM,java.io.OutputStream) -> b
isf.ptm.fileio.PTMIO -> isf.a.b.f:
    int BUFSIZ -> a
    org.apache.log4j.Logger log -> b
    void <init>() -> <init>
    float cFinal(int,int,float) -> a
    int cFinalInt(int,int,float) -> b
    isf.ptm.fileio.PTMReader getPTMParser(java.io.InputStream,boolean) -> a
    isf.ptm.fileio.PTMReader _getParser(java.io.InputStream,boolean) -> b
    isf.ptm.formats.MVRTI getMView(java.io.InputStream) -> a
    isf.ptm.formats.MVRTI _initMulti(java.io.InputStream) -> d
    isf.ptm.fileio.PTMReader _initParser(java.io.InputStream) -> e
    java.lang.String getLine(java.io.InputStream) -> b
    int[] getLineAsInts(java.io.InputStream) -> c
    int[] getLineAsInts(java.lang.String) -> a
    void <clinit>() -> <clinit>
isf.ptm.fileio.PTMReader -> isf.a.b.g:
    isf.ptm.formats.PTM readPTM() -> a
    void reset(boolean) -> a
isf.ptm.fileio.PTMWriter -> isf.a.b.h:
    void <init>() -> <init>
    isf.ptm.fileio.PTMWriter _initWriter(isf.ptm.formats.PTM) -> b
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> a
    byte[] getLine(int) -> a
    byte[] getLine(float[]) -> a
    byte[] getLine(int[]) -> a
    byte[] getLine(java.lang.String) -> a
    isf.ptm.fileio.PTMWriter getPTMWriter(isf.ptm.formats.PTM) -> a
isf.ptm.fileio.RGBReader -> isf.a.b.i:
    isf.ptm.formats.RGBPTM ptm -> a
    java.lang.String version -> b
    java.io.InputStream __in -> c
    boolean DEBUG -> d
    boolean reset -> e
    int type -> f
    int basis -> g
    boolean fromRTI -> h
    void reset(boolean) -> a
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,boolean) -> <init>
    void setVersion(java.lang.String) -> a
    void setDebug(boolean) -> b
    isf.ptm.formats.PTM _initReader() -> b
    isf.ptm.formats.PTM readPTM() -> a
    void <init>() -> <init>
    isf.ptm.formats.PTM createCopy(isf.ptm.formats.PTM) -> a
    isf.common.utils.PTMConfig createCopy(isf.common.utils.PTMConfig) -> a
    void copyPTM(java.io.File,java.io.File) -> a
isf.ptm.fileio.RGBWriter -> isf.a.b.j:
    void <init>() -> <init>
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> a
    void _initWriter(isf.ptm.formats.PTM,java.io.OutputStream) -> b
isf.ptm.formats.BLRGBPTM -> isf.a.c.a:
    isf.ptm.graphics.EnvironmentMap em -> a
    java.util.ArrayList normals -> b
    byte[][] coefficients -> c
    int[] environmentMapCache -> d
    int[] environmentMapMap -> e
    int width -> f
    int height -> g
    java.lang.String name -> h
    int type -> i
    int basis -> j
    isf.ptm.utils.LightSource[] lights -> k
    boolean extrapolate -> l
    float extrapolate_scale -> m
    int colors -> z
    boolean useEnv -> A
    float DGAIN -> B
    float KSPEC -> C
    float KDIFF -> D
    int EXP -> E
    float LUM -> F
    int Z -> G
    java.lang.String version -> H
    float[] scale -> I
    int[] bias -> J
    void release() -> a
    void _drawSP1(int,int,int,int,byte[][]) -> a
    void _drawSP2(isf.ptm.formats.PTM,int,int) -> a
    byte[][] _getRC(int,int,int,int,int,int) -> a
    void _initBC(int,int,int,int,int,byte[]) -> b
    void _initCoeff(byte[][]) -> b
    void _reSize(int,int) -> c
    void createEnvironmentMapCache() -> A
    void createEnvironmentMapMap() -> B
    void drawSubPtm(int,int,int,int,byte[][]) -> b
    void drawSubPtm(int,int,isf.ptm.formats.PTM) -> a
    int[] getEnvironmentMapCache() -> b
    int[] getEnvironmentMapMap() -> c
    void recache() -> d
    void <init>() -> <init>
    byte[][] getBCoefficients() -> e
    void setCoefficients(byte[][]) -> a
    void setWidth(int) -> a
    void setHeight(int) -> b
    int getWidth() -> f
    int getHeight() -> g
    int x(int) -> i
    int y(int) -> j
    void computeNormals() -> h
    isf.ptm.graphics.VRGB normal(int) -> c
    isf.ptm.graphics.VRGB normal(int,int) -> a
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> a
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> i
    int getFileType() -> j
    java.util.ArrayList getNormals() -> k
    void setKSpec(float) -> a
    void setKDiff(float) -> b
    void setExp(int) -> d
    int getExp() -> l
    float getKDiff() -> m
    float getKSpec() -> n
    float getDGain() -> o
    void setDGain(float) -> c
    boolean useEnv() -> p
    void useEnv(boolean) -> a
    int getZ() -> q
    void setZ(int) -> e
    void resize(int,int) -> b
    void setVersion(java.lang.String) -> a
    void setBias(int[]) -> a_
    java.lang.String getVersion() -> r
    void setScale(float) -> d
    void setScaleArray(float[]) -> b
    int[] getBias() -> s
    float getScale() -> t
    float[] getScaleArray() -> u
    boolean isExtrapolation() -> v
    void setExtrapolation(boolean) -> b
    byte[][] getResizedCoeff(int,int) -> d
    byte[][] getResizedCoeff(int,int,int,int,int,int) -> b
    int[][] getCoefficients() -> w
    int red$134621() -> C
    int green$134621() -> D
    int blue$134621() -> E
    void setName(java.lang.String) -> b
    java.lang.String getName() -> x
    void setBCoeffs(int,int,int,int,int,byte[]) -> a
    int getColors() -> y
    void setColors(int) -> f
    int getBasisType() -> z
    void setBasisType(int) -> g
    void setFileType(int) -> h
isf.ptm.formats.HSH -> isf.a.c.b:
    int colors -> a
    boolean extrapolate -> z
    int EXP -> A
    float KDIFF -> B
    float KSPEC -> C
    float LUM -> D
    float m_dGain -> E
    int Z -> F
    float extrapolate_scale -> G
    int type -> b
    int width -> c
    int height -> d
    int basisType -> e
    int basisTerms -> f
    int elementSize -> g
    java.lang.String name -> h
    java.lang.String version -> i
    int[] bias -> j
    float[] scale -> k
    java.util.ArrayList normals -> l
    byte[][] coefficients -> m
    java.lang.String[][] functions -> H
    void <init>() -> <init>
    int getWidth() -> f
    void setWidth(int) -> a
    int getHeight() -> g
    void setHeight(int) -> b
    int getBasisTerms() -> A
    void setBasisTerms(int) -> i
    int getBasisType() -> z
    void setBasisType(int) -> g
    int getElementSize() -> B
    void setElementSize(int) -> j
    void setFileType(int) -> h
    int getFileType() -> j
    void setName(java.lang.String) -> b
    java.lang.String getName() -> x
    void setVersion(java.lang.String) -> a
    java.lang.String getVersion() -> r
    byte[][] getBCoefficients() -> e
    void setBCoefficients(byte[][]) -> a
    void _initBC(byte[][]) -> b
    java.lang.String[][] getFunctions() -> C
    void setFunctions(java.lang.String[][]) -> a
    java.lang.String[] getLineFunctions(int) -> k
    float[] getScaleArray() -> u
    void setScaleArray(float[]) -> b
    void computeNormals() -> h
    void _initNormals() -> D
    isf.ptm.graphics.VRGB normal(int) -> c
    java.util.ArrayList getNormals() -> k
    isf.ptm.graphics.VRGB normal(int,int) -> a
    void resize(int,int) -> b
    void setKDiff(float) -> b
    void setKSpec(float) -> a
    void setExp(int) -> d
    void setScale(float) -> d
    void setBias(int[]) -> a_
    float getScale() -> t
    int[] getBias() -> s
    float getKSpec() -> n
    float getKDiff() -> m
    float getDGain() -> o
    void setDGain(float) -> c
    int getExp() -> l
    int getZ() -> q
    void setZ(int) -> e
    void recache() -> d
    void release() -> a
    int[][] getCoefficients() -> w
    void setBCoeffs(int,int,int,int,int,byte[]) -> a
    void _setBC(int,int,int,int,int,byte[]) -> b
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> a
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> i
    int[] getEnvironmentMapCache() -> b
    int[] getEnvironmentMapMap() -> c
    boolean useEnv() -> p
    void useEnv(boolean) -> a
    boolean isExtrapolation() -> v
    void setExtrapolation(boolean) -> b
    int getColors() -> y
    void setColors(int) -> f
isf.ptm.formats.LRGBPTM -> isf.a.c.c:
    isf.ptm.graphics.EnvironmentMap em -> a
    java.util.ArrayList normals -> b
    int[][] coefficients -> c
    int[] environmentMapCache -> d
    int[] environmentMapMap -> e
    int width -> f
    int height -> g
    int type -> h
    int basis -> i
    boolean extrapolate -> j
    float extrapolate_scale -> k
    int colors -> l
    boolean useEnv -> m
    float DGAIN -> z
    float KSPEC -> A
    float KDIFF -> B
    int EXP -> C
    int Z -> D
    java.lang.String version -> E
    float[] scale -> F
    int[] bias -> G
    java.lang.String name -> H
    void release() -> a
    void _drawSP1(isf.ptm.formats.PTM,int,int) -> a
    void _drawSP2(isf.ptm.formats.PTM,int,int,int,int) -> a
    int[] _gA0(int,int,int,int) -> a
    int[] _gA1(int,int,int,int) -> b
    int[] _gA2(int,int,int,int) -> c
    int[] _gA3(int,int,int,int) -> d
    int[] _gA4(int,int,int,int) -> e
    int[] _gA5(int,int,int,int) -> f
    int[] _gRGB(int,int,int,int) -> g
    int[][] _getRC(int,int,int,int,int,int) -> a
    void _initA0(int[]) -> h
    void _initA1(int[]) -> i
    void _initA2(int[]) -> j
    void _initA3(int[]) -> k
    void _initA4(int[]) -> l
    void _initA5(int[]) -> m
    void _initRGB(int[]) -> n
    void _intCoeffs(int[][]) -> a
    void _reSize(int,int) -> c
    void createEnvironmentMapCache() -> A
    void createEnvironmentMapMap() -> B
    void drawSubPtm(int,int,isf.ptm.formats.PTM) -> a
    void drawSubPtm(int,int,int,int,isf.ptm.formats.PTM) -> a
    int[] getEnvironmentMapCache() -> b
    int[] getEnvironmentMapMap() -> c
    void recache() -> d
    void <init>() -> <init>
    int[][] getCoefficients() -> w
    void setCoefficients(int[][]) -> b
    void setA0(int[]) -> a
    void setA1(int[]) -> b
    void setA2(int[]) -> c
    void setA3(int[]) -> d
    void setA4(int[]) -> e
    void setA5(int[]) -> f
    void setRGB(int[]) -> g
    int[] getA0() -> C
    int[] getA0(int,int,int,int) -> h
    int[] getA1() -> D
    int[] getA1(int,int,int,int) -> i
    int[] getA2() -> E
    int[] getA2(int,int,int,int) -> j
    int[] getA3() -> F
    int[] getA3(int,int,int,int) -> k
    int[] getA4() -> G
    int[] getA4(int,int,int,int) -> l
    int[] getA5() -> H
    int[] getA5(int,int,int,int) -> m
    int[] getRGB() -> I
    int[] getRGB(int,int,int,int) -> n
    void setWidth(int) -> a
    void setHeight(int) -> b
    int getWidth() -> f
    int getHeight() -> g
    int red(int) -> i
    int green(int) -> j
    int blue(int) -> k
    int x(int) -> l
    int y(int) -> m
    void computeNormals() -> h
    isf.ptm.graphics.VRGB normal(int) -> c
    isf.ptm.graphics.VRGB normal(int,int) -> a
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> a
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> i
    int getFileType() -> j
    java.util.ArrayList getNormals() -> k
    void setKSpec(float) -> a
    void setKDiff(float) -> b
    void setExp(int) -> d
    int getExp() -> l
    float getKDiff() -> m
    float getKSpec() -> n
    float getDGain() -> o
    void setDGain(float) -> c
    boolean useEnv() -> p
    void useEnv(boolean) -> a
    int getZ() -> q
    void setZ(int) -> e
    void resize(int,int) -> b
    void setVersion(java.lang.String) -> a
    void setBias(int[]) -> a_
    java.lang.String getVersion() -> r
    void setScale(float) -> d
    void setScaleArray(float[]) -> b
    int[] getBias() -> s
    float getScale() -> t
    float[] getScaleArray() -> u
    boolean isExtrapolation() -> v
    void setExtrapolation(boolean) -> b
    int[][] getResizedCoeff(int,int) -> d
    int[][] getResizedCoeff(int,int,int,int,int,int) -> b
    byte[][] getBCoefficients() -> e
    void setName(java.lang.String) -> b
    java.lang.String getName() -> x
    void setBCoeffs(int,int,int,int,int,byte[]) -> a
    int getColors() -> y
    void setColors(int) -> f
    int getBasisType() -> z
    void setBasisType(int) -> g
    void setFileType(int) -> h
isf.ptm.formats.MVRTI -> isf.a.c.d:
    org.apache.log4j.Logger log -> z
    java.util.Hashtable files -> A
    int orientation -> B
    int maxX -> C
    int maxY -> D
    int views -> E
    int useFlow -> F
    isf.ptm.formats.HSH ptm -> G
    java.lang.String dir -> H
    int currentView -> I
    void <init>() -> <init>
    java.util.Hashtable getFiles() -> E
    void setFiles(java.util.Hashtable) -> a
    int getOrientation() -> F
    void setOrientation(int) -> k
    int getMaxX() -> G
    void setMaxX(int) -> l
    int getMaxY() -> H
    void setMaxY(int) -> m
    int getViews() -> C
    void setViews(int) -> n
    int getUseFlow() -> I
    void setUseFlow(int) -> o
    void setDirectory(java.lang.String) -> c
    java.lang.String getFileName(int) -> p
    isf.ptm.formats.PTM getPTM(int) -> q
    isf.ptm.formats.PTM _getPTM(int) -> r
    int getCurrentView() -> D
isf.ptm.formats.Normals -> isf.a.c.e:
    float zerotol -> a
    float eps -> b
    void <init>() -> <init>
    java.util.ArrayList _gN2(int[][],boolean,int[],float[]) -> a
    java.util.ArrayList _getN1(byte[][],boolean,int[],float[]) -> a
    isf.ptm.graphics.VRGB _getUN(float[]) -> a
    double evalPoly(float[],double) -> a
    int computeMaximumOnCircle(float[],float[]) -> a
    java.util.ArrayList getNormals(isf.ptm.formats.LRGBPTM) -> a
    java.util.ArrayList getNormals(int[][],boolean,int[],float[]) -> b
    java.util.ArrayList getNormals(byte[][],boolean,float[],int[]) -> a
    isf.ptm.graphics.VRGB getUnitNormals(float[]) -> b
isf.ptm.formats.PTM -> isf.a.c.f:
    int TYPE_RTI_PTM -> n
    int TYPE_RTI_SH -> o
    int TYPE_RTI_HSH -> p
    int TYPE_RTI_APTM -> q
    int TYPE_RAW_PTM -> r
    int BASIS_LRGB -> s
    int BASIS_RGB -> t
    int BASIS_PRIMITIVE -> u
    java.lang.String PTM_RGB -> v
    java.lang.String PTM_LRGB -> w
    java.lang.String PTM_JPEG_LRGB -> x
    int MAX_LIGHTS -> y
    void setName(java.lang.String) -> b
    java.lang.String getName() -> x
    void setKSpec(float) -> a
    void setKDiff(float) -> b
    void setExp(int) -> d
    void setVersion(java.lang.String) -> a
    void setScaleArray(float[]) -> b
    void setScale(float) -> d
    void setBias(int[]) -> a_
    java.lang.String getVersion() -> r
    float getScale() -> t
    int[] getBias() -> s
    float getKSpec() -> n
    float getKDiff() -> m
    float getDGain() -> o
    void setDGain(float) -> c
    int getExp() -> l
    int getZ() -> q
    void setZ(int) -> e
    void recache() -> d
    void release() -> a
    int getFileType() -> j
    int getBasisType() -> z
    int getWidth() -> f
    int getHeight() -> g
    void setWidth(int) -> a
    void setHeight(int) -> b
    int[][] getCoefficients() -> w
    byte[][] getBCoefficients() -> e
    void setBCoeffs(int,int,int,int,int,byte[]) -> a
    int getColors() -> y
    void setColors(int) -> f
    void computeNormals() -> h
    isf.ptm.graphics.VRGB normal(int) -> c
    java.util.ArrayList getNormals() -> k
    isf.ptm.graphics.VRGB normal(int,int) -> a
    void resize(int,int) -> b
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> a
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> i
    int[] getEnvironmentMapCache() -> b
    int[] getEnvironmentMapMap() -> c
    boolean useEnv() -> p
    void useEnv(boolean) -> a
    float[] getScaleArray() -> u
    boolean isExtrapolation() -> v
    void setExtrapolation(boolean) -> b
    void setBasisType(int) -> g
    void setFileType(int) -> h
isf.ptm.formats.RGBPTM -> isf.a.c.g:
    int type -> a
    int basis -> b
    byte[][] bcoeff -> c
    int size -> d
    boolean extrapolate -> e
    int width -> f
    int height -> g
    int EXP -> h
    float KDIFF -> i
    float KSPEC -> j
    float LUM -> k
    float m_dGain -> l
    int Z -> m
    java.util.ArrayList normals -> z
    java.lang.String name -> A
    int colors -> B
    java.lang.String version -> C
    float[] scale -> D
    int[] bias -> E
    float extrapolate_scale -> F
    void <init>() -> <init>
    void computeNormals() -> h
    void setBCoefficients(byte[][]) -> a
    void _setCoeff(byte[][]) -> b
    float getDGain() -> o
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> i
    int[] getEnvironmentMapCache() -> b
    int[] getEnvironmentMapMap() -> c
    int getExp() -> l
    int getHeight() -> g
    float getKDiff() -> m
    float getKSpec() -> n
    java.util.ArrayList getNormals() -> k
    int getFileType() -> j
    int getWidth() -> f
    int getZ() -> q
    int red$134621() -> A
    int green$134621() -> B
    int blue$134621() -> C
    isf.ptm.graphics.VRGB normal(int) -> c
    isf.ptm.graphics.VRGB normal(int,int) -> a
    void resize(int,int) -> b
    void _reSize(int,int) -> c
    void recache() -> d
    void release() -> a
    void setCoeff(byte[][]) -> c
    void setDGain(float) -> c
    void setExp(int) -> d
    void setHeight(int) -> b
    void setKDiff(float) -> b
    void setKSpec(float) -> a
    void setWidth(int) -> a
    void drawSubPtm(int,int,int,int,byte[][]) -> a
    void _drawSP1(int,int,int,int,byte[][]) -> b
    void drawSubPtm(int,int,isf.ptm.formats.PTM) -> a
    void _drawSP2(isf.ptm.formats.PTM,int,int) -> a
    void drawSubPtm$52ecc814(int,int,isf.ptm.formats.PTM) -> b
    void _drawSP3(isf.ptm.formats.PTM,int,int) -> b
    void setZ(int) -> e
    void setEnvironmentMap(isf.ptm.graphics.EnvironmentMap) -> a
    boolean useEnv() -> p
    void useEnv(boolean) -> a
    void setVersion(java.lang.String) -> a
    void setScale(float) -> d
    void setScaleArray(float[]) -> b
    void setBias(int[]) -> a_
    java.lang.String getVersion() -> r
    float[] getScaleArray() -> u
    float getScale() -> t
    int[] getBias() -> s
    boolean isExtrapolation() -> v
    void setExtrapolation(boolean) -> b
    byte[][] getBCoefficients() -> e
    int[][] getCoefficients() -> w
    void setName(java.lang.String) -> b
    java.lang.String getName() -> x
    void setBCoeffs(int,int,int,int,int,byte[]) -> a
    void _setBC(int,int,int,int,int,byte[]) -> b
    int getColors() -> y
    void setColors(int) -> f
    byte[][] getResizedCoeffs(int,int) -> d
    byte[][] _getRC(int,int) -> e
    int getBasisType() -> z
    void setBasisType(int) -> g
    void setFileType(int) -> h
isf.ptm.graphics.EnvironmentMap -> isf.a.d.a:
    java.awt.image.BufferedImage original -> a
    int[] __pixels -> b
    int[] buf -> c
    int[] lookedup -> d
    int width -> e
    int height -> f
    isf.ptm.graphics.VRGB eye -> g
    int downSample -> h
    int BLUR_TYPE_NONE -> i
    int BLUR_TYPE_SIMPLE -> j
    int BLUR_TYPE_GAUSSIAN -> k
    int DEFAULT_KERNEL_SIZE -> l
    int DEFAULT_DOWNSAMPLE -> m
    float DEFAULT_GAUSSIAN_SIGMA -> n
    int MAX_DOWNSAMPLE_SZ -> o
    int kernelSize -> p
    float gaussianSigma -> q
    int blurType -> r
    isf.ptm.graphics.EnvironmentMap$Monitor m -> s
    double[] cos -> t
    double[] sin -> u
    int theta -> v
    int getDownSample() -> h
    void release() -> a
    void setImage(java.awt.image.BufferedImage) -> a
    int getWidth() -> i
    int getHeight() -> j
    int getMaxDownsample() -> k
    java.awt.image.BufferedImage getImage() -> b
    void <init>(java.awt.image.BufferedImage) -> <init>
    int getPixel(isf.ptm.graphics.VRGB) -> a
    float sqr(float) -> b
    java.awt.Point getPosition(isf.ptm.graphics.VRGB) -> c
    int getMapIndex(isf.ptm.graphics.VRGB) -> b
    void setSampleSize(int) -> a
    void setBlurKernelSize(int) -> b
    void setGaussianSigma(float) -> a
    void setGaussianBlur() -> c
    void setSimpleBlur() -> d
    void setNoBlur() -> e
    int[] rotatedMap() -> f
    void refresh() -> g
    void updateMonitor(isf.ptm.graphics.VRGB[]) -> a
    void setAngle(int) -> c
    int[] access$000(isf.ptm.graphics.EnvironmentMap) -> a
    int access$100(isf.ptm.graphics.EnvironmentMap) -> b
    int access$200(isf.ptm.graphics.EnvironmentMap) -> c
    void <clinit>() -> <clinit>
isf.ptm.graphics.EnvironmentMap$Monitor -> isf.a.d.b:
    java.awt.Point[] hits -> a
    isf.ptm.graphics.EnvironmentMap this$0 -> b
    void <init>(isf.ptm.graphics.EnvironmentMap) -> <init>
    void setHits(java.awt.Point[]) -> a
    void paintComponent(java.awt.Graphics) -> paintComponent
isf.ptm.graphics.GaussianKernel -> isf.a.d.c:
    int radius -> a
    float sigma -> b
    float[] kernel -> c
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    float[] makeKernel() -> b
    void dump() -> c
    float[] getKernel() -> a
isf.ptm.graphics.GraphicsGems -> isf.a.d.d:
    float EQN_EPS -> a
    void <init>() -> <init>
    boolean IsZero(double) -> a
    float cbrt(double) -> b
    int SolveQuadric(double[],double[]) -> a
    int SolveQuadric(double[],double[],int) -> a
    int SolveCubic(double[],double[]) -> b
    int SolveQuartic(double[],double[]) -> c
isf.ptm.graphics.VRGB -> isf.a.d.e:
    float red -> a
    float green -> b
    float blue -> c
    void <init>() -> <init>
    void <init>(float[]) -> <init>
    void <init>(float,float,float) -> <init>
    java.lang.String toString() -> toString
    boolean equals(isf.ptm.graphics.VRGB) -> a
    isf.ptm.graphics.VRGB convertPixel(int) -> a
    float[] toFloat() -> c
    float len() -> d
    isf.ptm.graphics.VRGB normalize() -> a
    float dot(isf.ptm.graphics.VRGB) -> b
    float dot(float,float,float) -> a
    float customMinMaxDot(float,float,float,float,float) -> a
    float dot(float[]) -> a
    isf.ptm.graphics.VRGB cross(isf.ptm.graphics.VRGB) -> c
    isf.ptm.graphics.VRGB scale(float) -> a
    isf.ptm.graphics.VRGB sum(isf.ptm.graphics.VRGB) -> d
    isf.ptm.graphics.VRGB sum(float[]) -> b
    isf.ptm.graphics.VRGB diff(isf.ptm.graphics.VRGB) -> e
    isf.ptm.graphics.VRGB diff(float,float,float) -> b
    isf.ptm.graphics.VRGB reflect(isf.ptm.graphics.VRGB,isf.ptm.graphics.VRGB) -> a
    int toPixel() -> b
    void perturb() -> e
isf.ptm.operations.ColorOperation -> isf.a.e.a:
    void <init>() -> <init>
    void performOperation(int[],isf.ptm.formats.PTM) -> a
    void performOperation$125fdb01() -> e
    void release() -> a
    void forceUpdate() -> b
    void clearCache() -> c
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> a
    java.lang.String getName() -> d
isf.ptm.operations.DiffuseGainOperation -> isf.a.e.b:
    float DGAIN -> a
    int width -> b
    int height -> c
    int dW -> d
    int basis -> e
    int size -> f
    int type -> g
    isf.ptm.utils.LightSource[] sources -> h
    java.awt.Rectangle target -> i
    java.awt.Rectangle ptmRect -> j
    int[] bias -> k
    float[] scale -> l
    java.util.ArrayList normals -> m
    void <init>() -> <init>
    void release() -> a
    void forceUpdate() -> b
    void clearCache() -> c
    void PTMXform(isf.ptm.formats.PTM,int[],int,int) -> a
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> a
    void _operate(isf.ptm.formats.PTM,isf.ptm.utils.LightSource[],int,int,int,int,int,int,int[],int,int) -> a
    int[] processCoeff(byte[],int) -> a
    java.lang.String getName() -> d
isf.ptm.operations.DirectionalLightOperation -> isf.a.e.c:
    int width -> a
    int height -> b
    int dW -> c
    int type -> d
    int basis -> e
    isf.ptm.utils.LightSource[] sources -> f
    boolean extrapolate -> g
    float factor -> h
    int[] bias -> i
    float[] scale -> j
    int[] map -> k
    int[] rotatedEnv -> l
    java.awt.Rectangle target -> m
    java.awt.Rectangle ptmRect -> n
    void <init>() -> <init>
    void LRGBXformEnv(int[],byte[][],int,int,int[],float[]) -> a
    void LRGBXform(int[],byte[][],int,int,int[],float[]) -> b
    void release() -> a
    void forceUpdate() -> b
    void clearCache() -> c
    void RGBXform(int[],byte[][],int,int,int[],float[]) -> c
    void HSHform(int[],byte[][],int[],float[],int) -> a
    void performOperation$7a1cd09f() -> e
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> a
    java.lang.String getName() -> d
isf.ptm.operations.EnvironmentalOperation -> isf.a.e.d:
    void <init>() -> <init>
    void performOperation(int[],isf.ptm.formats.PTM) -> a
    void _operate(int[],isf.ptm.formats.PTM) -> b
    void performOperation$125fdb01(int[],isf.ptm.formats.PTM) -> c
    void release() -> a
    void forceUpdate() -> b
    void clearCache() -> c
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> a
    java.lang.String getName() -> d
isf.ptm.operations.NormalMapOperation -> isf.a.e.e:
    void <init>() -> <init>
    void release() -> a
    void forceUpdate() -> b
    void clearCache() -> c
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> a
    void _operate(isf.ptm.formats.PTM,int,int,int,int,int,int,int[]) -> a
    java.lang.String getName() -> d
isf.ptm.operations.Operation -> isf.a.e.f:
    double M_PI -> a
    void <init>() -> <init>
    double[] _initHSH(double,double) -> b
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> a
    void forceUpdate() -> b
    void release() -> a
    void clearCache() -> c
    double[] getHSH(double,double) -> a
    java.lang.String getName() -> d
    void <clinit>() -> <clinit>
isf.ptm.operations.ReflectionMapOperation -> isf.a.e.g:
    void <init>() -> <init>
    void performOperation(int[],isf.ptm.formats.PTM) -> a
    void _operate(int[],isf.ptm.formats.PTM) -> b
    void performOperation$125fdb01(int[],isf.ptm.formats.PTM) -> c
    void release() -> a
    void forceUpdate() -> b
    void clearCache() -> c
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> a
    java.lang.String getName() -> d
isf.ptm.operations.SpecularOperation -> isf.a.e.h:
    int width -> a
    int height -> b
    int dW -> c
    int type -> d
    int basis -> e
    isf.ptm.utils.LightSource[] sources -> f
    java.awt.Rectangle target -> g
    java.awt.Rectangle ptmRect -> h
    boolean forceUpdate -> i
    int cachedExp -> j
    float[] phong -> k
    void <init>() -> <init>
    void forceUpdate() -> b
    void clearCache() -> c
    void release() -> a
    void RGBXform(int[],isf.ptm.formats.PTM,int,int) -> a
    void HSHform$125fdb01(int[],isf.ptm.formats.PTM) -> a
    void LRGBXform(int[],isf.ptm.formats.PTM,int,int) -> b
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> a
    java.lang.String getName() -> d
isf.ptm.operations.SpotLightOperation -> isf.a.e.i:
    org.apache.log4j.Logger log -> a
    int width -> b
    int height -> c
    boolean isFlashLight -> d
    int Z -> e
    int dW -> f
    int type -> g
    int basis -> h
    isf.ptm.utils.LightSource[] sources -> i
    int[] map -> j
    int[] rotatedEnv -> k
    java.awt.Rectangle target -> l
    java.awt.Rectangle ptmRect -> m
    void <init>() -> <init>
    void setFlashlight(boolean) -> a
    void LRGBXformEnv(int[],byte[][],int,int,int[],float[]) -> a
    void LRGBXform(int[],byte[][],int,int,int[],float[]) -> b
    void RGBXform(int[],byte[][],int,int,int[],float[]) -> c
    void _operate(isf.ptm.formats.PTM,isf.ptm.utils.LightSource[],int,int,int,int,int,int,int[],int,int) -> a
    void processRGBLight(int,int,int,int,int,int,int[],byte[][],int[],float[]) -> a
    void processLRGBLight(int,int,int,int,int,int,int[],byte[][],int[],float[]) -> b
    void processLRGBEnvLight(int,int,int,int,int,int,int[],byte[][],int[],float[]) -> c
    void release() -> a
    void forceUpdate() -> b
    void clearCache() -> c
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> a
    java.lang.String getName() -> d
isf.ptm.utils.LightSource -> isf.a.f.a:
    boolean enabled -> a
    javax.vecmath.Point3f light -> b
    float luminance -> c
    boolean active -> d
    int xpos -> e
    int ypos -> f
    void <init>() -> <init>
    boolean isEnabled() -> a
    javax.vecmath.Point3f getLight() -> b
    void setLight(javax.vecmath.Point3f) -> a
    void setEnabled(boolean) -> a
    int getX() -> c
    void setX(int) -> a
    int getY() -> d
    void setY(int) -> b
    float getLuminance() -> e
    void setLuminance(float) -> a
    boolean isActive() -> f
    void setActive(boolean) -> b
    java.lang.String getDisplay() -> g
isf.ptm.utils.SwingWorker -> isf.a.f.b:
    java.lang.Object value -> a
    isf.ptm.utils.SwingWorker$ThreadVar threadVar -> b
    java.lang.Object getValue() -> d
    void setValue(java.lang.Object) -> a
    java.lang.Object construct() -> a
    void finished() -> b
    void interrupt() -> e
    java.lang.Object get() -> f
    void <init>() -> <init>
    void start() -> c
    void access$000(isf.ptm.utils.SwingWorker,java.lang.Object) -> a
    isf.ptm.utils.SwingWorker$ThreadVar access$100(isf.ptm.utils.SwingWorker) -> a
isf.ptm.utils.SwingWorker$1 -> isf.a.f.c:
    isf.ptm.utils.SwingWorker this$0 -> a
    void <init>(isf.ptm.utils.SwingWorker) -> <init>
    void run() -> run
isf.ptm.utils.SwingWorker$2 -> isf.a.f.d:
    java.lang.Runnable val$doFinished -> a
    isf.ptm.utils.SwingWorker this$0 -> b
    void <init>(isf.ptm.utils.SwingWorker,java.lang.Runnable) -> <init>
    void run() -> run
isf.ptm.utils.SwingWorker$ThreadVar -> isf.a.f.e:
    java.lang.Thread thread -> a
    int MASK -> b
    void <init>(java.lang.Thread) -> <init>
    java.lang.Thread get() -> a
    void clear() -> b
    void <init>() -> <init>
    int indexOfMax(double[]) -> a
    int indexOfMax(float[]) -> b
    int clamp(int) -> a
    float[] normalize3(float[]) -> a
    double[] normalize3(double[]) -> b
    float[] normalize(float,float,float) -> a
    java.lang.String asString(double[]) -> c
    java.lang.String asString(float[]) -> c
    java.lang.String asString(int[]) -> a
    float translate(int,int) -> a
    int unsignedByteToInt(byte) -> a
    float[] reflect(float[],float[]) -> a
    double[] reflect(double[],double[]) -> a
    float[] vecSum3(float[],float[]) -> b
    double[] vecSum3(double[],double[]) -> b
    float[] scalarMult3(float[],float) -> a
    double[] scalarMult3(double[],double) -> a
    float dot3(float[],float[]) -> c
    double dot3(double[],double[]) -> c
    int[] grabPixels(java.awt.image.BufferedImage) -> a
    java.awt.image.BufferedImage gaussianBlur(java.awt.image.BufferedImage,int,float) -> a
    java.awt.image.BufferedImage blurImageSimple(java.awt.image.BufferedImage,int) -> a
    java.awt.image.BufferedImage createBufferedImage(int[],int) -> a
    java.awt.image.BufferedImage createBufferedImage(isf.ptm.graphics.VRGB[],int) -> a
    isf.ptm.graphics.VRGB[] intToVec(int[]) -> b
    void checkAlgorithm(int,int,int,int) -> a
    java.lang.String[] split(java.lang.String,java.lang.String) -> a
    void toPolar$17403aff(javax.vecmath.Point3f) -> d
    float getFloatFromArray(byte[],int,int) -> a
    float getFloatFromArray(byte[]) -> a
    float byteArrayToFloat(byte[]) -> b
    byte[] floatToByteArray(float) -> a
    byte[] floatToBytes(float) -> b
    byte[] intToByteArray(int) -> b
    float cross(javax.vecmath.Point3f,isf.ptm.graphics.VRGB) -> a
    javax.vecmath.Point3f normalize(javax.vecmath.Point3f) -> a
    float norm(javax.vecmath.Point3f) -> b
    float[] convertToPolar(javax.vecmath.Point3f) -> c
isf.ptm.utils.Utils -> isf.a.f.f:
    int MASK -> a
    void <init>() -> <init>
    int indexOfMax(double[]) -> a
    int indexOfMax(float[]) -> b
    int clamp(int) -> a
    float[] normalize3(float[]) -> a
    double[] normalize3(double[]) -> b
    float[] normalize(float,float,float) -> a
    java.lang.String asString(double[]) -> c
    java.lang.String asString(float[]) -> c
    java.lang.String asString(int[]) -> a
    float translate(int,int) -> a
    int unsignedByteToInt(byte) -> a
    float[] reflect(float[],float[]) -> a
    double[] reflect(double[],double[]) -> a
    float[] vecSum3(float[],float[]) -> b
    double[] vecSum3(double[],double[]) -> b
    float[] scalarMult3(float[],float) -> a
    double[] scalarMult3(double[],double) -> a
    float dot3(float[],float[]) -> c
    double dot3(double[],double[]) -> c
    int[] grabPixels(java.awt.image.BufferedImage) -> a
    java.awt.image.BufferedImage gaussianBlur(java.awt.image.BufferedImage,int,float) -> a
    java.awt.image.BufferedImage blurImageSimple(java.awt.image.BufferedImage,int) -> a
    java.awt.image.BufferedImage createBufferedImage(int[],int) -> a
    java.awt.image.BufferedImage createBufferedImage(isf.ptm.graphics.VRGB[],int) -> a
    isf.ptm.graphics.VRGB[] intToVec(int[]) -> b
    void checkAlgorithm(int,int,int,int) -> a
    java.lang.String[] split(java.lang.String,java.lang.String) -> a
    void toPolar$17403aff(javax.vecmath.Point3f) -> d
    float getFloatFromArray(byte[],int,int) -> a
    float getFloatFromArray(byte[]) -> a
    float byteArrayToFloat(byte[]) -> b
    byte[] floatToByteArray(float) -> a
    byte[] floatToBytes(float) -> b
    byte[] intToByteArray(int) -> b
    float cross(javax.vecmath.Point3f,isf.ptm.graphics.VRGB) -> a
    javax.vecmath.Point3f normalize(javax.vecmath.Point3f) -> a
    float norm(javax.vecmath.Point3f) -> b
    float[] convertToPolar(javax.vecmath.Point3f) -> c
isf.view.ControlsPopUp -> isf.view.ControlsPopUp:
    isf.viewer.controls.GeneralControlMenu gp -> a
    isf.viewer.controls.DualLightsControlMenu dlp -> b
    isf.viewer.controls.SpecularControlMenu sp -> c
    isf.viewer.controls.DiffuseGainControlMenu dp -> d
    isf.viewer.controls.ExtrapolateSourceMenu esm -> e
    isf.viewer.controls.MViewControlMenu mvcm -> f
    isf.viewer.containers.CloseActionMenu cam -> g
    isf.viewer.controls.ThumbnailControlMenu tcm -> h
    int height -> i
    isf.ptm.controls.PTMWindow ptmw -> j
    boolean showSP -> k
    boolean distance -> l
    boolean showDP -> m
    boolean showES -> n
    boolean showNone -> o
    java.awt.Point start -> p
    java.awt.Point end -> q
    boolean dragging -> r
    java.awt.Rectangle old -> s
    java.awt.Point p -> t
    java.awt.Point temp -> u
    int mouseX -> v
    int mouseY -> w
    int xposition -> x
    int yposition -> y
    void setSpecularEnabled(boolean) -> setSpecularEnabled
    void setDiffuseGainEnabled(boolean) -> setDiffuseGainEnabled
    void setExtrapolateEnabled(boolean) -> setExtrapolateEnabled
    void setDistanceEnabled(boolean) -> setDistanceEnabled
    void <init>() -> <init>
    void releaseControls() -> releaseControls
    void construct() -> construct
    void init() -> init
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
isf.view.PTMTools -> isf.view.PTMTools:
    void <init>() -> <init>
    javax.swing.JButton[] getPTMButtons() -> getPTMButtons
    javax.swing.JButton[] _initPTMButtons() -> a
isf.viewer.containers.ButtonPopUp -> isf.viewer.containers.a:
    void <init>() -> <init>
    void init() -> init
    void releaseControls() -> releaseControls
isf.viewer.containers.CloseActionMenu -> isf.viewer.containers.b:
    javax.swing.JLabel title -> a
    isf.controls.view.controls.InscriptButton close1 -> b
    isf.controls.view.controls.InscriptButton close2 -> c
    javax.swing.ImageIcon titleIcon -> d
    javax.swing.ImageIcon closeRight -> e
    javax.swing.ImageIcon closeLeft -> f
    void <init>() -> <init>
    void init() -> a
    void processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processMouseEvent
    void processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processKeyEvent
    void menuSelectionChanged(boolean) -> menuSelectionChanged
    javax.swing.MenuElement[] getSubElements() -> getSubElements
    java.awt.Component getComponent() -> getComponent
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void <clinit>() -> <clinit>
isf.viewer.containers.EffectsPopUp -> isf.viewer.containers.c:
    isf.ptm.controls.PTMWindow ptmw -> a
    javax.swing.JButton btnNone -> b
    javax.swing.JButton btnSpecular -> c
    javax.swing.JButton btnDiffuseGain -> d
    javax.swing.JButton btnExtrapolate -> e
    javax.swing.JButton btnNormalize -> f
    javax.swing.JButton btnAnimate -> g
    void <init>() -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void init() -> init
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void releaseControls() -> releaseControls
isf.viewer.containers.ISFDesktopFrame -> isf.viewer.containers.ISFDesktopFrame:
    isf.controls.view.containers.ViewDesktop vd -> b
    isf.controls.view.controls.SidDesktop activexPanel -> c
    isf.controls.view.containers.ISFSplitPane jp -> d
    isf.controls.view.containers.ProgressPane progressPane -> e
    int index -> f
    org.apache.log4j.Logger log -> a
    java.net.ServerSocket listenSocket -> g
    java.awt.Cursor oldCursor -> h
    void <init>() -> <init>
    void addDesktopData(isf.controls.models.DesktopDataObject) -> b
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void doResize() -> c
    void putImage(isf.controls.models.DesktopDataObject) -> a
    void setSelectedData(java.util.Vector) -> a
    void resetCursor() -> d
    void reset() -> e
    void main(java.lang.String[]) -> main
    isf.controls.view.listeners.KeyHandler getKeyHandler() -> f
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void putImage(isf.controls.models.DesktopDataObject,isf.ptm.formats.PTM) -> a
    void addDesktopData$3da5267e() -> g
    void changeCursor(int) -> a
    void changeCursor(java.awt.Cursor) -> a
    java.awt.Rectangle getFrameBounds() -> a
    boolean validRTIFile(java.lang.String) -> a
    void startServer(int) -> b
    java.net.ServerSocket access$000() -> b
    void <clinit>() -> <clinit>
isf.viewer.containers.ISFDesktopFrame$1 -> isf.viewer.containers.d:
    isf.viewer.containers.ISFDesktopFrame this$0 -> a
    void <init>(isf.viewer.containers.ISFDesktopFrame) -> <init>
    void run() -> run
isf.viewer.containers.PerformancePopUp -> isf.viewer.containers.e:
    isf.ptm.controls.PTMWindow ptmw -> a
    javax.swing.JButton btnDetail -> b
    javax.swing.JButton btnSample -> c
    javax.swing.JButton btnInterpolated -> d
    void <init>() -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void init() -> init
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void releaseControls() -> releaseControls
isf.viewer.containers.SourcesPopUp -> isf.viewer.containers.f:
    isf.ptm.controls.PTMWindow ptmw -> a
    javax.swing.JButton btnDirectional -> b
    javax.swing.JButton btnLocal -> c
    javax.swing.JButton btnSpot -> d
    javax.swing.JButton btnAddLight -> e
    void <init>() -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void init() -> init
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void releaseControls() -> releaseControls
isf.viewer.controls.BoderLayout -> isf.viewer.a.a:
    void <init>() -> <init>
isf.viewer.controls.ControlsButton -> isf.viewer.a.b:
    isf.viewer.containers.ButtonPopUp popup -> a
    boolean showOnRight -> b
    void <init>(java.lang.String,java.lang.String,java.lang.String,isf.viewer.containers.ButtonPopUp) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,isf.viewer.containers.ButtonPopUp,boolean) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.viewer.controls.DiffuseGainControlMenu -> isf.viewer.a.c:
    float min -> b
    float max -> c
    float gain -> d
    isf.viewer.controls.ISFSliderControl dGainSlider -> e
    javax.swing.JLabel label -> f
    isf.ptm.controls.PTMWindow pf -> a
    void <init>() -> <init>
    void init() -> a
    void processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processMouseEvent
    void processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processKeyEvent
    void menuSelectionChanged(boolean) -> menuSelectionChanged
    javax.swing.MenuElement[] getSubElements() -> getSubElements
    java.awt.Component getComponent() -> getComponent
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    void resetControls() -> c
isf.viewer.controls.DiffuseGainControlMenu$1 -> isf.viewer.a.d:
    isf.viewer.controls.DiffuseGainControlMenu this$0 -> a
    void <init>(isf.viewer.controls.DiffuseGainControlMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.DualLightsControlMenu -> isf.viewer.a.e:
    boolean added -> a
    isf.controls.view.controls.ISFSlider l1lumSlider -> b
    isf.controls.view.controls.ISFSlider l2lumSlider -> c
    isf.controls.view.controls.ISFSlider distanceSlider -> d
    javax.swing.JLabel distanceLabel -> e
    javax.swing.JRadioButton lightOne -> f
    javax.swing.JRadioButton lightTwo -> g
    javax.swing.ButtonGroup group -> h
    isf.controls.view.containers.PTMPanel ptmw -> i
    void setDistanceEnabled(boolean) -> a
    void <init>() -> <init>
    void init() -> a
    void processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processMouseEvent
    void processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processKeyEvent
    void menuSelectionChanged(boolean) -> menuSelectionChanged
    javax.swing.MenuElement[] getSubElements() -> getSubElements
    java.awt.Component getComponent() -> getComponent
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void resetControls() -> c
    isf.controls.view.containers.PTMPanel access$000(isf.viewer.controls.DualLightsControlMenu) -> a
    isf.controls.view.controls.ISFSlider access$100(isf.viewer.controls.DualLightsControlMenu) -> b
isf.viewer.controls.DualLightsControlMenu$1 -> isf.viewer.a.f:
    isf.viewer.controls.DualLightsControlMenu this$0 -> a
    void <init>(isf.viewer.controls.DualLightsControlMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.DualLightsControlMenu$2 -> isf.viewer.a.g:
    isf.viewer.controls.DualLightsControlMenu this$0 -> a
    void <init>(isf.viewer.controls.DualLightsControlMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.DualLightsControlMenu$3 -> isf.viewer.a.h:
    isf.viewer.controls.DualLightsControlMenu this$0 -> a
    void <init>(isf.viewer.controls.DualLightsControlMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.EnvironmentControlMenu -> isf.viewer.a.i:
    java.lang.Object mutex -> a
    javax.swing.JPanel top -> e
    javax.swing.JPanel bottom -> f
    javax.swing.JSlider group -> g
    javax.swing.JSlider sampleSlider -> h
    javax.swing.JSlider kernelSlider -> i
    javax.swing.JSlider sigmaSlider -> j
    javax.swing.JLabel sampleLabel -> k
    javax.swing.JLabel kernelLabel -> l
    javax.swing.JLabel sigmaLabel -> m
    java.lang.String[] mapStrings -> n
    javax.swing.JComboBox mapList -> o
    isf.ptm.controls.PTMWindow ptmw -> b
    org.apache.log4j.Logger log -> c
    isf.ptm.controls.EnvironmentMapPanel emp -> d
    isf.view.ControlsPopUp floatingControlsPopUp -> p
    void setFC(isf.view.ControlsPopUp) -> a
    void <init>() -> <init>
    void init() -> a
    void processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processMouseEvent
    void processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processKeyEvent
    void menuSelectionChanged(boolean) -> menuSelectionChanged
    javax.swing.MenuElement[] getSubElements() -> getSubElements
    java.awt.Component getComponent() -> getComponent
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    java.awt.image.BufferedImage readUnbuffered(java.io.InputStream) -> a
    java.awt.image.BufferedImage access$000(isf.viewer.controls.EnvironmentControlMenu,java.io.InputStream) -> a
    void <clinit>() -> <clinit>
isf.viewer.controls.EnvironmentControlMenu$1 -> isf.viewer.a.j:
    isf.viewer.controls.EnvironmentControlMenu this$0 -> a
    void <init>(isf.viewer.controls.EnvironmentControlMenu) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.viewer.controls.EnvironmentControlMenu$2 -> isf.viewer.a.k:
    isf.ptm.controls.PTMWindow val$pf -> a
    isf.viewer.controls.EnvironmentControlMenu this$0 -> b
    void <init>(isf.viewer.controls.EnvironmentControlMenu,isf.ptm.controls.PTMWindow) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.ExtrapolateSourceMenu -> isf.viewer.a.l:
    boolean added -> a
    isf.controls.view.controls.ISFSlider scaleSlider -> b
    javax.swing.JLabel label -> c
    isf.controls.view.containers.PTMPanel ptmw -> d
    void <init>() -> <init>
    void init() -> a
    void processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processMouseEvent
    void processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processKeyEvent
    void menuSelectionChanged(boolean) -> menuSelectionChanged
    javax.swing.MenuElement[] getSubElements() -> getSubElements
    java.awt.Component getComponent() -> getComponent
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    isf.controls.view.containers.PTMPanel access$000(isf.viewer.controls.ExtrapolateSourceMenu) -> a
isf.viewer.controls.ExtrapolateSourceMenu$1 -> isf.viewer.a.m:
    isf.viewer.controls.ExtrapolateSourceMenu this$0 -> a
    void <init>(isf.viewer.controls.ExtrapolateSourceMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.GeneralControlMenu -> isf.viewer.a.n:
    boolean added -> a
    isf.controls.view.controls.ISFSlider lumSlider -> b
    javax.swing.JLabel label -> c
    isf.controls.view.controls.ISFSlider distanceSlider -> d
    javax.swing.JLabel distanceLabel -> e
    isf.controls.view.containers.PTMPanel ptmw -> f
    void setDistanceEnabled(boolean) -> a
    void <init>() -> <init>
    void init() -> a
    void processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processMouseEvent
    void processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processKeyEvent
    void menuSelectionChanged(boolean) -> menuSelectionChanged
    javax.swing.MenuElement[] getSubElements() -> getSubElements
    java.awt.Component getComponent() -> getComponent
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    void resetControls() -> c
    isf.controls.view.containers.PTMPanel access$000(isf.viewer.controls.GeneralControlMenu) -> a
    isf.controls.view.controls.ISFSlider access$100(isf.viewer.controls.GeneralControlMenu) -> b
isf.viewer.controls.GeneralControlMenu$1 -> isf.viewer.a.o:
    isf.viewer.controls.GeneralControlMenu this$0 -> a
    void <init>(isf.viewer.controls.GeneralControlMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.GeneralControlMenu$2 -> isf.viewer.a.p:
    isf.viewer.controls.GeneralControlMenu this$0 -> a
    void <init>(isf.viewer.controls.GeneralControlMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.ISFSliderControl -> isf.viewer.a.q:
    float minval -> a
    float maxval -> b
    int min -> c
    int max -> d
    void <init>(int,int,float,float) -> <init>
    void <init>(int,int,int,int) -> <init>
    javax.swing.JLabel getLabel(int) -> b
    javax.swing.JLabel getILabel(int) -> c
    void setIValue(int) -> a
    int getIValue() -> a
    void setFValue(float) -> a
    float getFValue() -> b
isf.viewer.controls.MViewControlMenu -> isf.viewer.a.r:
    boolean added -> a
    isf.controls.view.controls.ISFSlider viewSlider -> b
    javax.swing.JLabel label -> c
    isf.controls.view.containers.PTMPanelImpl ptmw -> d
    void <init>() -> <init>
    void init() -> a
    void processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processMouseEvent
    void processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processKeyEvent
    void menuSelectionChanged(boolean) -> menuSelectionChanged
    javax.swing.MenuElement[] getSubElements() -> getSubElements
    java.awt.Component getComponent() -> getComponent
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    void resetControls() -> c
    isf.controls.view.containers.PTMPanelImpl access$000(isf.viewer.controls.MViewControlMenu) -> a
isf.viewer.controls.MViewControlMenu$1 -> isf.viewer.a.s:
    isf.viewer.controls.MViewControlMenu this$0 -> a
    void <init>(isf.viewer.controls.MViewControlMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.SpecularControlMenu -> isf.viewer.a.t:
    isf.viewer.controls.ISFSliderControl kSpecSlider -> a
    isf.viewer.controls.ISFSliderControl kDiffSlider -> b
    isf.viewer.controls.ISFSliderControl expSlider -> c
    javax.swing.JLabel kSpecLabel -> d
    javax.swing.JLabel kDiffLabel -> e
    javax.swing.JLabel expLabel -> f
    isf.ptm.controls.PTMWindow pf -> g
    void <init>() -> <init>
    void init() -> a
    void expStateChanged(javax.swing.event.ChangeEvent) -> a
    void kDiffStateChanged(javax.swing.event.ChangeEvent) -> b
    void kSpecSliderStateChanged(javax.swing.event.ChangeEvent) -> c
    void processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processMouseEvent
    void processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processKeyEvent
    void menuSelectionChanged(boolean) -> menuSelectionChanged
    javax.swing.MenuElement[] getSubElements() -> getSubElements
    java.awt.Component getComponent() -> getComponent
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    void resetControls() -> c
    void access$000(isf.viewer.controls.SpecularControlMenu,javax.swing.event.ChangeEvent) -> a
    void access$100(isf.viewer.controls.SpecularControlMenu,javax.swing.event.ChangeEvent) -> b
    void access$200(isf.viewer.controls.SpecularControlMenu,javax.swing.event.ChangeEvent) -> c
isf.viewer.controls.SpecularControlMenu$1 -> isf.viewer.a.u:
    isf.viewer.controls.SpecularControlMenu this$0 -> a
    void <init>(isf.viewer.controls.SpecularControlMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.SpecularControlMenu$2 -> isf.viewer.a.v:
    isf.viewer.controls.SpecularControlMenu this$0 -> a
    void <init>(isf.viewer.controls.SpecularControlMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.SpecularControlMenu$3 -> isf.viewer.a.w:
    isf.viewer.controls.SpecularControlMenu this$0 -> a
    void <init>(isf.viewer.controls.SpecularControlMenu) -> <init>
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
isf.viewer.controls.ThumbnailControlMenu -> isf.viewer.a.x:
    isf.controls.view.containers.PTMPanel pf -> a
    isf.viewer.controls.ThumbnailControlMenu$ImagePane imgPanel -> c
    org.apache.log4j.Logger log -> b
    void <init>() -> <init>
    void init() -> a
    java.awt.Component getComponent() -> getComponent
    javax.swing.MenuElement[] getSubElements() -> getSubElements
    void menuSelectionChanged(boolean) -> menuSelectionChanged
    void processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processKeyEvent
    void processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager) -> processMouseEvent
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    void resetControls() -> c
isf.viewer.controls.ThumbnailControlMenu$ImagePane -> isf.viewer.a.y:
    java.lang.String path -> a
    java.lang.String file -> b
    java.awt.image.BufferedImage image -> c
    java.awt.Rectangle viewRect -> d
    float xF -> e
    float yF -> f
    int posX -> g
    int posY -> h
    int curWid -> i
    int curHei -> j
    int[] vals -> k
    boolean dragging -> l
    isf.viewer.controls.ThumbnailControlMenu this$0 -> m
    void <init>(isf.viewer.controls.ThumbnailControlMenu) -> <init>
    void setIcon(java.lang.String) -> a
    void setDisplay(java.awt.Rectangle,java.awt.Dimension) -> a
    void paint(java.awt.Graphics) -> paint
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
isf.viewer.utils.ClientSocket -> isf.viewer.b.a:
    java.net.Socket socket -> a
    org.apache.log4j.Logger log -> b
    void <init>(java.net.Socket) -> <init>
    void run() -> run
    void <clinit>() -> <clinit>
isf.viewer.utils.SpringUtilities -> isf.viewer.b.b:
    void <init>() -> <init>
    void printSizes(java.awt.Component) -> a
    void makeGrid(java.awt.Container,int,int,int,int,int,int) -> b
    javax.swing.SpringLayout$Constraints getConstraintsForCell(int,int,java.awt.Container,int) -> a
    void makeCompactGrid(java.awt.Container,int,int,int,int,int,int) -> a
