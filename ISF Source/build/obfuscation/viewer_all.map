isf.cache.CacheItem -> isf.l11lITTI.l1IlIlTI1T1T:
    java.lang.String name -> name
    long lastAccessedTime -> TT1lIT1ll1ITIIl1
    double size -> ITI1llTTI1lITl
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    java.lang.String getName() -> getName
    long getLastAccessedTime() -> getLastAccessedTime
    void setLastAccessedTime(long) -> TT1lIT1ll1ITIIl1
    void setSize(double) -> TT1lIT1ll1ITIIl1
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getSize() -> TT1lIT1ll1ITIIl1
isf.cache.CacheItemComparator -> isf.l11lITTI.lI1lTIIlT1T1:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
isf.cache.CacheSet -> isf.l11lITTI.Il1TI1lIT1lT:
    void <init>() -> <init>
    void <init>(java.util.Comparator) -> <init>
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
isf.cache.LRUCache -> isf.l11lITTI.l11lIlTTI1TI:
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    double fileSize -> IlITlTTTl11Il1I
    java.util.SortedSet cache -> IT11TT1lIll1ITIl
    boolean isMonitoring -> TIITI1lTlTl1Il11
    double cacheSize -> TTl1TITI1l1Il1lI
    void <init>() -> <init>
    void createSynchronizedMap(isf.cache.CacheSet) -> TT1lIT1ll1ITIIl1
    void updateEntry(java.lang.String,double) -> TT1lIT1ll1ITIIl1
    void deleteEntry(java.lang.String) -> deleteEntry
    void updateEntry(java.lang.String) -> ITI1llTTI1lITl
    void trimDirectory(java.lang.String) -> l1IlTT1lITIl1IT1
    void startMonitor() -> ITI1llTTI1lITl
    boolean isCached(java.lang.String) -> lI1I1T1ITTl1llIT
    double access$000(isf.cache.LRUCache) -> TT1lIT1ll1ITIIl1
    java.util.SortedSet access$100(isf.cache.LRUCache) -> ITI1llTTI1lITl
    double access$002(isf.cache.LRUCache,double) -> a
    void access$200(isf.cache.LRUCache,java.lang.String) -> TT1lIT1ll1ITIIl1
    boolean access$302(isf.cache.LRUCache,boolean) -> TT1lIT1ll1ITIIl1
isf.cache.LRUCache$1 -> isf.l11lITTI.T11ITIIllTl:
    isf.cache.LRUCache this$0 -> IITTlT11lII1T1ll
    void <init>(isf.cache.LRUCache) -> <init>
    void run() -> run
isf.cache.utils.CacheHandler -> isf.l11lITTI.l11lITTI.l1IlIlTI1T1T:
    isf.cache.utils.CacheHandler ourInstance -> l1IllT11TIIT1ITl
    isf.cache.LRUCache cache -> l1lT1IlI1IlT1TIT
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    void <clinit>() -> <clinit>
isf.cache.utils.ImageUtils -> isf.l11lITTI.l11lITTI.lI1lTIIlT1T1:
    isf.cache.LRUCache cache -> l1lT1IlI1IlT1TIT
    java.lang.String path -> path
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    void <init>() -> <init>
    boolean isCached(java.lang.String) -> lI1I1T1ITTl1llIT
    java.lang.String getCachedPath() -> TIITI1lTlTl1Il11
    void saveCache(java.lang.String,isf.ptm.formats.PTM,isf.common.utils.PTMConfig) -> TT1lIT1ll1ITIIl1
    void saveThumbnail(java.lang.String,java.awt.image.BufferedImage) -> TT1lIT1ll1ITIIl1
    void <clinit>() -> <clinit>
isf.common.Debug -> isf.common.l1IlIlTI1T1T:
    boolean shallDisplay -> IlIT1lT1TI1IlT1l
    void debug(java.lang.Object) -> debug
    void <clinit>() -> <clinit>
isf.common.request.PTMRequestProxy -> isf.common.I11lIlTT.lI1lTIIlT1T1:
    byte[] getImageCoeff$ba25119() -> a
    javax.swing.ImageIcon fetchImage$521c5f5a() -> b
    java.lang.Object getImageProperties$9543ced() -> c
    isf.common.utils.PTMConfig getPTMConfig$6808fdb6() -> d
isf.common.utils.CacheManagerConstants -> isf.common.utils.l1IlIlTI1T1T:
    java.lang.String cacheFolderName -> l1lTlT11ITlI1IIT
    java.lang.String logFolderName -> ll1TIIIT1lT1TIl1
    java.lang.String downloadFolderName -> TIITll1IITlT11l
    void <clinit>() -> <clinit>
isf.common.utils.CacheManagerConstants$Initial -> isf.common.utils.lI1lTIIlT1T1:
    int row -> a
    int col -> b
    int band -> c
    int bandTile -> d
    int size -> e
    java.lang.String name -> f
    isf.controls.view.listeners.ActiveXListener al -> g
    javax.swing.JComboBox box -> h
    isf.common.utils.PTMConfig ptm -> i
    java.lang.String getFolderName() -> IlTT11IT1ITI1lll
    java.lang.String getCacheFolderName() -> TIl1T1IlT1IIl1lT
    java.lang.String getLogFolderName() -> I1TTT1IIlTIll1l
    java.lang.String getDownloadFolderName() -> TIlIT11l1lIT1ITl
    void <init>() -> <init>
    int getRow() -> a
    void setRow(int) -> a
    int getCol() -> b
    void setCol(int) -> b
    int getBand() -> c
    void setBand(int) -> c
    int getBandTile() -> d
    void setBandTile(int) -> d
    int getSize() -> e
    void setSize(int) -> e
    java.lang.String getName() -> f
    void setName(java.lang.String) -> a
    void registerActivationListener(isf.controls.view.listeners.ActiveXListener) -> a
    void minimized(java.lang.String) -> b
    void activated(java.lang.String) -> c
    void deleted(java.lang.String) -> d
    void registerCombo(javax.swing.JComboBox) -> a
    void setConfig(isf.common.utils.PTMConfig) -> a
    isf.common.utils.PTMConfig getConfig() -> g
    double evalPoly(float[],double) -> a
    int computeMaximumOnCircle(float[],float[]) -> a
    java.util.ArrayList getNormals(byte[][],boolean,float[],float[]) -> a
    boolean IsZero(double) -> a
    float cbrt(double) -> b
    int SolveQuadric(double[],double[],int) -> a
    int SolveCubic(double[],double[]) -> a
    java.lang.String[] split(java.lang.String,java.lang.String) -> a
    float getFloatFromArray(byte[],int,int) -> a
    byte[] floatToByteArray(float) -> a
    javax.vecmath.Point3f normalize(javax.vecmath.Point3f) -> a
isf.common.utils.InscriptConfigLoader -> isf.common.utils.InscriptConfigLoader:
    java.util.Properties p -> TIIlT111IITTll1l
    java.lang.String appName -> ll1I1ITlTT11IlIT
    isf.common.utils.InscriptConfigLoader icl -> III1Tl1lTllTIT11
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    java.lang.String getAppName() -> getAppName
    void setAppName(java.lang.String) -> setAppName
    void <init>(java.lang.String) -> <init>
    isf.common.utils.InscriptConfigLoader initialize(java.lang.String) -> initialize
    isf.common.utils.InscriptConfigLoader getInstance() -> getInstance
    void load(java.lang.String) -> load
    java.lang.String getProperty(java.lang.String) -> getProperty
    void <clinit>() -> <clinit>
isf.common.utils.LogManager -> isf.common.utils.LogManager:
    void <init>() -> <init>
    org.apache.log4j.Logger getLogger(java.lang.String) -> getLogger
    org.apache.log4j.Logger getLogger(java.lang.Class) -> getLogger
    void <clinit>() -> <clinit>
isf.common.utils.PTMConfig -> isf.common.utils.Il1TI1lIT1lT:
    java.lang.String name -> name
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
isf.common.utils.ThreadExecutor -> isf.common.utils.lIlIITlTT111:
    isf.common.utils.ThreadExecutor executor -> Il1Tl1IT1T1IlTIl
    java.util.concurrent.ExecutorService threadPool -> llTIT11ITl1I1TlI
    java.util.concurrent.ExecutorService priorityPool -> llll1IITTT1IT1I1
    int count -> count
    void <init>() -> <init>
    isf.common.utils.ThreadExecutor getInstance() -> TIl1TTIIT11I1lll
    void execute(java.lang.Runnable,boolean) -> TT1lIT1ll1ITIIl1
isf.controls.controllers.ISFGarbageCollector -> isf.controls.l11lITTI.lI1lTIIlT1T1:
    int interval -> TIll1l1ITIIlT11T
    org.apache.log4j.Logger logger -> logger
    void <init>() -> <init>
    void run() -> run
isf.controls.controllers.ImageLoaderManager -> isf.controls.l11lITTI.Tl1l11IlIITT:
    isf.controls.view.listeners.ImageLoaderListener iLL -> llI1TTI1Il11lITT
    isf.controls.controllers.ImageLoaderManager img -> Tl1Tl11ITl1IlTII
    void <init>() -> <init>
    isf.controls.controllers.ImageLoaderManager getInstance() -> T11IITlllTT1IlI1
    void registerListener(isf.controls.view.listeners.ImageLoaderListener) -> TT1lIT1ll1ITIIl1
    isf.controls.view.listeners.ImageLoaderListener getLoader() -> l11TTIl11lITIlIT
isf.controls.controllers.IsfSplitManager -> isf.controls.l11lITTI.Il1TI1lIT1lT:
    isf.controls.controllers.IsfSplitManager ourInstance -> l11TlIlTITI1IT1l
    isf.controls.view.containers.ISFSplitPane verticalSplit -> T1TlI11TITIlIll1
    isf.controls.view.containers.ISFSplitPane horizontalSplit -> lIlI1T1T1llT1ITI
    isf.controls.controllers.IsfSplitManager getInstance() -> ll1TIIIT1lT1TIl1
    void <init>() -> <init>
    void setSplitPane(isf.controls.view.containers.ISFSplitPane,int) -> TT1lIT1ll1ITIIl1
    void updateState(int) -> l1IllT11TIIT1ITl
isf.controls.controllers.KeyProcessManager -> isf.controls.l11lITTI.l11lIlTTI1TI:
    isf.controls.controllers.KeyProcessManager ourInstance -> lTTTl11lI1IlII1T
    java.util.ArrayList handlers -> IlT1TTI1I1TlIll1
    isf.controls.controllers.KeyProcessManager getInstance() -> TIT1ITlI1lIl1lT1
    void <init>() -> <init>
    void addKeyHandler(isf.controls.view.listeners.KeyHandler) -> TT1lIT1ll1ITIIl1
isf.controls.controllers.LoadManager -> isf.controls.l11lITTI.T11ITIIllTl:
    isf.controls.controllers.LoadManager manager -> TllIITlI1l1TI1T1
    int current -> current
    int total -> total
    long maximum -> T1l1I1IITlT1ITll
    long actual -> TTT1IIlITI1ll11l
    long loaded -> I1lI1lTIl1IlTT1T
    long lastLoaded -> lI1T1Il1l1ITlTTI
    int count -> count
    boolean loading -> lI1lIT1lI1T1ITlT
    boolean fromStandalone -> Il1IIl1IT1TlTTl
    java.lang.String notLoaded -> TIlIT1l111IlTTIl
    javax.swing.JProgressBar bar1 -> llTl1l1TT1I1IIIT
    void <init>() -> <init>
    isf.controls.controllers.LoadManager getInstance() -> TIIlT111IITTll1l
    void updateCount() -> III1Tl1lTllTIT11
    void registerMonitor(javax.swing.JProgressBar) -> TT1lIT1ll1ITIIl1
    void update(long) -> update
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.controllers.PTMFrameManager -> isf.controls.l11lITTI.lIlIITlTT111:
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    isf.ptm.controls.PTMWindow panel -> IlT111IlTTTlIIl1
    isf.controls.controllers.PTMFrameManager manager -> lTITl11TI1lTIIl
    java.util.HashMap pfcl -> lTTI111I1ITlTIll
    double version -> TIlTlT1IIll11I1T
    int mode -> mode
    boolean autoClick -> IITIlllI1Tl11T1T
    java.util.HashMap copies -> T1T1TlIlIIT1I1ll
    boolean diffuse -> IIlT1TT1l1IIl1Tl
    boolean canChange -> TIl1l1I1TITllIT
    boolean light -> ITl1TlII1TTllI
    boolean isAutoClick() -> TIlll1TI1lITT1I
    void releaseChangeListeners() -> l1Il1TTIITIl1Tl
    void releaseChangeListener(isf.ptm.controls.PTMWindow) -> TT1lIT1ll1ITIIl1
    void refreshControls() -> I1ll11TlTIITlT1I
    void setPTMWindow(isf.ptm.controls.PTMWindow) -> ITI1llTTI1lITl
    void addCopies(java.lang.String,javax.swing.JInternalFrame) -> TT1lIT1ll1ITIIl1
    java.util.Vector getCopies(java.lang.String) -> llITlIlTI11T11IT
    void removeCopies(java.lang.String) -> IT11TTIllIIl1T1l
    isf.ptm.controls.PTMWindow getPTMWindow() -> TI1T1llllTII1IT1
    void <init>() -> <init>
    isf.controls.controllers.PTMFrameManager getInstance() -> Il1Tl1IT1T1IlTIl
    isf.controls.view.containers.PTMPanel getNewPTMPanel() -> llTIT11ITl1I1TlI
    void setDiffuseOperation(boolean,boolean) -> TT1lIT1ll1ITIIl1
    void setLightOperation(boolean) -> l1IlTT1lITIl1IT1
    isf.controls.view.controls.ISFButton[] getPTMButtons() -> IT11l1lTIlII1TTl
    int getMode() -> getMode
    void setMode(int) -> setMode
    void <clinit>() -> <clinit>
isf.controls.controllers.ToolbarManager -> isf.controls.l11lITTI.Il1TlIT1lTI1:
    isf.controls.controllers.ToolbarManager manager -> l11lIIT1TI1lITTl
    isf.controls.view.controls.SidToolbar bar -> l11I1TTlTIlIlT1I
    void <init>() -> <init>
    isf.controls.controllers.ToolbarManager getInstance() -> IT11l1lTTI1lTIlI
    void registerToolbar(isf.controls.view.controls.SidToolbar) -> TT1lIT1ll1ITIIl1
    void updateToolbar() -> ITIlTITl111TlIl
    void <clinit>() -> <clinit>
isf.controls.models.DesktopDataObject -> isf.controls.I11lIlTT.l1IlIlTI1T1T:
    java.lang.String header -> IIII1lT1lT1ll1TT
    java.lang.String displayName -> TITIlT111IllT1lI
    java.lang.String fileName -> fileName
    boolean added -> Tl1111TllITTIIlI
    java.lang.String photoIdenNo -> IIl1lTI1TIT11llT
    isf.common.utils.PTMConfig config -> I1lT1lTITIlT1Il1
    boolean copy -> TT1lT1I1I1lITlIl
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,isf.common.utils.PTMConfig) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    isf.common.utils.PTMConfig getConfig() -> lT1TlTIlIlT1I1I1
    boolean isCopy() -> l1ll1TTIIl1IITT
    void setCopy(boolean) -> IlITlTTTl11Il1I
isf.controls.plaf.DesktopTheme -> isf.controls.plaf.l1IlIlTI1T1T:
    java.awt.Color titleColor -> titleColor
    void <init>(java.awt.Color) -> <init>
    javax.swing.plaf.ColorUIResource getWindowTitleForeground() -> getWindowTitleForeground
    javax.swing.plaf.ColorUIResource getWindowTitleInactiveForeground() -> getWindowTitleInactiveForeground
    javax.swing.plaf.ColorUIResource getWindowTitleBackground() -> getWindowTitleBackground
    javax.swing.plaf.ColorUIResource getWindowTitleInactiveBackground() -> getWindowTitleInactiveBackground
    javax.swing.plaf.ColorUIResource getPrimaryControl() -> getPrimaryControl
isf.controls.plaf.GeneralMenuItemUI -> isf.controls.plaf.GeneralMenuItemUI:
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void <init>() -> <init>
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
isf.controls.plaf.GeneralMenuUI -> isf.controls.plaf.GeneralMenuUI:
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void <init>() -> <init>
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
isf.controls.plaf.IPArrowButton -> isf.controls.plaf.lI1lTIIlT1T1:
    isf.controls.plaf.IPArrowIcon arrowIcon -> I1l1IIITll1l1TTT
    void <init>(int) -> <init>
    boolean isFocusable() -> isFocusable
    void paint(java.awt.Graphics) -> paint
isf.controls.plaf.IPArrowIcon -> isf.controls.plaf.Tl1l11IlIITT:
    java.awt.Polygon arrowPolygon -> I1TTIll1TIllI11T
    java.awt.Polygon downArrowPolygon -> TTTI1TIl1l11IlIl
    java.awt.Color glyphColor -> TTIl11IITI1l1llT
    java.awt.Polygon leftArrowPolygon -> TIlTlT1ITl1lI1I
    int orientation -> orientation
    boolean paintGlyph -> IIlIlTTI1TTl1l1
    java.awt.Polygon rightArrowPolygon -> llTI1I11llTITIT
    java.awt.Polygon upArrowPolygon -> l11T1TIlIlIlTIT
    void <init>() -> <init>
    void <init>(int) -> <init>
    int getIconHeight() -> getIconHeight
    int getIconWidth() -> getIconWidth
    int getOrientation() -> getOrientation
    void paintIcon(java.awt.Component,java.awt.Graphics,int,int) -> paintIcon
    void setGlyphColor(java.awt.Color) -> l1IlTT1lITIl1IT1
isf.controls.plaf.IPButtonIcon -> isf.controls.plaf.Il1TI1lIT1lT:
isf.controls.plaf.IPButtonUI -> isf.controls.plaf.IPButtonUI:
    isf.controls.plaf.IPButtonUI buttonUI -> Tl11TI1T1IIIlTll
    int radiant -> T1IlT1ITll1Il1TI
    java.awt.Color backgroundColor -> backgroundColor
    java.awt.Color borderColor -> borderColor
    javax.swing.plaf.FontUIResource defaultFont -> IT1l1I1TT1TlIllI
    java.awt.Color disabledBackgroundColor -> TIl1lT1IITl1I1Tl
    java.awt.Color disabledBorderColor -> TIll1IT1TlTI1lI
    java.awt.Color disabledForegroundColor -> ITl1lTT1llI1TII1
    java.awt.Color foregroundColor -> foregroundColor
    java.awt.Color rolloverBackgroundColor -> IllI1TTT1lIITl1
    javax.swing.plaf.FontUIResource rolloverFont -> lIl1IlTIl1TT1T1I
    java.awt.Color rolloverForegroundColor -> TII1l1TIllI1lTT
    java.awt.Color selectedBackgroundColor -> IlTllITI1I1TlT1
    java.awt.Color selectedForegroundColor -> TTIIlllIT11TlI1
    java.awt.Color flushableBackgroundColor -> lTI1ITIlIll1T11T
    java.awt.Color flushableForgroundColor -> TT1ITllll1TII1I1
    java.awt.Color flushableBorderColor -> TTI1TIlllII1T1l1
    javax.swing.plaf.FontUIResource flushableFont -> T1Tl1Tl1TIlIlII
    java.awt.Rectangle iconRectangle -> l1TITTIIlI11Tll
    java.awt.Rectangle textRectangle -> TIllITl1lTI1T1I1
    java.awt.Rectangle viewRectangle -> TlIllTT11ITl1I1I
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void <init>() -> <init>
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
    void installDefaults(javax.swing.AbstractButton) -> installDefaults
    void setBackgroundColor(java.awt.Color) -> IlITlTTTl11Il1I
    void <clinit>() -> <clinit>
isf.controls.plaf.IPComboBoxUI -> isf.controls.plaf.IPComboBoxUI:
    void <init>() -> <init>
    javax.swing.plaf.basic.ComboPopup createPopup() -> createPopup
isf.controls.plaf.IPComboBoxUI$1 -> isf.controls.plaf.l11lIlTTI1TI:
    isf.controls.plaf.IPComboBoxUI this$0 -> TlI1lIIT1TlTI11l
    void <init>(isf.controls.plaf.IPComboBoxUI,javax.swing.JComboBox) -> <init>
    void show() -> show
isf.controls.plaf.IPScrollBarUI -> isf.controls.plaf.IPScrollBarUI:
    java.awt.Color backgroundColor -> backgroundColor
    java.awt.Color borderColor -> borderColor
    javax.swing.border.Border buttonBorder -> ITI11llTll1I1ITT
    java.awt.Color disabledBackgroundColor -> TIl1lT1IITl1I1Tl
    java.awt.Color disabledBorderColor -> TIll1IT1TlTI1lI
    boolean isArmed -> TlII1TTTIl11lIl1
    boolean isRollover -> IIlITllT11I1T1Tl
    java.awt.event.MouseListener mouseListener -> mouseListener
    java.awt.Color rolloverBackgroundColor -> IllI1TTT1lIITl1
    java.awt.Color selectedForegroundColor -> TTIIlllIT11TlI1
    java.awt.Color thumbBackgroundColor -> TITlTIl1I11lTl1I
    java.awt.Color thumbRolloverBackgroundColor -> l1I1TIT1lIllT1IT
    java.awt.Color trackBackgroundColor -> T1ITllTI11l1ITIl
    void <init>() -> <init>
    void configureArrowButton(javax.swing.JButton) -> TT1lIT1ll1ITIIl1
    javax.swing.JButton createDecreaseButton(int) -> createDecreaseButton
    javax.swing.JButton createIncreaseButton(int) -> createIncreaseButton
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    java.awt.Dimension getPreferredSize(javax.swing.JComponent) -> getPreferredSize
    void installDefaults() -> installDefaults
    void installListeners() -> installListeners
    void paintThumb(java.awt.Graphics,javax.swing.JComponent,java.awt.Rectangle) -> paintThumb
    void paintTrack(java.awt.Graphics,javax.swing.JComponent,java.awt.Rectangle) -> paintTrack
    void setArmed(boolean) -> setArmed
    void setRollover(boolean) -> setRollover
    void uninstallDefaults() -> uninstallDefaults
    void uninstallListeners() -> uninstallListeners
    javax.swing.border.Border access$000(isf.controls.plaf.IPScrollBarUI) -> ITI1llTTI1lITl
isf.controls.plaf.IPScrollBarUI$IPScrollBarArrowButton -> isf.controls.plaf.lIlIITlTT111:
    isf.controls.plaf.IPScrollBarUI this$0 -> lIITIl1I1lTTl11T
    void setBorder(javax.swing.border.Border) -> setBorder
    void paint(java.awt.Graphics) -> paint
    void <init>(isf.controls.plaf.IPScrollBarUI,int) -> <init>
isf.controls.plaf.IPScrollBarUI$IPScrollBarMouseListener -> isf.controls.plaf.Il1TlIT1lTI1:
    isf.controls.plaf.IPScrollBarUI this$0 -> lIITIl1I1lTTl11T
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void <init>(isf.controls.plaf.IPScrollBarUI) -> <init>
isf.controls.plaf.IPScrollPaneUI -> isf.controls.plaf.IPScrollPaneUI:
    void <init>() -> <init>
    void installDefaults(javax.swing.JScrollPane) -> installDefaults
    void uninstallDefaults(javax.swing.JScrollPane) -> uninstallDefaults
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
isf.controls.plaf.IPSplitPaneDivider -> isf.controls.plaf.IllTIT1l1IT1:
    int defaultDividerSize -> defaultDividerSize
    int thumbSize -> II11l1TTTIIllTl1
    java.awt.Color control -> IlTl1lI1TlIITT11
    javax.swing.ImageIcon icon1 -> Tl11l1TTIIIT1Ill
    javax.swing.ImageIcon icon2 -> IlTIl1IITTll11T1
    javax.swing.ImageIcon current -> lTlITT1lITlII
    void <init>(isf.controls.plaf.IPSplitPaneUI) -> <init>
    void setDividerSize(int) -> setDividerSize
    int getDividerSize() -> getDividerSize
    void paint(java.awt.Graphics) -> paint
    void paintTop$6d156780(java.awt.Graphics) -> a
    void paintBottom$3597fb83(java.awt.Graphics) -> b
    void paintLeft$6d156780(java.awt.Graphics) -> c
    void paintRight$3597fb83(java.awt.Graphics) -> d
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void changeImage() -> IT11TT1TI1IllllI
    void <clinit>() -> <clinit>
isf.controls.plaf.IPSplitPaneUI -> isf.controls.plaf.IPSplitPaneUI:
    void <init>() -> <init>
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void installDefaults() -> installDefaults
    javax.swing.plaf.basic.BasicSplitPaneDivider createDefaultDivider() -> createDefaultDivider
    isf.controls.plaf.IPSplitPaneDivider getIsfDivider() -> IT1TlTl1I1TIlIl
    int getDividerBorderSize() -> getDividerBorderSize
    void finishedPaintingChildren(javax.swing.JSplitPane,java.awt.Graphics) -> finishedPaintingChildren
    void finishDraggingTo(int) -> finishDraggingTo
    void dragDividerTo(int) -> dragDividerTo
    void startDragging() -> startDragging
isf.controls.plaf.IPVerticalLabelUI -> isf.controls.plaf.IPVerticalLabelUI:
    boolean clockwise -> TIlllIT1TITlI111
    java.awt.Rectangle paintIconR -> IlTITIl1I1T1lTl
    java.awt.Rectangle paintTextR -> TTTIlllI1I1IlT
    java.awt.Rectangle paintViewR -> llI1l11TTITTIlI
    java.awt.Insets paintViewInsets -> I1Tll1I1IlTTIl1T
    void <init>(boolean) -> <init>
    java.awt.Dimension getPreferredSize(javax.swing.JComponent) -> getPreferredSize
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
    void <clinit>() -> <clinit>
isf.controls.plaf.ISFComboBoxButton -> isf.controls.plaf.l1TI11ITTIll:
    javax.swing.JComboBox comboBox -> comboBox
    javax.swing.JList listBox -> listBox
    javax.swing.CellRendererPane rendererPane -> rendererPane
    javax.swing.Icon comboIcon -> comboIcon
    boolean iconOnly -> iconOnly
    javax.swing.Icon getComboIcon() -> getComboIcon
    void setIconOnly(boolean) -> setIconOnly
    void <init>() -> <init>
    void <init>(javax.swing.JComboBox,javax.swing.Icon,javax.swing.CellRendererPane,javax.swing.JList) -> <init>
    void <init>(javax.swing.JComboBox,javax.swing.Icon,boolean,javax.swing.CellRendererPane,javax.swing.JList) -> <init>
    boolean isFocusTraversable() -> isFocusTraversable
    void paintComponent(java.awt.Graphics) -> paintComponent
isf.controls.plaf.ISFComboBoxButton$1 -> isf.controls.plaf.IllTIIlT11T:
    isf.controls.plaf.ISFComboBoxButton this$0 -> ITITT1lTll11I1Il
    void <init>(isf.controls.plaf.ISFComboBoxButton) -> <init>
    void setArmed(boolean) -> setArmed
isf.controls.plaf.ISFComboBoxEditor -> isf.controls.plaf.TllIII11T1Tl:
    java.awt.Insets editorBorderInsets -> editorBorderInsets
    void <init>() -> <init>
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void <clinit>() -> <clinit>
isf.controls.plaf.ISFComboBoxEditor$EditorBorder -> isf.controls.plaf.ITl11lI1ITTl:
    isf.controls.plaf.ISFComboBoxEditor this$0 -> lTTlITlITI1111Il
    void <init>(isf.controls.plaf.ISFComboBoxEditor) -> <init>
    void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int) -> paintBorder
    java.awt.Insets getBorderInsets(java.awt.Component) -> getBorderInsets
isf.controls.plaf.ISFComboBoxEditor$UIResource -> isf.controls.plaf.IT1llT1I1lTI:
    void <init>() -> <init>
isf.controls.plaf.ISFComboBoxIcon -> isf.controls.plaf.I1TTIllTlI:
    void <init>() -> <init>
    void paintIcon(java.awt.Component,java.awt.Graphics,int,int) -> paintIcon
    int getIconWidth() -> getIconWidth
    int getIconHeight() -> getIconHeight
isf.controls.plaf.ISFComboBoxUI -> isf.controls.plaf.ISFComboBoxUI:
    void <init>() -> <init>
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
    javax.swing.ComboBoxEditor createEditor() -> createEditor
    javax.swing.plaf.basic.ComboPopup createPopup() -> createPopup
    javax.swing.JButton createArrowButton() -> createArrowButton
    java.beans.PropertyChangeListener createPropertyChangeListener() -> createPropertyChangeListener
    java.awt.LayoutManager createLayoutManager() -> createLayoutManager
    void layoutComboBox(java.awt.Container,isf.controls.plaf.ISFComboBoxUI$MetalComboBoxLayoutManager) -> TT1lIT1ll1ITIIl1
    void configureEditor() -> configureEditor
    void unconfigureEditor() -> unconfigureEditor
    java.awt.Dimension getMinimumSize(javax.swing.JComponent) -> getMinimumSize
    javax.swing.JButton access$000(isf.controls.plaf.ISFComboBoxUI) -> TT1lIT1ll1ITIIl1
    javax.swing.JComboBox access$100(isf.controls.plaf.ISFComboBoxUI) -> ITI1llTTI1lITl
    javax.swing.JComboBox access$200(isf.controls.plaf.ISFComboBoxUI) -> l1IlTT1lITIl1IT1
    javax.swing.JButton access$300(isf.controls.plaf.ISFComboBoxUI) -> lI1I1T1ITTl1llIT
    javax.swing.JButton access$400(isf.controls.plaf.ISFComboBoxUI) -> IlITlTTTl11Il1I
isf.controls.plaf.ISFComboBoxUI$MetalComboBoxLayoutManager -> isf.controls.plaf.Il1IlTT1l1IT:
    isf.controls.plaf.ISFComboBoxUI this$0 -> llTI1111TIIllTIT
    void <init>(isf.controls.plaf.ISFComboBoxUI) -> <init>
    void layoutContainer(java.awt.Container) -> layoutContainer
    void superLayout(java.awt.Container) -> superLayout
isf.controls.plaf.ISFComboBoxUI$MetalComboPopup -> isf.controls.plaf.I11IlTlI1TlT:
    int visible -> TlTllI1TI1T1II1l
    isf.controls.plaf.ISFComboBoxUI this$0 -> llTI1111TIIllTIT
    void <init>(isf.controls.plaf.ISFComboBoxUI,javax.swing.JComboBox) -> <init>
    void delegateFocus(java.awt.event.MouseEvent) -> delegateFocus
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void configurePopup() -> configurePopup
isf.controls.plaf.ISFComboBoxUI$MetalPropertyChangeListener -> isf.controls.plaf.l1ITTl1IlTI1:
    isf.controls.plaf.ISFComboBoxUI this$0 -> llTI1111TIIllTIT
    void <init>(isf.controls.plaf.ISFComboBoxUI) -> <init>
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
isf.controls.plaf.ISFSplitPaneDivider -> isf.controls.plaf.IlT1TI1llTI:
    javax.swing.border.Border border -> border
    isf.controls.plaf.ISFSplitPaneUI splitPaneUI -> lITT1TlI1lI1IT1l
    int inset -> IT1ITllI1lTI1T1l
    int dividerSize -> dividerSize
    int orientation -> orientation
    javax.swing.JSplitPane splitPane -> splitPane
    java.awt.Color controlColor -> TTTI11llTlIII1l
    java.awt.Color primaryControlColor -> Il1IlTT11TTI1llI
    javax.swing.JButton divBut -> ITIl1T1lIT11TIll
    void <init>(isf.controls.plaf.ISFSplitPaneUI) -> <init>
    void paint(java.awt.Graphics) -> paint
    int getOrientationFromSuper() -> getOrientationFromSuper
    javax.swing.JSplitPane getSplitPaneFromSuper() -> getSplitPaneFromSuper
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void setDividerSize(int) -> setDividerSize
    int getDividerSize() -> getDividerSize
    void setBorder(javax.swing.border.Border) -> setBorder
    java.awt.Insets getInsets() -> getInsets
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    javax.swing.border.Border getBorder() -> getBorder
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
    javax.swing.JButton access$000(isf.controls.plaf.ISFSplitPaneDivider) -> TT1lIT1ll1ITIIl1
isf.controls.plaf.ISFSplitPaneDivider$ISFDividerLayout -> isf.controls.plaf.TTITllII1l11:
    isf.controls.plaf.ISFSplitPaneDivider this$0 -> T1IlITlTl1TII1l1
    void <init>(isf.controls.plaf.ISFSplitPaneDivider) -> <init>
    void layoutContainer(java.awt.Container) -> layoutContainer
    java.awt.Dimension minimumLayoutSize(java.awt.Container) -> minimumLayoutSize
    java.awt.Dimension preferredLayoutSize(java.awt.Container) -> preferredLayoutSize
    void removeLayoutComponent(java.awt.Component) -> removeLayoutComponent
    void addLayoutComponent(java.lang.String,java.awt.Component) -> addLayoutComponent
isf.controls.plaf.ISFSplitPaneUI -> isf.controls.plaf.ISFSplitPaneUI:
    javax.swing.JSplitPane splitPane -> splitPane
    isf.controls.plaf.ISFSplitPaneDivider divider -> IlTIIT1Tl1llT1I
    int orientation -> orientation
    boolean continuousLayout -> continuousLayout
    boolean dividerKeyboardResize -> lT1lllITTIT1II11
    boolean dividerLocationIsSet -> IIllI11TI1TTT1ll
    int dividerSize -> dividerSize
    java.awt.Component nonContinuousLayoutDivider -> nonContinuousLayoutDivider
    boolean ignoreDividerLocationChange -> ignoreDividerLocationChange
    isf.controls.plaf.ISFSplitPaneUI$ISFHorizontalLayoutManager layoutManager -> IllTITT111IlIT1l
    void <init>() -> <init>
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void installUI(javax.swing.JComponent) -> installUI
    void installDefaults() -> installDefaults
    void resetLayoutManager() -> resetLayoutManager
    int getOrientation() -> getOrientation
    void setOrientation(int) -> setOrientation
    boolean isContinuousLayout() -> isContinuousLayout
    void setContinuousLayout(boolean) -> setContinuousLayout
    javax.swing.JSplitPane getSplitPane() -> getSplitPane
    int getDividerLocation(javax.swing.JSplitPane) -> getDividerLocation
    int getMinimumDividerLocation(javax.swing.JSplitPane) -> getMinimumDividerLocation
    int getMaximumDividerLocation(javax.swing.JSplitPane) -> getMaximumDividerLocation
    void finishedPaintingChildren(javax.swing.JSplitPane,java.awt.Graphics) -> finishedPaintingChildren
    void resetToPreferredSizes(javax.swing.JSplitPane) -> resetToPreferredSizes
    void setDividerLocation(javax.swing.JSplitPane,int) -> setDividerLocation
    int getLastDragLocation() -> getLastDragLocation
    void setNonContinuousLayoutDivider(java.awt.Component) -> setNonContinuousLayoutDivider
    void setNonContinuousLayoutDivider(java.awt.Component,boolean) -> setNonContinuousLayoutDivider
    java.awt.Component createDefaultNonContinuousLayoutDivider() -> createDefaultNonContinuousLayoutDivider
    boolean access$000(isf.controls.plaf.ISFSplitPaneUI) -> TT1lIT1ll1ITIIl1
    boolean access$002(isf.controls.plaf.ISFSplitPaneUI,boolean) -> TT1lIT1ll1ITIIl1
    int access$100(isf.controls.plaf.ISFSplitPaneUI) -> ITI1llTTI1lITl
isf.controls.plaf.ISFSplitPaneUI$1 -> isf.controls.plaf.TI1l1TlTIlI:
    isf.controls.plaf.ISFSplitPaneUI this$0 -> I1llIlTl1T11TIIT
    void <init>(isf.controls.plaf.ISFSplitPaneUI) -> <init>
    void paint(java.awt.Graphics) -> paint
isf.controls.plaf.ISFSplitPaneUI$ISFHorizontalLayoutManager -> isf.controls.plaf.IlI1Tl11TlTI:
    int[] sizes -> sizes
    java.awt.Component[] components -> components
    int lastSplitPaneSize -> TTll1I11II1TTlIl
    boolean doReset -> IIl1ITTlTl1IlT
    int axis -> axis
    isf.controls.plaf.ISFSplitPaneUI this$0 -> I1llIlTl1T11TIIT
    void <init>(isf.controls.plaf.ISFSplitPaneUI) -> <init>
    void <init>(isf.controls.plaf.ISFSplitPaneUI,int) -> <init>
    void layoutContainer(java.awt.Container) -> layoutContainer
    void addLayoutComponent(java.lang.String,java.awt.Component) -> addLayoutComponent
    java.awt.Dimension minimumLayoutSize(java.awt.Container) -> minimumLayoutSize
    java.awt.Dimension preferredLayoutSize(java.awt.Container) -> preferredLayoutSize
    void removeLayoutComponent(java.awt.Component) -> removeLayoutComponent
    void addLayoutComponent(java.awt.Component,java.lang.Object) -> addLayoutComponent
    float getLayoutAlignmentX(java.awt.Container) -> getLayoutAlignmentX
    float getLayoutAlignmentY(java.awt.Container) -> getLayoutAlignmentY
    void invalidateLayout(java.awt.Container) -> invalidateLayout
    java.awt.Dimension maximumLayoutSize(java.awt.Container) -> maximumLayoutSize
    void resetToPreferredSizes() -> resetToPreferredSizes
    int getMinimumSizeOfComponent(java.awt.Component) -> getMinimumSizeOfComponent
    int getSizeForPrimaryAxis(java.awt.Dimension) -> getSizeForPrimaryAxis
    int getSizeForSecondaryAxis(java.awt.Dimension) -> getSizeForSecondaryAxis
    int getSizeForPrimaryAxis(java.awt.Insets,boolean) -> getSizeForPrimaryAxis
    int getSizeForSecondaryAxis(java.awt.Insets,boolean) -> getSizeForSecondaryAxis
    void updateComponents() -> updateComponents
isf.controls.plaf.ISFSplitPaneUI$ISFVerticalLayoutManager -> isf.controls.plaf.ll1TTTlI11II:
    isf.controls.plaf.ISFSplitPaneUI this$0 -> I1llIlTl1T11TIIT
    void <init>(isf.controls.plaf.ISFSplitPaneUI) -> <init>
isf.controls.plaf.InscriptComboUI -> isf.controls.plaf.InscriptComboUI:
    void <init>() -> <init>
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
isf.controls.plaf.InscriptMenuItemUI -> isf.controls.plaf.InscriptMenuItemUI:
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void <init>() -> <init>
    void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
isf.controls.plaf.InscriptScrollBarUI -> isf.controls.plaf.InscriptScrollBarUI:
    void <init>() -> <init>
    javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent) -> createUI
    void paintThumb(java.awt.Graphics,javax.swing.JComponent,java.awt.Rectangle) -> paintThumb
isf.controls.utils.CatalogueConstants -> isf.controls.l1IT1lTI.l1IlIlTI1T1T:
    java.lang.String[][] photoCatalogueNames -> IT11IlT1lIIlTlT
    java.lang.String[][] photoDublinNames -> IlI1T1IlT1ITll1T
    void <clinit>() -> <clinit>
isf.controls.utils.CursorManager -> isf.controls.l1IT1lTI.lI1lTIIlT1T1:
    isf.controls.utils.CursorManager ourInstance -> lTTITIlT1lI1Il
    boolean wait -> TllTII1Il11lTI1T
    isf.controls.view.listeners.CursorListener cl -> I1TllIITlT1T1lI
    isf.controls.utils.CursorManager getInstance() -> IT1IllT1II11llTT
    void <init>() -> <init>
    void addCursorListener(isf.controls.view.listeners.CursorListener) -> TT1lIT1ll1ITIIl1
    void changeCursor(int) -> II11llTI1TlTITl1
    void changeCursor(java.awt.Cursor) -> TT1lIT1ll1ITIIl1
    java.awt.Cursor getCursor() -> getCursor
isf.controls.utils.GlassPaneManager -> isf.controls.l1IT1lTI.Tl1l11IlIITT:
    isf.controls.view.containers.ISFGlassPane jpanel -> I1T1l1lITIllITT1
    javax.swing.JRootPane jrp -> llITI11lTlII1T1T
    javax.swing.JFrame mainApp -> lIIT1T1llT1IlTI1
    isf.controls.utils.GlassPaneManager gpm -> TTll1I1TIIIlTl
    java.awt.Rectangle bounds -> bounds
    void <init>() -> <init>
    isf.controls.utils.GlassPaneManager getInstance() -> TTIlTI1lI1T1l1lI
    void showComponent(javax.swing.JComponent,java.awt.Rectangle) -> TT1lIT1ll1ITIIl1
    void hideAll() -> lI11l1lIlT1TTTII
    void setUpGlasssPane(javax.swing.JFrame) -> TT1lIT1ll1ITIIl1
    boolean isShowing() -> isShowing
    java.awt.Graphics getGraphics() -> getGraphics
    java.awt.Component getComponent() -> getComponent
isf.controls.utils.ResolutionManager -> isf.controls.l1IT1lTI.T11ITIIllTl:
    isf.controls.utils.ResolutionManager resolutionManager -> IlTll1IITlI1T11T
    java.awt.Dimension base -> T1I11TIll1TIlTlI
    java.awt.Dimension current -> lI1IlTTIIll11T1T
    isf.controls.view.listeners.ImageLoader imageLoader -> T1lITIlIl1TI1l1T
    java.lang.ClassLoader cl -> cl
    void <init>() -> <init>
    isf.controls.utils.ResolutionManager getInstance() -> TTII1lllT1T1IlI
    javax.swing.ImageIcon loadImage(java.lang.String) -> llT1lIITlIT11IT1
    javax.swing.ImageIcon getImageIcon(java.lang.String) -> T11TlTlTIlIlI1I
    double[] getRatio() -> IlTI11IlT1lTl1IT
isf.controls.view.containers.CatalougeWindow -> isf.controls.llIT1TI.l11lITTI.l1IlIlTI1T1T:
    isf.controls.view.controls.InscriptButton catButton -> l1TI1TIlIlTl11IT
    isf.controls.view.controls.InscriptButton dubButton -> T1lIT1llT1IlITI1
    javax.swing.JLabel title -> Il11I1lTI1TTTIll
    isf.controls.view.controls.InscriptButton close1 -> IIITlTlT1l1Il11T
    isf.controls.view.controls.InscriptButton close2 -> llTIT1TIIlI11l1T
    java.awt.Color bgColor -> T1IlTTIIIlll1T11
    javax.swing.ImageIcon icon -> T1T1lIlTTllIII
    javax.swing.ImageIcon titleIcon -> l1ITITTlITl11Il1
    javax.swing.ImageIcon closeRight -> lIl11IT1TITlI1Tl
    javax.swing.ImageIcon closeLeft -> II1Il1TITl1llTT1
    java.util.Hashtable ht -> ht
    isf.controls.view.listeners.CWListener cwl -> lIlI1IITll1TT1T1
    isf.controls.view.containers.InscriptTextPane cat -> IlIlII1llT1TT11T
    int width -> width
    javax.swing.JScrollPane jScrollPane1 -> TT1ITIllT1l1lI1I
    java.awt.event.MouseListener ml -> I1IT1lT1lTIIllT
    java.awt.event.MouseMotionListener mml -> ITTI11TlIlll1TI1
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    void <init>() -> <init>
    void addMouseListener(java.awt.event.MouseListener) -> addMouseListener
    void addMouseMotionListener(java.awt.event.MouseMotionListener) -> addMouseMotionListener
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void showDublinData() -> Tl1Tl11ITl1IlTII
    void showCatalougeData() -> I1TlTIl1ITTl1lI
    java.lang.String buildCatalougeData() -> I1TTl1TlIlT1l1II
    java.lang.String buildDubinData() -> l11TlIlTITI1IT1l
    java.lang.String getString(java.lang.Object,java.lang.String,java.lang.String) -> TT1lIT1ll1ITIIl1
    boolean isValid(java.lang.String) -> ITTTT11lIIIlll11
    javax.swing.ImageIcon access$000() -> T1TlI11TITIlIll1
    void <clinit>() -> <clinit>
isf.controls.view.containers.CatalougeWindow$1 -> isf.controls.llIT1TI.l11lITTI.lI1lTIIlT1T1:
    isf.controls.view.containers.CatalougeWindow this$0 -> TlIITl1T11ITll1I
    void <init>(isf.controls.view.containers.CatalougeWindow) -> <init>
    java.awt.Dimension getPreferredSize() -> getPreferredSize
isf.controls.view.containers.ISFGlassPane -> isf.controls.llIT1TI.l11lITTI.Il1TI1lIT1lT:
    javax.swing.JFrame frame -> IlT11I1ll1TITIlT
    java.awt.Point point -> I1llIllT1II11TTT
    boolean processEvent -> ITTll1I1T1I1llIT
    void <init>(javax.swing.JFrame) -> <init>
    void eventDispatched(java.awt.AWTEvent) -> eventDispatched
    boolean contains(int,int) -> contains
isf.controls.view.containers.ISFSplitPane -> isf.controls.llIT1TI.l11lITTI.l11lIlTTI1TI:
    int topHeight -> TII11lTTIll1ITl
    int lastPosition -> lllTITl1I1ITTI
    int curloc -> IITll1TT11Il1IlT
    void <init>() -> <init>
    void <init>(int,boolean,java.awt.Component,java.awt.Component,int,int) -> <init>
    void paintChildren(java.awt.Graphics) -> paintChildren
    int getMaximumDividerLocation() -> getMaximumDividerLocation
    int getMinimumDividerLocation() -> getMinimumDividerLocation
    void setOneSize(int) -> lITTlIlT1IlI1T
    void updateUI() -> updateUI
    void updateLocation() -> IlT1TTI1I1TlIll1
    void setDivider(int) -> ITl1I11TIlTlTlI1
    int getCurrentPos() -> getCurrentPos
    void changeImage() -> IT11TT1TI1IllllI
isf.controls.view.containers.ImagePanel -> isf.controls.llIT1TI.l11lITTI.T11ITIIllTl:
    java.awt.Graphics offScreen -> lIlTT1l11ITII1lT
    java.awt.image.BufferedImage offImg -> lI1TTT1l1llTI1II
    java.awt.Point sp -> lTT1llI1I1TlT1II
    java.awt.Point ep -> TII1ll1l1IlTTIT
    int ax -> ax
    int ay -> ay
    int aw -> lTlITlT1lII1IT11
    int ah -> I1IlT1llIT1Tl1IT
    boolean active -> active
    boolean working -> ITllTT11IllIT1I1
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    isf.controls.view.listeners.SizeChangeListener notifier -> T1IT1lTIIIT1l1ll
    void <init>() -> <init>
    void addImage(javax.swing.ImageIcon) -> l1IlTT1lITIl1IT1
    boolean isLoading() -> I11lT1lTlIIl1TIT
    boolean isPTMPanel() -> TllIITlI1l1TI1T1
    boolean isHSHPanel() -> T1l1I1IITlT1ITll
    boolean mustCurbResize() -> TTT1IIlITI1ll11l
    boolean isAtMaxLevel() -> I1lI1lTIl1IlTT1T
    void setMessageShown(boolean) -> TIITI1lTlTl1Il11
    boolean getMessageShown() -> lI1T1Il1l1ITlTTI
    void setStart(java.awt.Point) -> ITI1llTTI1lITl
    void setEnd(java.awt.Point) -> l1IlTT1lITIl1IT1
    void drawRect(java.awt.Graphics) -> TT1lIT1ll1ITIIl1
    java.lang.String getDetails() -> lI1lIT1lI1T1ITlT
    java.lang.String saveImage(java.lang.String,java.lang.String) -> l1IlTT1lITIl1IT1
    void setActive(boolean) -> setActive
    void setSizeNotifier(isf.controls.view.listeners.SizeChangeListener) -> TT1lIT1ll1ITIIl1
isf.controls.view.containers.InscriptTextPane -> isf.controls.llIT1TI.l11lITTI.lIlIITlTT111:
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    java.awt.Dimension dim -> I11TTlTl1ITIlI1l
    boolean scale -> TIlIT11l1lIT1ITl
    java.awt.event.MouseListener ml -> I1IT1lT1lTIIllT
    java.awt.event.MouseMotionListener mml -> ITTI11TlIlll1TI1
    void <init>(java.awt.Dimension,boolean) -> <init>
    void paint(java.awt.Graphics) -> paint
    void addMouseListener(java.awt.event.MouseListener) -> addMouseListener
    void addMouseMotionListener(java.awt.event.MouseMotionListener) -> addMouseMotionListener
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void hyperlinkUpdate(javax.swing.event.HyperlinkEvent) -> hyperlinkUpdate
isf.controls.view.containers.JIFrame -> isf.controls.llIT1TI.l11lITTI.Il1TlIT1lTI1:
    java.lang.String header -> IIII1lT1lT1ll1TT
    java.lang.String imgName -> IIIlTTll11I11TlT
    java.lang.String size -> lTl1lTTIIIT1l1I
    int orgLev -> II1llIl11TlITTT
    int maxLev -> TIlIl1T1Tl11lITI
    int curLev -> TTIT1llTIl1I1lI
    int wid -> lTTTI11IIll11TlI
    int hei -> IlTl111llITTIT1I
    int w -> w
    int h -> h
    java.lang.String cpx -> TIllIlT1I1T1TIl1
    java.lang.String cpy -> I1IITTT11lTlIll
    java.awt.Point start -> IITTTTllIl11I11l
    java.awt.Point end -> llI1lIIITTT1l11T
    int px -> px
    int py -> py
    isf.controls.view.containers.ViewerPanel jip -> TT1I1lTITll1lI1I
    boolean active -> active
    java.awt.Cursor zin -> TIITTlI1llI1lT11
    java.awt.Cursor zout -> lTlTIlIT11ITIl11
    java.awt.Cursor drsel -> l1TIlTITlTI1lI11
    java.awt.Cursor hando -> IT1TlI1lI1lTTl1I
    java.awt.Cursor handc -> IITT111lTlIIl1lT
    java.awt.Cursor light -> IT1TlI1TI11ITlll
    java.awt.Cursor old -> I1TllIlIl1ITT1T1
    int index -> index
    java.lang.String currentUrl -> TTl1l1ITIl1Il1IT
    boolean updated -> TTIlI111llTlTII
    org.apache.log4j.Logger logger -> logger
    javax.swing.JComponent comp -> l11TTT1I1IlIIllT
    java.awt.Rectangle rect -> rect
    boolean glassPaneShowing -> lIl1lTITITl1IT1
    boolean copy -> TT1lT1I1I1lITlIl
    void <init>() -> <init>
    void <init>(isf.controls.models.DesktopDataObject) -> <init>
    void <init>(isf.controls.models.DesktopDataObject,isf.ptm.formats.PTM) -> <init>
    void update() -> update
    void reset() -> reset
    void setLevel(int,int) -> TT1lIT1ll1ITIIl1
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void updateImg() -> TIlIT1l111IlTTIl
    float levelCvt(int,int) -> ITI1llTTI1lITl
    void calculateDiff() -> llTl1l1TT1I1IIIT
    void setBounds(int,int,int,int) -> setBounds
    void isActive(boolean) -> TTl1TITI1l1Il1lI
    java.lang.String getRet() -> l1TIlTIlIIlT1T1
    void setIndex(int) -> setIndex
    int getIndex() -> getIndex
    java.lang.String getProperties() -> lTITl11TI1lTIIl
    void resetAll() -> lTTI111I1ITlTIll
    void saveAs(java.lang.String) -> lITTT1lIlI1lTI
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    java.lang.String getImgName() -> TIlTlT1IIll11I1T
    void setMode(int) -> setMode
    isf.controls.view.containers.ImagePanel getImagePanel() -> IITIlllI1Tl11T1T
    boolean isCopy() -> l1ll1TTIIl1IITT
    isf.controls.view.containers.ViewerPanel access$000(isf.controls.view.containers.JIFrame) -> TT1lIT1ll1ITIIl1
    java.awt.Cursor access$100() -> access$100
    void <clinit>() -> <clinit>
isf.controls.view.containers.JIFrame$1 -> isf.controls.llIT1TI.l11lITTI.l1lIl1TTTI1I:
    isf.common.utils.PTMConfig val$config -> TITll11I11ITlTlI
    isf.controls.models.DesktopDataObject val$dsk -> l11TlTlTI1IlI1TI
    isf.controls.view.containers.JIFrame this$0 -> II1I1lI1TTll1TTl
    void <init>(isf.controls.view.containers.JIFrame,isf.common.utils.PTMConfig,isf.controls.models.DesktopDataObject) -> <init>
    void run() -> run
isf.controls.view.containers.JIFrame$2 -> isf.controls.llIT1TI.l11lITTI.TTl11llIITI:
    isf.controls.view.containers.JIFrame this$0 -> II1I1lI1TTll1TTl
    void <init>(isf.controls.view.containers.JIFrame) -> <init>
    void run() -> run
isf.controls.view.containers.PTMImpl -> isf.controls.llIT1TI.l11lITTI.IllTIT1l1IT1:
    void <init>() -> <init>
    void fitToSize() -> T1T1TlIlIIT1I1ll
    void addImage(javax.swing.ImageIcon) -> l1IlTT1lITIl1IT1
    void addImage(isf.common.utils.PTMConfig) -> l1IlTT1lITIl1IT1
    void addImage(isf.common.utils.PTMConfig,isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    void addImage(isf.controls.models.DesktopDataObject) -> TT1lIT1ll1ITIIl1
    void reset() -> reset
    boolean isLoading() -> I11lT1lTlIIl1TIT
    java.lang.String getDetails() -> lI1lIT1lI1T1ITlT
    isf.ptm.formats.PTM getPTM() -> TIll1IT1TlTI1lI
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void setMessageShown(boolean) -> TIITI1lTlTl1Il11
    boolean getMessageShown() -> lI1T1Il1l1ITlTTI
    boolean mustCurbResize() -> TTT1IIlITI1ll11l
    void setFrameActive(boolean) -> II11llTI1TlTITl1
isf.controls.view.containers.PTMPanel -> isf.controls.llIT1TI.l11lITTI.l1TI11ITTIll:
    isf.ptm.utils.LightSource[] lights -> T1lITlIT1I11ITll
    boolean lockLights -> ITlTll1lTTII111I
    void <init>() -> <init>
    void fitToSize() -> T1T1TlIlIIT1I1ll
    void addImage(isf.common.utils.PTMConfig) -> l1IlTT1lITIl1IT1
    void addImage(isf.common.utils.PTMConfig,isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    void addImage(isf.controls.models.DesktopDataObject) -> TT1lIT1ll1ITIIl1
    void reset() -> reset
    void setSizeNotifier(isf.controls.view.listeners.SizeChangeListener) -> TT1lIT1ll1ITIIl1
    boolean isPTMPanel() -> TllIITlI1l1TI1T1
isf.controls.view.containers.PTMPanelImpl -> isf.controls.llIT1TI.l11lITTI.IllTIIlT11T:
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    boolean animated -> Tl11lTl1IIIT1IlT
    boolean frameActive -> T11TTlTlIIlIIl11
    boolean loading -> lI1lIT1lI1T1ITlT
    boolean paintPosition -> II1lI1Tl1lTITT1l
    java.lang.Thread animator -> TIllIlITTIT1l111
    int mouseX -> TlII1T1Il1lIl1TT
    int mouseY -> TlI1TTlII1IT11ll
    short[] mutex -> TIlI11IlTlI1l1TT
    isf.ptm.operations.Operation pixelTransformOp -> Ill1lITlI1TTIT1
    isf.common.utils.CacheManagerConstants$Initial[] segments$3d59709f -> a
    int activeLight -> lI11Tl1lTITT1IlI
    isf.ptm.formats.PTM ptm -> I1TIllITT1I1l1Tl
    int curWid -> lI1Il1llITTT1TI
    int curHei -> II1I1l1TlTTlITl1
    boolean dragging -> TTllITTII1l11lI1
    java.lang.String fName -> fName
    java.lang.String thumbname -> lIl1ITTIl11TIT1l
    long size -> size
    double zoom -> TTlTl1l1lIT1III
    java.awt.image.BufferedImage actImg -> TTITII1TIll1l1l1
    int divx -> IT1TIllT1TlIl1I1
    int divy -> I1ll11TTIlIlT1IT
    float ratio -> l1TIIlTlT11TIlI
    int[] pixels -> Ill1I1I1TTlIl1TT
    int[] tiles -> TIl1TIlllI1T11IT
    int peices -> I11IlT1TllII1TlT
    int displayWidth -> I1IlT1lTlIITlT11
    int displayHeight -> IlT1II111llTITlT
    int rows -> rows
    int cols -> cols
    int segSize -> ll1lTIlTTI1I1I1T
    boolean hints -> IIlllTT11IlTIT
    boolean isFast -> llTIITT111Il1TIl
    boolean fixed -> fixed
    int width -> width
    int height -> height
    int posx -> IllII1TlT1lTTI1
    int posy -> Il1TTl1IT11llTII
    boolean contained -> lTTI1IlllI1I11TT
    boolean atMaxLevel -> Tl1I1I1I1lTlTlTI
    boolean shown -> l1lT1II1llTTITI1
    boolean drawRect -> I1I1llTTTTI1l1lI
    int obtained -> lT1TIIl1TlITl1I1
    boolean calculated -> llT11ITTITIl11lI
    boolean copied -> TTTIlII1T1l1ll1I
    isf.controls.view.containers.StatusPanel status -> IT1Tl11ll1ITlTII
    int newPX -> l1lITTITlIlTI1
    int newPY -> T1T11IIlllI1TITl
    int newMX -> llIl1Tl11IIITT1T
    int newMY -> TlITTTII1ll1Il1
    int newDW -> II1l11TIlIlT1TTl
    int newDH -> lIITIIlT111T1Tll
    float factor -> IT11lII1ll1TTIlT
    int MAXPIXELS -> T1l1IllIT11TTlII
    boolean thumbnailCached -> TITlTl1TIl11II1l
    float dxLight -> lITTlI1T1I1lI1lT
    float dyLight -> ITTlIllIlT1IT1
    int clickXImageCoordinate -> TllITTl11IIlI11T
    int clickYImageCoordinate -> TllTIlTTIII111l
    isf.common.utils.PTMConfig config -> I1lT1lTITIlT1Il1
    int times -> II111llT1lITITlT
    boolean isRTI -> l1IlTIlIT11TTIl
    boolean firstView -> II1I1IT11lTlTTll
    boolean multiView -> ll1T1ITTlIlII1T
    void <init>() -> <init>
    void fireTransform() -> IIII1lT1lT1ll1TT
    boolean isAdditionalLight() -> TIl1l1I1TITllIT
    isf.ptm.formats.PTM getPTM() -> TIll1IT1TlTI1lI
    void loadLocalFile(java.lang.String) -> T1TllIll1T1II1IT
    void loadFile(isf.common.utils.PTMConfig) -> lI1I1T1ITTl1llIT
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void paint(java.awt.Graphics) -> paint
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void run() -> run
    void setAnimated(boolean) -> setAnimated
    void start() -> start
    void addImage(javax.swing.ImageIcon) -> l1IlTT1lITIl1IT1
    void addImage(isf.common.utils.PTMConfig) -> l1IlTT1lITIl1IT1
    void addImage(isf.controls.models.DesktopDataObject) -> TT1lIT1ll1ITIIl1
    boolean isLoading() -> I11lT1lTlIIl1TIT
    boolean isPTMPanel() -> TllIITlI1l1TI1T1
    boolean isHSHPanel() -> T1l1I1IITlT1ITll
    void zoomToFitDisplay() -> Tl11TI1T1IIIlTll
    java.lang.String getDetails() -> lI1lIT1lI1T1ITlT
    java.lang.String arrayToString(float[]) -> l1IlTT1lITIl1IT1
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
    void componentShown(java.awt.event.ComponentEvent) -> componentShown
    void componentHidden(java.awt.event.ComponentEvent) -> componentHidden
    void fitToSize() -> T1T1TlIlIIT1I1ll
    void reset() -> reset
    void calculateValuesAtFullSize() -> IT1l1I1TT1TlIllI
    void performResizeOnPTM() -> TIl1lT1IITl1I1Tl
    boolean isAtMaxLevel() -> I1lI1lTIl1IlTT1T
    void setMessageShown(boolean) -> TIITI1lTlTl1Il11
    boolean getMessageShown() -> lI1T1Il1l1ITlTTI
    void addImage(isf.common.utils.PTMConfig,isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    boolean mustCurbResize() -> TTT1IIlITI1ll11l
    void calcLightVector() -> IllI1TTT1lIITl1
    void setFrameActive(boolean) -> II11llTI1TlTITl1
    void setDefaultLight() -> TII1l1TIllI1lTT
    void setEnd(java.awt.Point) -> l1IlTT1lITIl1IT1
    java.lang.String saveImage(java.lang.String,java.lang.String) -> l1IlTT1lITIl1IT1
    java.lang.String access$002(isf.controls.view.containers.PTMPanelImpl,java.lang.String) -> TT1lIT1ll1ITIIl1
    java.lang.String access$000(isf.controls.view.containers.PTMPanelImpl) -> TT1lIT1ll1ITIIl1
    java.lang.String access$102(isf.controls.view.containers.PTMPanelImpl,java.lang.String) -> ITI1llTTI1lITl
    long access$202(isf.controls.view.containers.PTMPanelImpl,long) -> TT1lIT1ll1ITIIl1
    isf.ptm.formats.PTM access$302(isf.controls.view.containers.PTMPanelImpl,isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    isf.ptm.formats.PTM access$300(isf.controls.view.containers.PTMPanelImpl) -> ITI1llTTI1lITl
    void access$400(isf.controls.view.containers.PTMPanelImpl) -> l1IlTT1lITIl1IT1
    org.apache.log4j.Logger access$500(isf.controls.view.containers.PTMPanelImpl) -> lI1I1T1ITTl1llIT
    void access$600(isf.controls.view.containers.PTMPanelImpl) -> IlITlTTTl11Il1I
    boolean access$702(isf.controls.view.containers.PTMPanelImpl,boolean) -> TT1lIT1ll1ITIIl1
    long access$200(isf.controls.view.containers.PTMPanelImpl) -> IT11TT1lIll1ITIl
    void access$800(isf.controls.view.containers.PTMPanelImpl) -> TIITI1lTlTl1Il11
    short[] access$900(isf.controls.view.containers.PTMPanelImpl) -> TTl1TITI1l1Il1lI
    isf.common.utils.CacheManagerConstants$Initial[] access$1100$34cdf9d(isf.controls.view.containers.PTMPanelImpl) -> a
    int access$1200(isf.controls.view.containers.PTMPanelImpl) -> l1IllT11TIIT1ITl
    int access$1300(isf.controls.view.containers.PTMPanelImpl) -> l1lT1IlI1IlT1TIT
    int access$1400(isf.controls.view.containers.PTMPanelImpl) -> IlIT1lT1TI1IlT1l
    boolean access$1500(isf.controls.view.containers.PTMPanelImpl) -> II11llTI1TlTITl1
    int access$1302(isf.controls.view.containers.PTMPanelImpl,int) -> TT1lIT1ll1ITIIl1
    int access$1402(isf.controls.view.containers.PTMPanelImpl,int) -> ITI1llTTI1lITl
    int access$1600(isf.controls.view.containers.PTMPanelImpl) -> T1TlITlIl11I1TIl
    isf.ptm.operations.Operation access$1700(isf.controls.view.containers.PTMPanelImpl) -> Il1II1TlT1llTI1T
    int[] access$1800(isf.controls.view.containers.PTMPanelImpl) -> lITTlIlT1IlI1T
    void <clinit>() -> <clinit>
isf.controls.view.containers.PTMPanelImpl$1 -> isf.controls.llIT1TI.l11lITTI.TllIII11T1Tl:
    long start -> start
    java.lang.String val$ptmFile -> lT11l1TllTITI1II
    isf.controls.view.containers.PTMPanelImpl this$0 -> TllT1lII11lITTI
    void <init>(isf.controls.view.containers.PTMPanelImpl,java.lang.String) -> <init>
    java.lang.Object construct() -> TTIIlllIT11TlI1
    void finished() -> finished
isf.controls.view.containers.PTMPanelImpl$1$1 -> isf.controls.llIT1TI.l11lITTI.ITl11lI1ITTl:
    isf.controls.view.containers.PTMPanelImpl$1 this$1 -> TIIl111lITITllT1
    void <init>(isf.controls.view.containers.PTMPanelImpl$1) -> <init>
    void run() -> run
isf.controls.view.containers.PTMPanelImpl$3 -> isf.controls.llIT1TI.l11lITTI.Il1IlTT1l1IT:
    java.lang.String val$ptmFile -> lT11l1TllTITI1II
    isf.controls.view.containers.PTMPanelImpl this$0 -> TllT1lII11lITTI
    void <init>(isf.controls.view.containers.PTMPanelImpl,java.lang.String) -> <init>
    java.lang.Object construct() -> TTIIlllIT11TlI1
    void finished() -> finished
isf.controls.view.containers.PTMPanelImpl$4 -> isf.controls.llIT1TI.l11lITTI.I11IlTlI1TlT:
    isf.controls.view.containers.PTMPanelImpl this$0 -> TllT1lII11lITTI
    void <init>(isf.controls.view.containers.PTMPanelImpl) -> <init>
    java.lang.Object construct() -> TTIIlllIT11TlI1
    void finished() -> finished
isf.controls.view.containers.PTMPanelImpl$FetchImage -> isf.controls.llIT1TI.l11lITTI.l1ITTl1IlTI1:
    java.lang.String file -> file
    int index -> index
    isf.ptm.formats.PTM ptm -> I1TIllITT1I1l1Tl
    int row -> row
    int col -> col
    int tilew -> llITlIT1ITIT11l1
    int tileh -> IlTT1llIl1TIIT11
    int band -> IlI1Il1T1TlTITl1
    int top -> top
    int left -> left
    int tileIndex -> TIllIl1ITTTI111l
    isf.controls.view.containers.PTMPanelImpl this$0 -> TllT1lII11lITTI
    void <init>(isf.controls.view.containers.PTMPanelImpl,isf.common.utils.CacheManagerConstants$Initial,isf.ptm.formats.PTM) -> <init>
    void run() -> run
isf.controls.view.containers.PTMPanelImpl$UpdateProgress -> isf.controls.llIT1TI.l11lITTI.IlT1TI1llTI:
    boolean changed -> TI1lII1lTllT11IT
    javax.swing.Timer timer -> timer
    int count -> count
    isf.controls.view.containers.PTMPanelImpl this$0 -> TllT1lII11lITTI
    void <init>(isf.controls.view.containers.PTMPanelImpl) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.containers.PTMPanelImpl$UpdateProgress$1 -> isf.controls.llIT1TI.l11lITTI.TIlT1lTIIl:
    isf.controls.view.containers.PTMPanelImpl$UpdateProgress this$1 -> llIl1T1Tl1ITTII1
    void <init>(isf.controls.view.containers.PTMPanelImpl$UpdateProgress) -> <init>
    void run() -> run
isf.controls.view.containers.ProgressPane -> isf.controls.llIT1TI.l11lITTI.T1lTlIIlT1I:
    javax.swing.JPanel panel -> lI1TTlTlI1Il1TI
    javax.swing.JProgressBar progress -> I11llTIT1IlT1lTI
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    void <init>() -> <init>
    void registerBar() -> TT1ITllll1TII1I1
    java.lang.String fetchFileNames() -> TTI1TIlllII1T1l1
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
isf.controls.view.containers.ProgressPane$1 -> isf.controls.llIT1TI.l11lITTI.TTITllII1l11:
    isf.controls.view.containers.ProgressPane this$0 -> ll1T1TTIIII1lTl1
    void <init>(isf.controls.view.containers.ProgressPane) -> <init>
    java.awt.Dimension getPreferredSize() -> getPreferredSize
isf.controls.view.containers.SidPanel -> isf.controls.llIT1TI.l11lITTI.TI1l1TlTIlI:
    javax.swing.ImageIcon ic -> TT1TTIlIl1llI1I1
    int width -> width
    int height -> height
    int maxlevel -> lTlTIII1TI1T1ll1
    int curlevel -> I1TlTlT1Il11ITlI
    java.lang.String imgName -> IIIlTTll11I11TlT
    java.lang.String fileSize -> llT1ITTIIl1l11TI
    boolean firstTime -> firstTime
    boolean shown -> l1lT1II1llTTITI1
    void <init>() -> <init>
    void addImage(javax.swing.ImageIcon) -> l1IlTT1lITIl1IT1
    void paint(java.awt.Graphics) -> paint
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    boolean isAtMaxLevel() -> I1lI1lTIl1IlTT1T
    boolean isLoading() -> I11lT1lTlIIl1TIT
    java.lang.String getDetails() -> lI1lIT1lI1T1ITlT
    void setImgWidth(int) -> lITT1Il1TIl1lTI
    void setImgHeight(int) -> I1TT1IIll1ll1TTI
    void setMaxLevel(int) -> Tll11l1T1TITIlII
    void setCurLevel(int) -> I1lITT1lTT11lIIl
    void setFileSize(java.lang.String) -> ITlTTIlII11T1ll1
    void setImgName(java.lang.String) -> TITlT1lIlTI1l1I
    void setMessageShown(boolean) -> TIITI1lTlTl1Il11
    boolean getMessageShown() -> lI1T1Il1l1ITlTTI
    boolean mustCurbResize() -> TTT1IIlITI1ll11l
isf.controls.view.containers.StatusPanel -> isf.controls.llIT1TI.l11lITTI.IlI1Tl11TlTI:
    isf.controls.view.controls.ISFProgressBar bar -> TTI11l1ITlIlT1lI
    void <init>() -> <init>
    void showStatus(java.lang.String) -> showStatus
    void start() -> start
    void stop() -> stop
isf.controls.view.containers.TrimmedPanel -> isf.controls.llIT1TI.l11lITTI.ll1TTTlI11II:
    java.awt.Insets ins -> lT11IlTlTITlII11
    void <init>() -> <init>
    void <init>(java.awt.Insets) -> <init>
    java.awt.Insets getInsets() -> getInsets
isf.controls.view.containers.ViewDesktop -> isf.controls.llIT1TI.l11lITTI.lITIIlTT1l:
    isf.controls.view.listeners.ViewDesktopListener vdListener -> TT1T1IlITIlIll11
    isf.controls.view.containers.ViewDesktopPanels vdtPanels -> TllIITIT1lIlT11
    java.util.Vector v -> TITllI1IT1T1Ill
    java.awt.Frame parent -> l1T1I1llITI1TTlI
    isf.controls.view.containers.CatalougeWindow cp -> IITTl11lIlITl1T
    java.awt.Rectangle old -> ITTTlIITI111l1ll
    java.awt.Point p -> T1T1IIlI1lT1TlIl
    java.awt.Point temp -> ITIll1TIT111IllT
    int xposition -> Tl1llTII1Il11TTI
    int yposition -> TTl1lI1TITllII
    void <init>() -> <init>
    void <init>(java.awt.Frame) -> <init>
    void init() -> init
    void addDataObject(isf.controls.models.DesktopDataObject) -> l1IlTT1lITIl1IT1
    void addDummy(java.lang.String) -> IT1lTll1IT1lII1T
    void addViewDesktopListener(isf.controls.view.listeners.ViewDesktopListener) -> TT1lIT1ll1ITIIl1
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    java.awt.Insets getInsets() -> getInsets
    isf.controls.view.listeners.ViewDesktopListener getVDL() -> TlI1lIIT1TlTI11l
    void activationChanged() -> IIlITllT11I1T1Tl
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
isf.controls.view.containers.ViewDesktopPanels -> isf.controls.llIT1TI.l11lITTI.ITTII1T1l1ll:
    java.awt.event.ActionListener al -> IT11lIl1lTI1lITT
    isf.controls.view.controls.ViewDesktopButton emptyButton -> IllI1l1TI1Tl1TIT
    isf.controls.view.controls.InscriptButton catButton -> l1TI1TIlIlTl11IT
    isf.controls.view.controls.InscriptButton dublincatButton -> l1lII11TTTI1lIlT
    isf.controls.view.controls.ViewDesktopButton button -> IlTT11IIIllTl1T
    javax.swing.JPanel emptyPanel -> lTI1TTIlT1lIlI11
    javax.swing.JPanel dataPanel -> lT1l1ITI1l1ITlTI
    javax.swing.JPanel catalogPanel -> l111lTIlITIl1ITT
    java.util.Vector imageList -> llIT11ITITl11TlI
    int activeIndex -> T1TTlIlIIIlTl
    isf.controls.view.listeners.ActivationListener acl -> lI1TITI1lI1l1TlT
    boolean notified -> notified
    int index -> index
    boolean border1 -> l1IITTlI1T1IlTl
    boolean border2 -> lIITl11llTTI11TI
    java.lang.String mode -> TTIlTI1lI1T1l1lI
    java.lang.String appName -> ll1I1ITlTT11IlIT
    org.apache.log4j.Logger logger -> logger
    void <init>() -> <init>
    void addDataObject(isf.controls.models.DesktopDataObject) -> l1IlTT1lITIl1IT1
    void addDummy(java.lang.String) -> IT1lTll1IT1lII1T
    java.util.Vector getDataList() -> TITlTIl1I11lTl1I
    void addActionListener(java.awt.event.ActionListener) -> addActionListener
    void addActivationListener(isf.controls.view.listeners.ActivationListener) -> TT1lIT1ll1ITIIl1
    java.awt.Insets getInsets() -> getInsets
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void minimized(java.lang.String) -> ITlT1IITl11l1lTI
    void activated(java.lang.String) -> l1TlT1T1IlIII1Tl
    java.util.Hashtable getActiveImageData() -> l1I1TIT1lIllT1IT
    void deleted(java.lang.String) -> TTT11I1lI1llTIIl
    void buttonSelected(java.lang.String) -> TlTI11TIT1lIIll
isf.controls.view.containers.ViewerPanel -> isf.controls.llIT1TI.l11lITTI.TlIT11IITll:
    isf.controls.view.containers.ImagePanel panel -> IlTTI11lTIITl1l
    isf.controls.view.containers.StatusPanel status -> IT1Tl11ll1ITlTII
    java.lang.String type -> type
    javax.swing.JLabel label -> label
    void <init>(java.lang.String) -> <init>
    isf.controls.view.containers.ImagePanel getPanel() -> T1ITllTI11l1ITIl
    isf.controls.view.containers.StatusPanel getStatus() -> lIITIl1I1lTTl11T
    void updateSize(java.lang.String) -> IllTT1IITl11lT1I
isf.controls.view.controls.ISFButton -> isf.controls.llIT1TI.I11lIlTT.l1IlIlTI1T1T:
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void setSelected(boolean) -> setSelected
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Insets getInsets() -> getInsets
isf.controls.view.controls.ISFProgressBar -> isf.controls.llIT1TI.I11lIlTT.lI1lTIIlT1T1:
    int SLOW -> IIlTTl11IlTlIT
    int speed -> I1IlII1lTlTTl11T
    javax.swing.Timer timer -> timer
    boolean running -> running
    java.awt.Color bgColor -> T1IlTTIIIlll1T11
    java.awt.Color forecolor -> llT1IIl1TIIT1lT
    java.awt.Color barBgColor -> lTl1IllIITTIT111
    java.util.ArrayList bars -> TT11TllllTI1II1I
    boolean rectsInitialized -> lTTIl1Tl11lIIT1I
    java.awt.Dimension size -> size
    int LEFT -> LEFT
    int RIGHT -> RIGHT
    int HIGH -> ITII1TT11lIlTll
    int MED -> IlII1TTTlTI1l1l1
    int LOW -> lTTlTl1T1I11IIlI
    int OFF -> OFF
    int pos -> pos
    int direction -> direction
    java.lang.String message -> message
    java.awt.image.BufferedImage backBuffer -> IIl1llT1TT1lIIT1
    java.util.HashMap colorMap -> IlITl1lTTlI11TI1
    void <init>(java.awt.Color) -> <init>
    void setText(java.lang.String) -> setText
    void setBackgroundColor(java.awt.Color) -> IlITlTTTl11Il1I
    void setForegroundColor(java.awt.Color) -> IT11TT1lIll1ITIl
    java.awt.Color getLighterColor(java.awt.Color) -> IITTlT11lII1T1ll
    void paint(java.awt.Graphics) -> paint
    void stopAnimation() -> Il1TTlI1lIIlT1T
    void initializeBars() -> IIITlTllIT1Tl1
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void startAnimation() -> II11l1TTTIIllTl1
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void <clinit>() -> <clinit>
isf.controls.view.controls.ISFProgressBar$Bar -> isf.controls.llIT1TI.I11lIlTT.Tl1l11IlIITT:
    int state -> state
    java.awt.Rectangle rect -> rect
    boolean stateModified -> ll1I1I1TTl1TITlI
    isf.controls.view.controls.ISFProgressBar this$0 -> l11IITT1TIlIll1T
    void <init>(isf.controls.view.controls.ISFProgressBar,int) -> <init>
    void setRect(java.awt.Rectangle) -> ITI1llTTI1lITl
    java.awt.Rectangle getRect() -> TTTlIl11llIITI
    boolean isStateModified() -> IlTl1lI1TlIITT11
    void setStateModified(boolean) -> T1TlITlIl11I1TIl
    int getState() -> getState
    void setState(int) -> setState
isf.controls.view.controls.InscriptBorder -> isf.controls.llIT1TI.I11lIlTT.l11lIlTTI1TI:
    java.awt.Color col -> ITl1Il1II1Tll1TT
    void <init>(java.awt.Color) -> <init>
    java.awt.Insets getBorderInsets(java.awt.Component) -> getBorderInsets
    boolean isBorderOpaque() -> isBorderOpaque
    void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int) -> paintBorder
isf.controls.view.controls.InscriptButton -> isf.controls.llIT1TI.I11lIlTT.T11ITIIllTl:
    java.lang.String imageUrl -> Ill1ITTl1IIlTT11
    void <init>(java.lang.String) -> <init>
    void setScaledStatus(boolean) -> Il1II1TlT1llTI1T
    void <init>(javax.swing.ImageIcon) -> <init>
    java.awt.Dimension getPreferredSize() -> getPreferredSize
isf.controls.view.controls.IsfComboBox -> isf.controls.llIT1TI.I11lIlTT.lIlIITlTT111:
    int popupWidth -> T1IIl1TII1T1lllT
    java.awt.Dimension getPopupSize() -> lTlITT1lITlII
isf.controls.view.controls.SidDesktop -> isf.controls.llIT1TI.I11lIlTT.Il1TlIT1lTI1:
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    boolean masked -> TIIlTIl111lTlIT
    java.util.Vector avail -> lTI1TT1I1llIlIT
    javax.swing.JDesktopPane jp -> lIlITTlTI1lTI1
    isf.controls.view.containers.JIFrame[] frames -> TTllII1TI1llIT
    int count -> count
    isf.controls.view.controls.SidToolbar sidtoolbar -> TI1lIlTITlIT1l1
    java.awt.Cursor current -> l11ITTI1lTT1lIIl
    boolean loading -> lI1lIT1lI1T1ITlT
    java.lang.String about -> T1T11IIlll1lITIT
    void <init>() -> <init>
    java.awt.Insets getInsets() -> getInsets
    javax.swing.border.Border getBorder() -> getBorder
    java.lang.String addImage(isf.controls.models.DesktopDataObject) -> lI1I1T1ITTl1llIT
    void performAction(int) -> TTT11I1lI1llTIIl
    void internalFrameClosing(javax.swing.event.InternalFrameEvent) -> internalFrameClosing
    void internalFrameClosed(javax.swing.event.InternalFrameEvent) -> internalFrameClosed
    void internalFrameOpened(javax.swing.event.InternalFrameEvent) -> internalFrameOpened
    void internalFrameIconified(javax.swing.event.InternalFrameEvent) -> internalFrameIconified
    void internalFrameDeiconified(javax.swing.event.InternalFrameEvent) -> internalFrameDeiconified
    void internalFrameActivated(javax.swing.event.InternalFrameEvent) -> internalFrameActivated
    void internalFrameDeactivated(javax.swing.event.InternalFrameEvent) -> internalFrameDeactivated
    java.lang.String getActive() -> ITI1lT1Il11TITll
    void setActive(java.lang.String) -> I111IITI1TlllTTl
    java.lang.String checkImage(isf.controls.models.DesktopDataObject) -> IlITlTTTl11Il1I
    void updateCount(int) -> ITlT1lll1IITI1T1
    void reset() -> reset
    java.lang.String addImage(isf.controls.models.DesktopDataObject,isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    boolean canLoad() -> TIlllIT1TITlI111
    void stopLoad() -> IlTITIl1I1T1lTl
    void <clinit>() -> <clinit>
isf.controls.view.controls.SidToolbar -> isf.controls.llIT1TI.I11lIlTT.l1lIl1TTTI1I:
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    int index -> index
    isf.controls.view.listeners.ViewDesktopListener vdl -> ITII11llIT1llT1T
    boolean spaceDown -> lIllTI1TTTIl1I
    boolean controlDown -> TlT1l11lTTlIIII1
    java.lang.String curDir -> lIT11lITT11ITIll
    java.lang.String appMode -> Il1l1TT1TIlIIl1T
    java.lang.String appName -> ll1I1ITlTT11IlIT
    isf.controls.view.controls.ISFButton[] ptmTools -> TITlIT1l1IlI1Tl
    isf.controls.view.controls.ISFButton btnOpen -> I1ll1I1lTIlTITT
    isf.controls.view.controls.ISFButton btnDnl -> TIT1Ill1TII11Tll
    isf.controls.view.controls.ISFButton btnZin -> TIlTlIlIl1TT1I
    isf.controls.view.controls.ISFButton btnZout -> IllTT11TlI1Tl1II
    isf.controls.view.controls.ISFButton btnPan -> IITlTlI1TI1l1Tl
    isf.controls.view.controls.ISFButton btnSelZoom -> ITTl1TIllI1IT1l
    isf.controls.view.controls.ISFButton btnFit -> l1II1lTTIl1lTIT
    isf.controls.view.controls.ISFButton btnProp -> lI1TTIlT1Il11ITl
    isf.controls.view.controls.ISFButton btnAbt -> l1IlI1TlTlT11IIT
    isf.controls.view.controls.ISFButton btnSave -> lIT11TITl1TI1llI
    isf.controls.view.controls.ISFButton btnScreen -> lTTTlI11I1lIT1lI
    void <init>() -> <init>
    void setCommonButtons(boolean) -> lITTlIlT1IlI1T
    void setPTMButtons(boolean) -> ITl1I11TIlTlTlI1
    void initComponents() -> initComponents
    boolean isFloatable() -> isFloatable
    java.awt.Insets getMargin() -> getMargin
    void updateComp(isf.controls.view.controls.ISFButton) -> lI1I1T1ITTl1llIT
    void updateDefault() -> I1Tll1I1IlTTIl1T
    void access$000(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> TT1lIT1ll1ITIIl1
    void access$100(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> ITI1llTTI1lITl
    void access$200(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> l1IlTT1lITIl1IT1
    void access$300(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> lI1I1T1ITTl1llIT
    void access$400(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> IlITlTTTl11Il1I
    void access$500(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> IT11TT1lIll1ITIl
    void access$600(isf.controls.view.controls.SidToolbar,isf.controls.view.controls.ISFButton) -> TT1lIT1ll1ITIIl1
    void access$700(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> TIITI1lTlTl1Il11
    void access$800(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> TTl1TITI1l1Il1lI
    void access$900(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> IITTlT11lII1T1ll
    void access$1000(isf.controls.view.controls.SidToolbar,isf.controls.view.controls.ISFButton) -> ITI1llTTI1lITl
    void access$1100(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> l1IllT11TIIT1ITl
    void access$1200(isf.controls.view.controls.SidToolbar,java.awt.event.ActionEvent) -> l1lT1IlI1IlT1TIT
    void <clinit>() -> <clinit>
isf.controls.view.controls.SidToolbar$1 -> isf.controls.llIT1TI.I11lIlTT.TTl11llIITI:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$10 -> isf.controls.llIT1TI.I11lIlTT.IllTIT1l1IT1:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$11 -> isf.controls.llIT1TI.I11lIlTT.l1TI11ITTIll:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$12 -> isf.controls.llIT1TI.I11lIlTT.IllTIIlT11T:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$13 -> isf.controls.llIT1TI.I11lIlTT.TllIII11T1Tl:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$14 -> isf.controls.llIT1TI.I11lIlTT.ITl11lI1ITTl:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    boolean accept(java.io.File) -> accept
    java.lang.String getDescription() -> getDescription
isf.controls.view.controls.SidToolbar$2 -> isf.controls.llIT1TI.I11lIlTT.IT1llT1I1lTI:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$3 -> isf.controls.llIT1TI.I11lIlTT.I1TTIllTlI:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$4 -> isf.controls.llIT1TI.I11lIlTT.Il1IlTT1l1IT:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$5 -> isf.controls.llIT1TI.I11lIlTT.I11IlTlI1TlT:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$6 -> isf.controls.llIT1TI.I11lIlTT.l1ITTl1IlTI1:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$7 -> isf.controls.llIT1TI.I11lIlTT.IlT1TI1llTI:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$8 -> isf.controls.llIT1TI.I11lIlTT.TIlT1lTIIl:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.SidToolbar$9 -> isf.controls.llIT1TI.I11lIlTT.T1lTlIIlT1I:
    isf.controls.view.controls.SidToolbar this$0 -> lTITI1llIT1T1lI1
    void <init>(isf.controls.view.controls.SidToolbar) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
isf.controls.view.controls.ViewDesktopButton -> isf.controls.llIT1TI.I11lIlTT.TTITllII1l11:
    isf.controls.models.DesktopDataObject object -> ITTIIlllTIl1T111
    java.awt.Dimension dim -> I11TTlTl1ITIlI1l
    java.awt.Color fgColor -> TllI1ITITITl11l
    java.awt.Color pfg -> IT11T1llTITI1llI
    java.awt.Color selectedColor -> I1TlTT11lllIITI
    java.awt.Color sbgColor -> TIIlI1TlI1lT1lT1
    java.awt.Color bgColor -> T1IlTTIIIlll1T11
    void <init>(java.lang.String,javax.swing.ImageIcon,boolean) -> <init>
    void <init>(java.lang.String,java.lang.String,boolean) -> <init>
    void <init>(java.lang.String,java.lang.String,boolean,byte) -> <init>
    void <init>(isf.controls.models.DesktopDataObject,java.lang.String,boolean) -> <init>
    java.awt.Insets getInsets() -> getInsets
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void setSelected(boolean) -> setSelected
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    isf.controls.models.DesktopDataObject getObject() -> I11TTlTl1ITIlI1l
    void <clinit>() -> <clinit>
isf.controls.view.gui.ISFDesktopManager -> isf.controls.llIT1TI.l1IT1lTI.l1IlIlTI1T1T:
    boolean isDragging -> isDragging
    int frmWidth -> TTl1III1TIl1lT1l
    int frmHeight -> lllIl11ITTTII11T
    int noPTMS -> IIlT11Il1lITlTT
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    void <init>() -> <init>
    void addPTMs() -> TlTllI1TI1T1II1l
    void closePTMs() -> lITT1TlI1lI1IT1l
    void resetPTMs() -> IT1ITllI1lTI1T1l
    void beginDraggingFrame(javax.swing.JComponent) -> beginDraggingFrame
    void endDraggingFrame(javax.swing.JComponent) -> endDraggingFrame
    void iconifyFrame(javax.swing.JInternalFrame) -> iconifyFrame
    void maximizeFrame(javax.swing.JInternalFrame) -> maximizeFrame
    void resizeFrame(javax.swing.JComponent,int,int,int,int) -> resizeFrame
    void <clinit>() -> <clinit>
isf.controls.view.gui.InscriptListCellRenderer -> isf.controls.llIT1TI.l1IT1lTI.lI1lTIIlT1T1:
    void <init>() -> <init>
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
isf.controls.view.gui.InscriptListCellRenderer$1 -> isf.controls.llIT1TI.l1IT1lTI.Tl1l11IlIITT:
    isf.controls.view.gui.InscriptListCellRenderer this$0 -> TTIlTTII1l1lIl
    void <init>(isf.controls.view.gui.InscriptListCellRenderer) -> <init>
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
isf.controls.view.gui.VerticalLayout -> isf.controls.llIT1TI.l1IT1lTI.Il1TI1lIT1lT:
    int hy -> T11llT1IlTTIlII
    int wx -> I1TI1Tl1TITlIl1l
    void <init>() -> <init>
    void addLayoutComponent(java.lang.String,java.awt.Component) -> addLayoutComponent
    void removeLayoutComponent(java.awt.Component) -> removeLayoutComponent
    void layoutContainer(java.awt.Container) -> layoutContainer
    java.awt.Dimension preferredLayoutSize(java.awt.Container) -> preferredLayoutSize
    java.awt.Dimension minimumLayoutSize(java.awt.Container) -> minimumLayoutSize
isf.controls.view.listeners.ActivationListener -> isf.controls.llIT1TI.llIT1TI.l1IlIlTI1T1T:
    void activationChanged() -> IIlITllT11I1T1Tl
isf.controls.view.listeners.ActiveXListener -> isf.controls.llIT1TI.llIT1TI.lI1lTIIlT1T1:
    void minimized(java.lang.String) -> ITlT1IITl11l1lTI
    void activated(java.lang.String) -> l1TlT1T1IlIII1Tl
    void deleted(java.lang.String) -> TTT11I1lI1llTIIl
isf.controls.view.listeners.CWListener -> isf.controls.llIT1TI.llIT1TI.Tl1l11IlIITT:
    void buttonSelected(java.lang.String) -> TlTI11TIT1lIIll
isf.controls.view.listeners.CursorListener -> isf.controls.llIT1TI.llIT1TI.Il1TI1lIT1lT:
    void changeCursor(int) -> II11llTI1TlTITl1
    void changeCursor(java.awt.Cursor) -> TT1lIT1ll1ITIIl1
    java.awt.Cursor getCursor() -> getCursor
isf.controls.view.listeners.ImageLoader -> isf.controls.llIT1TI.llIT1TI.l11lIlTTI1TI:
    javax.swing.ImageIcon loadImage(java.lang.String) -> llT1lIITlIT11IT1
isf.controls.view.listeners.ImageLoaderListener -> isf.controls.llIT1TI.llIT1TI.T11ITIIllTl:
    void putImage(isf.controls.models.DesktopDataObject) -> IT11TT1lIll1ITIl
    void addDesktopData(isf.controls.models.DesktopDataObject) -> TIITI1lTlTl1Il11
    void putImage(isf.controls.models.DesktopDataObject,isf.ptm.formats.PTM) -> ITI1llTTI1lITl
isf.controls.view.listeners.KeyHandler -> isf.controls.llIT1TI.llIT1TI.lIlIITlTT111:
isf.controls.view.listeners.SizeChangeListener -> isf.controls.llIT1TI.llIT1TI.l1lIl1TTTI1I:
    void updateSize(java.lang.String) -> IllTT1IITl11lT1I
isf.controls.view.listeners.ViewDesktopListener -> isf.controls.llIT1TI.llIT1TI.IllTIT1l1IT1:
    java.lang.String addImage(isf.controls.models.DesktopDataObject) -> lI1I1T1ITTl1llIT
    java.lang.String addImage(isf.controls.models.DesktopDataObject,isf.ptm.formats.PTM) -> TT1lIT1ll1ITIIl1
    java.lang.String checkImage(isf.controls.models.DesktopDataObject) -> IlITlTTTl11Il1I
    void performAction(int) -> TTT11I1lI1llTIIl
isf.ptm.controls.PTMWindow -> isf.I11lIlTT.l11lITTI.l11lIlTTI1TI:
    isf.ptm.formats.PTM getPTM() -> TIll1IT1TlTI1lI
    void setFrameActive(boolean) -> II11llTI1TlTITl1
isf.ptm.fileio.HSHReader -> isf.I11lIlTT.I11lIlTT.l1IlIlTI1T1T:
    isf.ptm.formats.HSH ptm -> TlI1llTT1I1IIT1l
    java.lang.String version -> version
    java.io.InputStream __in -> lTITTII1lTl1Il
    boolean DEBUG -> DEBUG
    boolean reset -> reset
    int type -> type
    int[] details -> l1T1Il1lITIITT1l
    boolean fromRTI -> ITTITT1IIl11lll1
    void reset(boolean) -> reset
    void <init>(java.io.InputStream,boolean,int[],int) -> <init>
    void <init>(java.io.InputStream,boolean) -> <init>
    isf.ptm.formats.PTM readPTM() -> III1ITlTT11l1llT
isf.ptm.fileio.HSHWriter -> isf.I11lIlTT.I11lIlTT.lI1lTIIlT1T1:
    void <init>() -> <init>
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> TT1lIT1ll1ITIIl1
isf.ptm.fileio.LRGBReader -> isf.I11lIlTT.I11lIlTT.Il1TI1lIT1lT:
    isf.ptm.formats.BLRGBPTM ptm -> l1TlITTT1IllII1
    java.lang.String version -> version
    java.io.InputStream __in -> lTITTII1lTl1Il
    boolean DEBUG -> DEBUG
    boolean reset -> reset
    boolean fromRTI -> ITTITT1IIl11lll1
    int type -> type
    int basis -> TTI1l1lI1IT1lIlT
    void reset(boolean) -> reset
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,boolean) -> <init>
    void setVersion(java.lang.String) -> setVersion
    isf.ptm.formats.PTM readPTM() -> III1ITlTT11l1llT
isf.ptm.fileio.LRGBWriter -> isf.I11lIlTT.I11lIlTT.l11lIlTTI1TI:
    void <init>() -> <init>
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> TT1lIT1ll1ITIIl1
isf.ptm.fileio.PTMIO -> isf.I11lIlTT.I11lIlTT.T11ITIIllTl:
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    void <init>() -> <init>
    isf.ptm.fileio.PTMReader getPTMParser(java.io.InputStream,boolean) -> TT1lIT1ll1ITIIl1
    isf.ptm.fileio.PTMReader _getParser(java.io.InputStream,boolean) -> ITI1llTTI1lITl
    isf.ptm.formats.MVRTI getMView(java.io.InputStream) -> ITI1llTTI1lITl
    isf.ptm.formats.MVRTI _initMulti(java.io.InputStream) -> l1IlTT1lITIl1IT1
    isf.ptm.fileio.PTMReader _initParser(java.io.InputStream) -> lI1I1T1ITTl1llIT
    java.lang.String getLine(java.io.InputStream) -> IlITlTTTl11Il1I
    int[] getLineAsInts(java.io.InputStream) -> IT11TT1lIll1ITIl
    void <clinit>() -> <clinit>
isf.ptm.fileio.PTMReader -> isf.I11lIlTT.I11lIlTT.lIlIITlTT111:
    isf.ptm.formats.PTM readPTM() -> III1ITlTT11l1llT
    void reset(boolean) -> reset
isf.ptm.fileio.PTMWriter -> isf.I11lIlTT.I11lIlTT.Il1TlIT1lTI1:
    void <init>() -> <init>
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> TT1lIT1ll1ITIIl1
    byte[] getLine(int) -> ITTTT11lIIIlll11
    byte[] getLine(float[]) -> lI1I1T1ITTl1llIT
    byte[] getLine(java.lang.String) -> TlIlTTlIIIlT111
    isf.ptm.fileio.PTMWriter getPTMWriter(isf.ptm.formats.PTM) -> l1IlTT1lITIl1IT1
isf.ptm.fileio.RGBReader -> isf.I11lIlTT.I11lIlTT.l1lIl1TTTI1I:
    isf.ptm.formats.RGBPTM ptm -> lT1T1ITIllIT1l1I
    java.lang.String version -> version
    java.io.InputStream __in -> lTITTII1lTl1Il
    boolean DEBUG -> DEBUG
    boolean reset -> reset
    int type -> type
    int basis -> TTI1l1lI1IT1lIlT
    boolean fromRTI -> ITTITT1IIl11lll1
    void reset(boolean) -> reset
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,boolean) -> <init>
    void setVersion(java.lang.String) -> setVersion
    isf.ptm.formats.PTM readPTM() -> III1ITlTT11l1llT
isf.ptm.fileio.RGBWriter -> isf.I11lIlTT.I11lIlTT.TTl11llIITI:
    void <init>() -> <init>
    void writePTM(isf.ptm.formats.PTM,java.io.OutputStream) -> TT1lIT1ll1ITIIl1
isf.ptm.formats.BLRGBPTM -> isf.I11lIlTT.l1IT1lTI.l1IlIlTI1T1T:
    isf.ptm.graphics.EnvironmentMap em -> TlI1ll1T1lIIITT1
    java.util.ArrayList normals -> TlITII11ITT11lll
    byte[][] coefficients -> TIIlIIl11l1TTTl1
    int[] environmentMapCache -> I1IlTll11TITI1Tl
    int[] environmentMapMap -> TlI111TlIllTIIT1
    int width -> width
    int height -> height
    java.lang.String name -> name
    int type -> type
    int basis -> TTI1l1lI1IT1lIlT
    isf.ptm.utils.LightSource[] lights -> T1lITlIT1I11ITll
    boolean extrapolate -> llTITTl1IIlIT11
    int colors -> TIlll1TI1lITT1I
    boolean useEnv -> lTll11T1TI1TIIIl
    float DGAIN -> IT1lTl1IlITTIl11
    float KSPEC -> l111lTIITlTT1IlI
    float KDIFF -> TlTl1l1IIIT1TI1l
    int EXP -> EXP
    float LUM -> TTIl11Tll1TI1IIl
    int Z -> Tl1TIlT1Tl11lIII
    java.lang.String version -> version
    float[] scale -> IITlTllI1TTI11l
    float[] bias -> I11lT1lTlIIl1TIT
    void release() -> release
    int[] getEnvironmentMapMap() -> ITTlTI1l1lTIl1I
    void <init>() -> <init>
    byte[][] getBCoefficients() -> TllTII1Il11lTI1T
    void setCoefficients(byte[][]) -> ITI1llTTI1lITl
    void setWidth(int) -> setWidth
    void setHeight(int) -> setHeight
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void computeNormals() -> I1TllIITlT1T1lI
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> IlTIIT1Tl1llT1I
    int getFileType() -> I1T1l1lITIllITT1
    int getExp() -> IIl1lTI1TIT11llT
    float getKDiff() -> Tl1111TllITTIIlI
    float getKSpec() -> TITIlT111IllT1lI
    float getDGain() -> lIIT1T1llT1IlTI1
    boolean useEnv() -> TTll1I1TIIIlTl
    int getZ() -> getZ
    void setVersion(java.lang.String) -> setVersion
    void setBias(float[]) -> TT1lIT1ll1ITIIl1
    java.lang.String getVersion() -> getVersion
    void setScaleArray(float[]) -> IlITlTTTl11Il1I
    float[] getBias() -> IITll1lI11TlTTI
    float[] getScaleArray() -> IllTITI1l1l1TTI1
    boolean isExtrapolation() -> lTllITIl1111TTII
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setBCoeffs(int,int,int,int,int,byte[]) -> ITI1llTTI1lITl
    int getColors() -> TTITl1lIllI1TI11
    void setColors(int) -> lI1I1T1ITTl1llIT
    int getBasisType() -> IlTll1IITlI1T11T
    void setBasisType(int) -> TlTI11TIT1lIIll
    void setFileType(int) -> IllTT1IITl11lT1I
isf.ptm.formats.HSH -> isf.I11lIlTT.l1IT1lTI.lI1lTIIlT1T1:
    int colors -> TIlll1TI1lITT1I
    boolean extrapolate -> llTITTl1IIlIT11
    int EXP -> EXP
    float KDIFF -> TlTl1l1IIIT1TI1l
    float KSPEC -> l111lTIITlTT1IlI
    float LUM -> TTIl11Tll1TI1IIl
    float m_dGain -> TII1IlTlITl11Tl
    int Z -> Tl1TIlT1Tl11lIII
    int type -> type
    int width -> width
    int height -> height
    int basisType -> IlITT1I111TIllTl
    int basisTerms -> TIlTlITl11ITlI11
    int elementSize -> T1T1II1TTlllIIl
    java.lang.String name -> name
    java.lang.String version -> version
    float[] bias -> I11lT1lTlIIl1TIT
    float[] scale -> IITlTllI1TTI11l
    java.util.ArrayList normals -> TlITII11ITT11lll
    byte[][] coefficients -> TIIlIIl11l1TTTl1
    void <init>() -> <init>
    int getWidth() -> getWidth
    void setWidth(int) -> setWidth
    int getHeight() -> getHeight
    void setHeight(int) -> setHeight
    int getBasisTerms() -> T1I11TIll1TIlTlI
    void setBasisTerms(int) -> I111IITI1TlllTTl
    int getBasisType() -> IlTll1IITlI1T11T
    void setBasisType(int) -> TlTI11TIT1lIIll
    int getElementSize() -> lI1IlTTIIll11T1T
    void setElementSize(int) -> llTTI111lI1IITlT
    void setFileType(int) -> IllTT1IITl11lT1I
    int getFileType() -> I1T1l1lITIllITT1
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setVersion(java.lang.String) -> setVersion
    java.lang.String getVersion() -> getVersion
    byte[][] getBCoefficients() -> TllTII1Il11lTI1T
    void setBCoefficients(byte[][]) -> l1IlTT1lITIl1IT1
    float[] getScaleArray() -> IllTITI1l1l1TTI1
    void setScaleArray(float[]) -> IlITlTTTl11Il1I
    void computeNormals() -> I1TllIITlT1T1lI
    java.util.ArrayList getNormals() -> llITI11lTlII1T1T
    void setBias(float[]) -> TT1lIT1ll1ITIIl1
    float[] getBias() -> IITll1lI11TlTTI
    float getKSpec() -> TITIlT111IllT1lI
    float getKDiff() -> Tl1111TllITTIIlI
    float getDGain() -> lIIT1T1llT1IlTI1
    int getExp() -> IIl1lTI1TIT11llT
    int getZ() -> getZ
    void release() -> release
    void setBCoeffs(int,int,int,int,int,byte[]) -> ITI1llTTI1lITl
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> IlTIIT1Tl1llT1I
    int[] getEnvironmentMapMap() -> ITTlTI1l1lTIl1I
    boolean useEnv() -> TTll1I1TIIIlTl
    boolean isExtrapolation() -> lTllITIl1111TTII
    int getColors() -> TTITl1lIllI1TI11
    void setColors(int) -> lI1I1T1ITTl1llIT
isf.ptm.formats.MVRTI -> isf.I11lIlTT.l1IT1lTI.Il1TI1lIT1lT:
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    java.util.Hashtable files -> T11lTIT1lI1IllTI
    int orientation -> orientation
    int maxX -> maxX
    int maxY -> T1TlIllIlI1TTI11
    int views -> TlTIlI1I111TTllI
    int useFlow -> TIlII11lTll1TI1T
    isf.ptm.formats.HSH ptm -> TlI1llTT1I1IIT1l
    java.lang.String dir -> dir
    int currentView -> lT1TlII11T1ITllI
    void <init>() -> <init>
    void setFiles(java.util.Hashtable) -> ITI1llTTI1lITl
    void setOrientation(int) -> setOrientation
    void setMaxX(int) -> TlIlTTlIIIlT111
    void setMaxY(int) -> T11IITlllTT1IlI1
    void setViews(int) -> l11TTIl11lITIlIT
    void setUseFlow(int) -> Il1I1llTTlI1TIT
    void setDirectory(java.lang.String) -> setDirectory
    isf.ptm.formats.PTM getPTM(int) -> l1lTlT11ITlI1IIT
    isf.ptm.formats.PTM _getPTM(int) -> ll1TIIIT1lT1TIl1
isf.ptm.formats.PTM -> isf.I11lIlTT.l1IT1lTI.T11ITIIllTl:
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setVersion(java.lang.String) -> setVersion
    void setScaleArray(float[]) -> IlITlTTTl11Il1I
    void setBias(float[]) -> TT1lIT1ll1ITIIl1
    java.lang.String getVersion() -> getVersion
    float[] getBias() -> IITll1lI11TlTTI
    float getKSpec() -> TITIlT111IllT1lI
    float getKDiff() -> Tl1111TllITTIIlI
    float getDGain() -> lIIT1T1llT1IlTI1
    int getExp() -> IIl1lTI1TIT11llT
    int getZ() -> getZ
    void release() -> release
    int getFileType() -> I1T1l1lITIllITT1
    int getBasisType() -> IlTll1IITlI1T11T
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void setWidth(int) -> setWidth
    void setHeight(int) -> setHeight
    byte[][] getBCoefficients() -> TllTII1Il11lTI1T
    void setBCoeffs(int,int,int,int,int,byte[]) -> ITI1llTTI1lITl
    int getColors() -> TTITl1lIllI1TI11
    void computeNormals() -> I1TllIITlT1T1lI
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> IlTIIT1Tl1llT1I
    int[] getEnvironmentMapMap() -> ITTlTI1l1lTIl1I
    boolean useEnv() -> TTll1I1TIIIlTl
    float[] getScaleArray() -> IllTITI1l1l1TTI1
    boolean isExtrapolation() -> lTllITIl1111TTII
    void setBasisType(int) -> TlTI11TIT1lIIll
isf.ptm.formats.RGBPTM -> isf.I11lIlTT.l1IT1lTI.lIlIITlTT111:
    int type -> type
    int basis -> TTI1l1lI1IT1lIlT
    byte[][] bcoeff -> I1TlTlIll1T11TII
    int size -> size
    boolean extrapolate -> llTITTl1IIlIT11
    int width -> width
    int height -> height
    int EXP -> EXP
    float KDIFF -> TlTl1l1IIIT1TI1l
    float KSPEC -> l111lTIITlTT1IlI
    float LUM -> TTIl11Tll1TI1IIl
    float m_dGain -> TII1IlTlITl11Tl
    int Z -> Tl1TIlT1Tl11lIII
    java.util.ArrayList normals -> TlITII11ITT11lll
    java.lang.String name -> name
    java.lang.String version -> version
    float[] scale -> IITlTllI1TTI11l
    float[] bias -> I11lT1lTlIIl1TIT
    void <init>() -> <init>
    void computeNormals() -> I1TllIITlT1T1lI
    void setBCoefficients(byte[][]) -> l1IlTT1lITIl1IT1
    float getDGain() -> lIIT1T1llT1IlTI1
    isf.ptm.graphics.EnvironmentMap getEnvironmentMap() -> IlTIIT1Tl1llT1I
    int[] getEnvironmentMapMap() -> ITTlTI1l1lTIl1I
    int getExp() -> IIl1lTI1TIT11llT
    int getHeight() -> getHeight
    float getKDiff() -> Tl1111TllITTIIlI
    float getKSpec() -> TITIlT111IllT1lI
    int getFileType() -> I1T1l1lITIllITT1
    int getWidth() -> getWidth
    int getZ() -> getZ
    void release() -> release
    void setHeight(int) -> setHeight
    void setWidth(int) -> setWidth
    boolean useEnv() -> TTll1I1TIIIlTl
    void setVersion(java.lang.String) -> setVersion
    void setScaleArray(float[]) -> IlITlTTTl11Il1I
    void setBias(float[]) -> TT1lIT1ll1ITIIl1
    java.lang.String getVersion() -> getVersion
    float[] getScaleArray() -> IllTITI1l1l1TTI1
    float[] getBias() -> IITll1lI11TlTTI
    boolean isExtrapolation() -> lTllITIl1111TTII
    byte[][] getBCoefficients() -> TllTII1Il11lTI1T
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setBCoeffs(int,int,int,int,int,byte[]) -> ITI1llTTI1lITl
    int getColors() -> TTITl1lIllI1TI11
    int getBasisType() -> IlTll1IITlI1T11T
    void setBasisType(int) -> TlTI11TIT1lIIll
    void setFileType(int) -> IllTT1IITl11lT1I
isf.ptm.graphics.EnvironmentMap -> isf.I11lIlTT.llIT1TI.l1IlIlTI1T1T:
    int[] buf -> buf
    isf.ptm.graphics.VRGB eye -> lITIITIT111Tl1ll
    int getMapIndex(isf.ptm.graphics.VRGB) -> l1IlTT1lITIl1IT1
    int[] rotatedMap() -> Tl1llTII1Il11TTI
    void <clinit>() -> <clinit>
isf.ptm.graphics.VRGB -> isf.I11lIlTT.llIT1TI.l11lIlTTI1TI:
    float red -> TIl111lTIllTTI1I
    float green -> T1TIl1I1IITlllT1
    float blue -> lITllITlTTII11
    void <init>() -> <init>
    void <init>(float,float,float) -> <init>
    java.lang.String toString() -> toString
isf.ptm.operations.DirectionalLightOperation -> isf.I11lIlTT.lT1lIIT1.Tl1l11IlIITT:
    int width -> width
    int height -> height
    int dW -> IT11lITIlT1l1TIl
    int type -> type
    int basis -> TTI1l1lI1IT1lIlT
    isf.ptm.utils.LightSource[] sources -> TI11IIlTIllTT1l1
    boolean extrapolate -> llTITTl1IIlIT11
    float factor -> IT11lII1ll1TTIlT
    int[] map -> map
    int[] rotatedEnv -> lTlT1TIT1Il1I1Il
    java.awt.Rectangle target -> TITTT111Ill1IlIl
    java.awt.Rectangle ptmRect -> ITT1lIllTII1l11T
    void <init>() -> <init>
    void LRGBXformEnv(int[],byte[][],int,int,float[],float[]) -> TT1lIT1ll1ITIIl1
    void LRGBXform(int[],byte[][],int,int,float[],float[]) -> ITI1llTTI1lITl
    void RGBXform(int[],byte[][],int,int,float[],float[]) -> l1IlTT1lITIl1IT1
    void HSHform(int[],byte[][],float[],float[],int) -> TT1lIT1ll1ITIIl1
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    java.lang.String getName() -> getName
isf.ptm.operations.Operation -> isf.I11lIlTT.lT1lIIT1.T11ITIIllTl:
    double M_PI -> TT1IlTT1l1llIII1
    void <init>() -> <init>
    void performOperation(int[],isf.ptm.utils.LightSource[],isf.ptm.formats.PTM,int,int,int,int,int,int,int,int) -> TT1lIT1ll1ITIIl1
    double[] getHSH(double,double) -> ITI1llTTI1lITl
    java.lang.String getName() -> getName
    void <clinit>() -> <clinit>
isf.ptm.utils.LightSource -> isf.I11lIlTT.lITTl11I.l1IlIlTI1T1T:
    boolean enabled -> enabled
    javax.vecmath.Point3f light -> ITllI1l1ITlT1I1T
    float luminance -> lI1lTTIlT1IIl11T
    boolean active -> active
    int xpos -> TTlI11I1ITlTll1I
    int ypos -> TITl1I1llTI1IT1l
    void <init>() -> <init>
    boolean isEnabled() -> isEnabled
    javax.vecmath.Point3f getLight() -> IITll1TT11Il1IlT
    void setLight(javax.vecmath.Point3f) -> TT1lIT1ll1ITIIl1
    void setEnabled(boolean) -> setEnabled
    int getX() -> getX
    void setX(int) -> setX
    int getY() -> getY
    void setY(int) -> setY
    float getLuminance() -> IIlIlTTI1TTl1l1
    void setLuminance(float) -> IlITlTTTl11Il1I
    boolean isActive() -> isActive
    void setActive(boolean) -> setActive
    java.lang.String getDisplay() -> getDisplay
isf.ptm.utils.SwingWorker -> isf.I11lIlTT.lITTl11I.lI1lTIIlT1T1:
    java.lang.Object value -> value
    isf.ptm.utils.SwingWorker$ThreadVar threadVar -> ll1111lTTIITlTII
    void setValue(java.lang.Object) -> setValue
    java.lang.Object construct() -> TTIIlllIT11TlI1
    void finished() -> finished
    void <init>() -> <init>
    void start() -> start
    void access$000(isf.ptm.utils.SwingWorker,java.lang.Object) -> TT1lIT1ll1ITIIl1
    isf.ptm.utils.SwingWorker$ThreadVar access$100(isf.ptm.utils.SwingWorker) -> TT1lIT1ll1ITIIl1
isf.ptm.utils.SwingWorker$1 -> isf.I11lIlTT.lITTl11I.Tl1l11IlIITT:
    isf.ptm.utils.SwingWorker this$0 -> ITl1lT1TlI1lII1T
    void <init>(isf.ptm.utils.SwingWorker) -> <init>
    void run() -> run
isf.ptm.utils.SwingWorker$2 -> isf.I11lIlTT.lITTl11I.Il1TI1lIT1lT:
    java.lang.Runnable val$doFinished -> TlI1Il1I1IllTT1T
    isf.ptm.utils.SwingWorker this$0 -> ITl1lT1TlI1lII1T
    void <init>(isf.ptm.utils.SwingWorker,java.lang.Runnable) -> <init>
    void run() -> run
isf.ptm.utils.SwingWorker$ThreadVar -> isf.I11lIlTT.lITTl11I.l11lIlTTI1TI:
    java.lang.Thread thread -> thread
    void <init>(java.lang.Thread) -> <init>
    java.lang.Thread get() -> lIlTT1l11ITII1lT
    void clear() -> clear
isf.view.PTMTools -> isf.view.PTMTools:
    void <init>() -> <init>
isf.viewer.containers.ISFDesktopFrame -> isf.viewer.containers.ISFDesktopFrame:
    isf.controls.view.containers.ViewDesktop vd -> lIIl1ITT1T1TlI1l
    isf.controls.view.controls.SidDesktop activexPanel -> IT1lIl1lITTl11TI
    isf.controls.view.containers.ISFSplitPane jp -> l1T1I1lTIII1TTll
    isf.controls.view.containers.ProgressPane progressPane -> IllT1l1T1I1TIIlT
    int index -> index
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    java.net.ServerSocket listenSocket -> TTlIT1TIll1II11l
    java.awt.Cursor oldCursor -> TTl1lIl1TII1lT1I
    void <init>() -> <init>
    void addDesktopData(isf.controls.models.DesktopDataObject) -> TIITI1lTlTl1Il11
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void putImage(isf.controls.models.DesktopDataObject) -> IT11TT1lIll1ITIl
    void main(java.lang.String[]) -> main
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void putImage(isf.controls.models.DesktopDataObject,isf.ptm.formats.PTM) -> ITI1llTTI1lITl
    void changeCursor(int) -> II11llTI1TlTITl1
    void changeCursor(java.awt.Cursor) -> TT1lIT1ll1ITIIl1
    boolean validRTIFile(java.lang.String) -> T11IITlllTT1IlI1
    java.net.ServerSocket access$000() -> I1IlT1llIT1Tl1IT
    void <clinit>() -> <clinit>
isf.viewer.containers.ISFDesktopFrame$1 -> isf.viewer.containers.Il1TI1lIT1lT:
    isf.viewer.containers.ISFDesktopFrame this$0 -> lIIITl111lTTT1lI
    void <init>(isf.viewer.containers.ISFDesktopFrame) -> <init>
    void run() -> run
isf.viewer.utils.ClientSocket -> isf.viewer.I11lIlTT.lI1lTIIlT1T1:
    java.net.Socket socket -> socket
    org.apache.log4j.Logger log -> lI1I1T1ITTl1llIT
    void <init>(java.net.Socket) -> <init>
    void run() -> run
    void <clinit>() -> <clinit>
